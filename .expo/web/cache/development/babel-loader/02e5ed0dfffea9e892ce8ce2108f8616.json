{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { AnimatedContainer } from \"./components/AnimatedContainer\";\nimport { ErrorToast } from \"./components/ErrorToast\";\nimport { InfoToast } from \"./components/InfoToast\";\nimport { SuccessToast } from \"./components/SuccessToast\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar defaultToastConfig = {\n  success: function success(props) {\n    return _jsx(SuccessToast, _objectSpread({}, props));\n  },\n  error: function error(props) {\n    return _jsx(ErrorToast, _objectSpread({}, props));\n  },\n  info: function info(props) {\n    return _jsx(InfoToast, _objectSpread({}, props));\n  }\n};\n\nfunction renderComponent(_ref) {\n  var data = _ref.data,\n      options = _ref.options,\n      config = _ref.config,\n      isVisible = _ref.isVisible,\n      show = _ref.show,\n      hide = _ref.hide;\n  var text1 = data.text1,\n      text2 = data.text2;\n  var type = options.type,\n      onPress = options.onPress,\n      position = options.position,\n      props = options.props;\n\n  var toastConfig = _objectSpread({}, defaultToastConfig, {}, config);\n\n  var ToastComponent = toastConfig[type];\n\n  if (!ToastComponent) {\n    throw new Error(\"Toast type: '\" + type + \"' does not exist. You can add it via the 'config' prop on the Toast instance. Learn more: https://github.com/calintamas/react-native-toast-message/blob/master/README.md\");\n  }\n\n  return ToastComponent({\n    position: position,\n    type: type,\n    isVisible: isVisible,\n    text1: text1,\n    text2: text2,\n    show: show,\n    hide: hide,\n    onPress: onPress,\n    props: props\n  });\n}\n\nexport function ToastUI(props) {\n  var isVisible = props.isVisible,\n      options = props.options,\n      hide = props.hide;\n  var position = options.position,\n      topOffset = options.topOffset,\n      bottomOffset = options.bottomOffset,\n      keyboardOffset = options.keyboardOffset;\n  return _jsx(AnimatedContainer, {\n    isVisible: isVisible,\n    position: position,\n    topOffset: topOffset,\n    bottomOffset: bottomOffset,\n    keyboardOffset: keyboardOffset,\n    onHide: hide,\n    children: renderComponent(props)\n  });\n}","map":{"version":3,"sources":["/home/codenomad/Documents/newFlicknplay/flicknplayreacttv/node_modules/react-native-toast-message/lib/src/ToastUI.js"],"names":["React","AnimatedContainer","ErrorToast","InfoToast","SuccessToast","defaultToastConfig","success","props","error","info","renderComponent","data","options","config","isVisible","show","hide","text1","text2","type","onPress","position","toastConfig","ToastComponent","Error","ToastUI","topOffset","bottomOffset","keyboardOffset"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT;AACA,SAASC,UAAT;AACA,SAASC,SAAT;AACA,SAASC,YAAT;;AACA,IAAMC,kBAAkB,GAAG;AACvBC,EAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA,WAAW,KAAC,YAAD,oBAAkBA,KAAlB,EAAX;AAAA,GADc;AAEvBC,EAAAA,KAAK,EAAE,eAACD,KAAD;AAAA,WAAW,KAAC,UAAD,oBAAgBA,KAAhB,EAAX;AAAA,GAFgB;AAGvBE,EAAAA,IAAI,EAAE,cAACF,KAAD;AAAA,WAAW,KAAC,SAAD,oBAAeA,KAAf,EAAX;AAAA;AAHiB,CAA3B;;AAKA,SAASG,eAAT,OAA2E;AAAA,MAAhDC,IAAgD,QAAhDA,IAAgD;AAAA,MAA1CC,OAA0C,QAA1CA,OAA0C;AAAA,MAAjCC,MAAiC,QAAjCA,MAAiC;AAAA,MAAzBC,SAAyB,QAAzBA,SAAyB;AAAA,MAAdC,IAAc,QAAdA,IAAc;AAAA,MAARC,IAAQ,QAARA,IAAQ;AAAA,MAC/DC,KAD+D,GAC9CN,IAD8C,CAC/DM,KAD+D;AAAA,MACxDC,KADwD,GAC9CP,IAD8C,CACxDO,KADwD;AAAA,MAE/DC,IAF+D,GAE5BP,OAF4B,CAE/DO,IAF+D;AAAA,MAEzDC,OAFyD,GAE5BR,OAF4B,CAEzDQ,OAFyD;AAAA,MAEhDC,QAFgD,GAE5BT,OAF4B,CAEhDS,QAFgD;AAAA,MAEtCd,KAFsC,GAE5BK,OAF4B,CAEtCL,KAFsC;;AAGvE,MAAMe,WAAW,qBACVjB,kBADU,MAEVQ,MAFU,CAAjB;;AAIA,MAAMU,cAAc,GAAGD,WAAW,CAACH,IAAD,CAAlC;;AACA,MAAI,CAACI,cAAL,EAAqB;AACjB,UAAM,IAAIC,KAAJ,mBAA0BL,IAA1B,8KAAN;AACH;;AACD,SAAOI,cAAc,CAAC;AAClBF,IAAAA,QAAQ,EAARA,QADkB;AAElBF,IAAAA,IAAI,EAAJA,IAFkB;AAGlBL,IAAAA,SAAS,EAATA,SAHkB;AAIlBG,IAAAA,KAAK,EAALA,KAJkB;AAKlBC,IAAAA,KAAK,EAALA,KALkB;AAMlBH,IAAAA,IAAI,EAAJA,IANkB;AAOlBC,IAAAA,IAAI,EAAJA,IAPkB;AAQlBI,IAAAA,OAAO,EAAPA,OARkB;AASlBb,IAAAA,KAAK,EAALA;AATkB,GAAD,CAArB;AAWH;;AACD,OAAO,SAASkB,OAAT,CAAiBlB,KAAjB,EAAwB;AAAA,MACnBO,SADmB,GACUP,KADV,CACnBO,SADmB;AAAA,MACRF,OADQ,GACUL,KADV,CACRK,OADQ;AAAA,MACCI,IADD,GACUT,KADV,CACCS,IADD;AAAA,MAEnBK,QAFmB,GAEmCT,OAFnC,CAEnBS,QAFmB;AAAA,MAETK,SAFS,GAEmCd,OAFnC,CAETc,SAFS;AAAA,MAEEC,YAFF,GAEmCf,OAFnC,CAEEe,YAFF;AAAA,MAEgBC,cAFhB,GAEmChB,OAFnC,CAEgBgB,cAFhB;AAG3B,SAAQ,KAAC,iBAAD;AAAmB,IAAA,SAAS,EAAEd,SAA9B;AAAyC,IAAA,QAAQ,EAAEO,QAAnD;AAA6D,IAAA,SAAS,EAAEK,SAAxE;AAAmF,IAAA,YAAY,EAAEC,YAAjG;AAA+G,IAAA,cAAc,EAAEC,cAA/H;AAA+I,IAAA,MAAM,EAAEZ,IAAvJ;AAAA,cACLN,eAAe,CAACH,KAAD;AADV,IAAR;AAGH","sourcesContent":["import React from 'react';\nimport { AnimatedContainer } from './components/AnimatedContainer';\nimport { ErrorToast } from './components/ErrorToast';\nimport { InfoToast } from './components/InfoToast';\nimport { SuccessToast } from './components/SuccessToast';\nconst defaultToastConfig = {\n    success: (props) => <SuccessToast {...props}/>,\n    error: (props) => <ErrorToast {...props}/>,\n    info: (props) => <InfoToast {...props}/>\n};\nfunction renderComponent({ data, options, config, isVisible, show, hide }) {\n    const { text1, text2 } = data;\n    const { type, onPress, position, props } = options;\n    const toastConfig = {\n        ...defaultToastConfig,\n        ...config\n    };\n    const ToastComponent = toastConfig[type];\n    if (!ToastComponent) {\n        throw new Error(`Toast type: '${type}' does not exist. You can add it via the 'config' prop on the Toast instance. Learn more: https://github.com/calintamas/react-native-toast-message/blob/master/README.md`);\n    }\n    return ToastComponent({\n        position,\n        type,\n        isVisible,\n        text1,\n        text2,\n        show,\n        hide,\n        onPress,\n        props\n    });\n}\nexport function ToastUI(props) {\n    const { isVisible, options, hide } = props;\n    const { position, topOffset, bottomOffset, keyboardOffset } = options;\n    return (<AnimatedContainer isVisible={isVisible} position={position} topOffset={topOffset} bottomOffset={bottomOffset} keyboardOffset={keyboardOffset} onHide={hide}>\n      {renderComponent(props)}\n    </AnimatedContainer>);\n}\n"]},"metadata":{},"sourceType":"module"}