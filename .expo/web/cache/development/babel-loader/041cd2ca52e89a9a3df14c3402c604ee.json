{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nvar ANDROID_VERSION_LOLLIPOP = 21;\n\nvar TouchableItem = function (_React$Component) {\n  _inherits(TouchableItem, _React$Component);\n\n  function TouchableItem() {\n    _classCallCheck(this, TouchableItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TouchableItem).apply(this, arguments));\n  }\n\n  _createClass(TouchableItem, [{\n    key: \"render\",\n    value: function render() {\n      if (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n        var _this$props = this.props,\n            style = _this$props.style,\n            rest = _objectWithoutProperties(_this$props, [\"style\"]);\n\n        return React.createElement(TouchableNativeFeedback, _extends({}, rest, {\n          style: null,\n          background: TouchableNativeFeedback.Ripple(this.props.pressColor, this.props.borderless)\n        }), React.createElement(View, {\n          style: style\n        }, React.Children.only(this.props.children)));\n      }\n\n      return React.createElement(TouchableOpacity, this.props, this.props.children);\n    }\n  }]);\n\n  return TouchableItem;\n}(React.Component);\n\nexport { TouchableItem as default };\n\n_defineProperty(TouchableItem, \"defaultProps\", {\n  borderless: false,\n  pressColor: 'rgba(0, 0, 0, .32)'\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AASA,IAAMC,wBAAwB,GAAG,EAAjC;;IAOqBC,a;;;;;;;;;;;6BAMV;MASP,IACEC,QAAQ,CAACC,EAATD,KAAgB,SAAhBA,IACAA,QAAQ,CAACE,OAATF,IAAoBF,wBAFtB,EAGE;QAAA,kBAC2B,KAAKK,KADhC;QAAA,IACQC,KADR,eACQA,KADR;QAAA,IACkBC,IADlB;;QAEA,OACER,oBAACS,uBAAD,eACMD,IADN;UAEED,KAAK,EAAE,IAFT;UAGEG,UAAU,EAAED,uBAAuB,CAACE,MAAxBF,CACV,KAAKH,KAAL,CAAWM,UADDH,EAEV,KAAKH,KAAL,CAAWO,UAFDJ;QAHd,IAQET,oBAACc,IAAD;UAAMP,KAAK,EAAEA;QAAb,GAAqBP,KAAK,CAACe,QAANf,CAAegB,IAAfhB,CAAoB,KAAKM,KAAL,CAAWW,QAA/BjB,CAArB,CARF,CADF;MAYD;;MAED,OACEA,oBAACkB,gBAAD,EAAsB,KAAKZ,KAA3B,EAAmC,KAAKA,KAAL,CAAWW,QAA9C,CADF;IAGD;;;;EArCwCjB,KAAK,CAACmB,S;;SAA5BjB,a;;gBAAAA,e,gBACG;EACpBW,UAAU,EAAE,KADQ;EAEpBD,UAAU,EAAE;AAFQ","names":["React","ANDROID_VERSION_LOLLIPOP","TouchableItem","Platform","OS","Version","props","style","rest","TouchableNativeFeedback","background","Ripple","pressColor","borderless","View","Children","only","children","TouchableOpacity","Component"],"sources":["TouchableItem.tsx"],"sourcesContent":["/**\n * TouchableItem renders a touchable that looks native on both iOS and Android.\n *\n * It provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity.\n *\n * On iOS you can pass the props of TouchableOpacity, on Android pass the props\n * of TouchableNativeFeedback.\n */\nimport * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  TouchableWithoutFeedback,\n} from 'react-native';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\ntype Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {\n  pressColor: string;\n  borderless: boolean;\n};\n\nexport default class TouchableItem extends React.Component<Props> {\n  static defaultProps = {\n    borderless: false,\n    pressColor: 'rgba(0, 0, 0, .32)',\n  };\n\n  render() {\n    /*\n     * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n     * therefore only enable it on Android Lollipop and above.\n     *\n     * All touchables on Android should have the ripple effect according to\n     * platform design guidelines.\n     * We need to pass the background prop to specify a borderless ripple effect.\n     */\n    if (\n      Platform.OS === 'android' &&\n      Platform.Version >= ANDROID_VERSION_LOLLIPOP\n    ) {\n      const { style, ...rest } = this.props;\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          style={null}\n          background={TouchableNativeFeedback.Ripple(\n            this.props.pressColor,\n            this.props.borderless\n          )}\n        >\n          <View style={style}>{React.Children.only(this.props.children)}</View>\n        </TouchableNativeFeedback>\n      );\n    }\n\n    return (\n      <TouchableOpacity {...this.props}>{this.props.children}</TouchableOpacity>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}