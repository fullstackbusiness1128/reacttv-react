{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { ContinousBaseGesture } from \"./gesture\";\nexport var PanGesture = function (_ContinousBaseGesture) {\n  _inherits(PanGesture, _ContinousBaseGesture);\n\n  function PanGesture() {\n    var _this;\n\n    _classCallCheck(this, PanGesture);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PanGesture).call(this));\n\n    _defineProperty(_assertThisInitialized(_this), \"config\", {});\n\n    _this.handlerName = 'PanGestureHandler';\n    return _this;\n  }\n\n  _createClass(PanGesture, [{\n    key: \"activeOffsetY\",\n    value: function activeOffsetY(offset) {\n      if (Array.isArray(offset)) {\n        this.config.activeOffsetYStart = offset[0];\n        this.config.activeOffsetYEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.activeOffsetYStart = offset;\n      } else {\n        this.config.activeOffsetYEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"activeOffsetX\",\n    value: function activeOffsetX(offset) {\n      if (Array.isArray(offset)) {\n        this.config.activeOffsetXStart = offset[0];\n        this.config.activeOffsetXEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.activeOffsetXStart = offset;\n      } else {\n        this.config.activeOffsetXEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"failOffsetY\",\n    value: function failOffsetY(offset) {\n      if (Array.isArray(offset)) {\n        this.config.failOffsetYStart = offset[0];\n        this.config.failOffsetYEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.failOffsetYStart = offset;\n      } else {\n        this.config.failOffsetYEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"failOffsetX\",\n    value: function failOffsetX(offset) {\n      if (Array.isArray(offset)) {\n        this.config.failOffsetXStart = offset[0];\n        this.config.failOffsetXEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.failOffsetXStart = offset;\n      } else {\n        this.config.failOffsetXEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"minPointers\",\n    value: function minPointers(_minPointers) {\n      this.config.minPointers = _minPointers;\n      return this;\n    }\n  }, {\n    key: \"maxPointers\",\n    value: function maxPointers(_maxPointers) {\n      this.config.maxPointers = _maxPointers;\n      return this;\n    }\n  }, {\n    key: \"minDistance\",\n    value: function minDistance(distance) {\n      this.config.minDist = distance;\n      return this;\n    }\n  }, {\n    key: \"minVelocity\",\n    value: function minVelocity(velocity) {\n      this.config.minVelocity = velocity;\n      return this;\n    }\n  }, {\n    key: \"minVelocityX\",\n    value: function minVelocityX(velocity) {\n      this.config.minVelocityX = velocity;\n      return this;\n    }\n  }, {\n    key: \"minVelocityY\",\n    value: function minVelocityY(velocity) {\n      this.config.minVelocityY = velocity;\n      return this;\n    }\n  }, {\n    key: \"averageTouches\",\n    value: function averageTouches(value) {\n      this.config.avgTouches = value;\n      return this;\n    }\n  }, {\n    key: \"enableTrackpadTwoFingerGesture\",\n    value: function enableTrackpadTwoFingerGesture(value) {\n      this.config.enableTrackpadTwoFingerGesture = value;\n      return this;\n    }\n  }]);\n\n  return PanGesture;\n}(ContinousBaseGesture);","map":{"version":3,"mappings":"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","names":["ContinousBaseGesture","PanGesture","constructor","_defineProperty","handlerName","offset","Array","isArray","config","activeOffsetYStart","activeOffsetYEnd","activeOffsetXStart","activeOffsetXEnd","failOffsetYStart","failOffsetYEnd","failOffsetXStart","failOffsetXEnd","minPointers","maxPointers","distance","minDist","velocity","minVelocity","minVelocityX","minVelocityY","value","avgTouches","enableTrackpadTwoFingerGesture"],"sources":["panGesture.ts"],"sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport {\n  PanGestureConfig,\n  PanGestureHandlerEventPayload,\n} from '../PanGestureHandler';\n\nexport class PanGesture extends ContinousBaseGesture<PanGestureHandlerEventPayload> {\n  public config: BaseGestureConfig & PanGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'PanGestureHandler';\n  }\n\n  activeOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetYStart = offset[0];\n      this.config.activeOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetYStart = offset;\n    } else {\n      this.config.activeOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  activeOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetXStart = offset[0];\n      this.config.activeOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetXStart = offset;\n    } else {\n      this.config.activeOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetYStart = offset[0];\n      this.config.failOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetYStart = offset;\n    } else {\n      this.config.failOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetXStart = offset[0];\n      this.config.failOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetXStart = offset;\n    } else {\n      this.config.failOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  minPointers(minPointers: number) {\n    this.config.minPointers = minPointers;\n    return this;\n  }\n\n  maxPointers(maxPointers: number) {\n    this.config.maxPointers = maxPointers;\n    return this;\n  }\n\n  minDistance(distance: number) {\n    this.config.minDist = distance;\n    return this;\n  }\n\n  minVelocity(velocity: number) {\n    this.config.minVelocity = velocity;\n    return this;\n  }\n\n  minVelocityX(velocity: number) {\n    this.config.minVelocityX = velocity;\n    return this;\n  }\n\n  minVelocityY(velocity: number) {\n    this.config.minVelocityY = velocity;\n    return this;\n  }\n\n  averageTouches(value: boolean) {\n    this.config.avgTouches = value;\n    return this;\n  }\n\n  enableTrackpadTwoFingerGesture(value: boolean) {\n    this.config.enableTrackpadTwoFingerGesture = value;\n    return this;\n  }\n}\n\nexport type PanGestureType = InstanceType<typeof PanGesture>;\n"]},"metadata":{},"sourceType":"module"}