{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { SwitchRouter, NavigationActions } from 'react-navigation';\nimport * as DrawerActions from \"./DrawerActions\";\n\nfunction withDefaultValue(obj, key, defaultValue) {\n  if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n    return obj;\n  }\n\n  obj[key] = defaultValue;\n  return obj;\n}\n\nvar getActiveRouteKey = function getActiveRouteKey(route) {\n  if (route.routes && typeof route.index === 'number' && route.routes[route.index]) {\n    return getActiveRouteKey(route.routes[route.index]);\n  }\n\n  return route.key;\n};\n\nexport default (function (routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  config = _objectSpread({}, config);\n  config = withDefaultValue(config, 'resetOnBlur', config.unmountInactiveRoutes ? true : !!config.resetOnBlur);\n  config = withDefaultValue(config, 'backBehavior', 'initialRoute');\n  var switchRouter = SwitchRouter(routeConfigs, config);\n  return _objectSpread({}, switchRouter, {\n    getActionCreators: function getActionCreators(route, navStateKey) {\n      return _objectSpread({\n        openDrawer: function openDrawer() {\n          return DrawerActions.openDrawer({\n            key: navStateKey\n          });\n        },\n        closeDrawer: function closeDrawer() {\n          return DrawerActions.closeDrawer({\n            key: navStateKey\n          });\n        },\n        toggleDrawer: function toggleDrawer() {\n          return DrawerActions.toggleDrawer({\n            key: navStateKey\n          });\n        }\n      }, switchRouter.getActionCreators(route, navStateKey));\n    },\n    getStateForAction: function getStateForAction(action, state) {\n      if (!state) {\n        return _objectSpread({}, switchRouter.getStateForAction(action, undefined), {\n          isDrawerOpen: false\n        });\n      }\n\n      var isRouterTargeted = action.key == null || action.key === state.key;\n\n      if (isRouterTargeted) {\n        if (action.type === DrawerActions.CLOSE_DRAWER || action.type === NavigationActions.BACK && state.isDrawerOpen) {\n          return _objectSpread({}, state, {\n            isDrawerOpen: false\n          });\n        }\n\n        if (action.type === DrawerActions.OPEN_DRAWER) {\n          return _objectSpread({}, state, {\n            isDrawerOpen: true\n          });\n        }\n\n        if (action.type === DrawerActions.TOGGLE_DRAWER) {\n          return _objectSpread({}, state, {\n            isDrawerOpen: !state.isDrawerOpen\n          });\n        }\n      }\n\n      var switchedState = switchRouter.getStateForAction(action, state);\n\n      if (switchedState === null) {\n        return null;\n      }\n\n      if (switchedState !== state) {\n        if (getActiveRouteKey(switchedState) !== getActiveRouteKey(state) && state.isDrawerOpen) {\n          return _objectSpread({}, switchedState, {\n            isDrawerOpen: false\n          });\n        }\n\n        return switchedState;\n      }\n\n      return state;\n    }\n  });\n});","map":{"version":3,"mappings":"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","names":["SwitchRouter","NavigationActions","DrawerActions","withDefaultValue","obj","key","defaultValue","hasOwnProperty","getActiveRouteKey","route","routes","index","routeConfigs","config","unmountInactiveRoutes","resetOnBlur","switchRouter","getActionCreators","navStateKey","openDrawer","closeDrawer","toggleDrawer","getStateForAction","action","state","undefined","isDrawerOpen","isRouterTargeted","type","CLOSE_DRAWER","BACK","OPEN_DRAWER","TOGGLE_DRAWER","switchedState"],"sources":["DrawerRouter.tsx"],"sourcesContent":["import {\n  SwitchRouter,\n  NavigationActions,\n  NavigationAction,\n  NavigationRoute,\n  NavigationRouteConfigMap,\n} from 'react-navigation';\nimport * as DrawerActions from './DrawerActions';\n\ntype State = NavigationRoute & {\n  isDrawerOpen?: any;\n};\n\nfunction withDefaultValue(obj: object, key: string, defaultValue: any): any {\n  // @ts-ignore\n  if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n    return obj;\n  }\n\n  // @ts-ignore\n  obj[key] = defaultValue;\n  return obj;\n}\n\nconst getActiveRouteKey = (route: NavigationRoute): string => {\n  if (\n    route.routes &&\n    typeof route.index === 'number' &&\n    route.routes[route.index]\n  ) {\n    return getActiveRouteKey(route.routes[route.index]);\n  }\n\n  return route.key;\n};\n\nexport default (\n  routeConfigs: NavigationRouteConfigMap<any, any>,\n  config: {\n    unmountInactiveRoutes?: boolean;\n    resetOnBlur?: boolean;\n    initialRouteName?: string;\n  } = {}\n) => {\n  config = { ...config };\n  config = withDefaultValue(\n    config,\n    'resetOnBlur',\n    config.unmountInactiveRoutes ? true : !!config.resetOnBlur\n  );\n  config = withDefaultValue(config, 'backBehavior', 'initialRoute');\n\n  const switchRouter = SwitchRouter(routeConfigs, config);\n\n  return {\n    ...switchRouter,\n\n    getActionCreators(route: NavigationRoute, navStateKey: string) {\n      return {\n        openDrawer: () => DrawerActions.openDrawer({ key: navStateKey }),\n        closeDrawer: () => DrawerActions.closeDrawer({ key: navStateKey }),\n        toggleDrawer: () => DrawerActions.toggleDrawer({ key: navStateKey }),\n        ...switchRouter.getActionCreators(route, navStateKey),\n      };\n    },\n\n    getStateForAction(action: NavigationAction, state?: State) {\n      // Set up the initial state if needed\n      if (!state) {\n        return {\n          ...switchRouter.getStateForAction(action, undefined),\n          isDrawerOpen: false,\n        };\n      }\n\n      const isRouterTargeted = action.key == null || action.key === state.key;\n\n      if (isRouterTargeted) {\n        // Only handle actions that are meant for this drawer, as specified by action.key.\n        if (\n          action.type === DrawerActions.CLOSE_DRAWER ||\n          (action.type === NavigationActions.BACK && state.isDrawerOpen)\n        ) {\n          return {\n            ...state,\n            isDrawerOpen: false,\n          };\n        }\n\n        if (action.type === DrawerActions.OPEN_DRAWER) {\n          return {\n            ...state,\n            isDrawerOpen: true,\n          };\n        }\n\n        if (action.type === DrawerActions.TOGGLE_DRAWER) {\n          return {\n            ...state,\n            isDrawerOpen: !state.isDrawerOpen,\n          };\n        }\n      }\n\n      // Fall back on switch router for screen switching logic, and handling of child routers\n      const switchedState = switchRouter.getStateForAction(action, state);\n\n      if (switchedState === null) {\n        // The switch router or a child router is attempting to swallow this action. We return null to allow this.\n        return null;\n      }\n\n      // Has the switch router changed the state?\n      if (switchedState !== state) {\n        // If any navigation has happened, and the drawer is maybe open, make sure to close it\n        if (\n          getActiveRouteKey(switchedState) !== getActiveRouteKey(state) &&\n          state.isDrawerOpen\n        ) {\n          return {\n            ...switchedState,\n            isDrawerOpen: false,\n          };\n        }\n\n        // At this point, return the state as defined by the switch router.\n        // The active route key hasn't changed, so this most likely means that a child router has returned\n        // a new state like a param change, but the same key is still active and the drawer will remain open\n        return switchedState;\n      }\n\n      return state;\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}