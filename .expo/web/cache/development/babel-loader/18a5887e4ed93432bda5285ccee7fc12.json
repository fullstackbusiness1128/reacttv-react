{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { PureComponent } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport PropTypes from 'prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar TRACK_SIZE = 4;\nvar THUMB_SIZE = 20;\n\nfunction Rect(x, y, width, height) {\n  this.x = x;\n  this.y = y;\n  this.width = width;\n  this.height = height;\n}\n\nRect.prototype.containsPoint = function (x, y) {\n  return x >= this.x && y >= this.y && x <= this.x + this.width && y <= this.y + this.height;\n};\n\nvar DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0\n  }\n};\n\nvar Slider = function (_PureComponent) {\n  _inherits(Slider, _PureComponent);\n\n  function Slider() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Slider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Slider)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      containerSize: {\n        width: 0,\n        height: 0\n      },\n      trackSize: {\n        width: 0,\n        height: 0\n      },\n      thumbSize: {\n        width: 0,\n        height: 0\n      },\n      allMeasured: false,\n      value: new Animated.Value(_this.props.value)\n    };\n\n    _this._handleStartShouldSetPanResponder = function (e) {\n      return _this._thumbHitTest(e);\n    };\n\n    _this._handlePanResponderGrant = function () {\n      _this._previousLeft = _this._getThumbLeft(_this._getCurrentValue());\n\n      _this._fireChangeEvent('onSlidingStart');\n    };\n\n    _this._handlePanResponderMove = function (e, gestureState) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this._setCurrentValue(_this._getValue(gestureState));\n\n      _this._fireChangeEvent('onValueChange');\n    };\n\n    _this._handlePanResponderEnd = function (e, gestureState) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this._setCurrentValue(_this._getValue(gestureState));\n\n      _this._fireChangeEvent('onSlidingComplete');\n    };\n\n    _this._measureContainer = function (x) {\n      _this._handleMeasure('containerSize', x);\n    };\n\n    _this._measureTrack = function (x) {\n      _this._handleMeasure('trackSize', x);\n    };\n\n    _this._measureThumb = function (x) {\n      _this._handleMeasure('thumbSize', x);\n    };\n\n    _this._handleMeasure = function (name, x) {\n      var _x$nativeEvent$layout = x.nativeEvent.layout,\n          width = _x$nativeEvent$layout.width,\n          height = _x$nativeEvent$layout.height;\n      var size = {\n        width: width,\n        height: height\n      };\n      var storeName = \"_\" + name;\n      var currentSize = _this[storeName];\n\n      if (currentSize && width === currentSize.width && height === currentSize.height) {\n        return;\n      }\n\n      _this[storeName] = size;\n\n      if (_this._containerSize && _this._trackSize && _this._thumbSize) {\n        _this.setState({\n          containerSize: _this._containerSize,\n          trackSize: _this._trackSize,\n          thumbSize: _this._thumbSize,\n          allMeasured: true\n        });\n      }\n    };\n\n    _this._getRatio = function (value) {\n      return (value - _this.props.minimumValue) / (_this.props.maximumValue - _this.props.minimumValue);\n    };\n\n    _this._getThumbLeft = function (value) {\n      var nonRtlRatio = _this._getRatio(value);\n\n      var ratio = I18nManager.isRTL ? 1 - nonRtlRatio : nonRtlRatio;\n      return ratio * (_this.state.containerSize.width - _this.state.thumbSize.width);\n    };\n\n    _this._getValue = function (gestureState) {\n      var length = _this.state.containerSize.width - _this.state.thumbSize.width;\n      var thumbLeft = _this._previousLeft + gestureState.dx;\n      var nonRtlRatio = thumbLeft / length;\n      var ratio = I18nManager.isRTL ? 1 - nonRtlRatio : nonRtlRatio;\n\n      if (_this.props.step) {\n        return Math.max(_this.props.minimumValue, Math.min(_this.props.maximumValue, _this.props.minimumValue + Math.round(ratio * (_this.props.maximumValue - _this.props.minimumValue) / _this.props.step) * _this.props.step));\n      }\n\n      return Math.max(_this.props.minimumValue, Math.min(_this.props.maximumValue, ratio * (_this.props.maximumValue - _this.props.minimumValue) + _this.props.minimumValue));\n    };\n\n    _this._getCurrentValue = function () {\n      return _this.state.value.__getValue();\n    };\n\n    _this._setCurrentValue = function (value) {\n      _this.state.value.setValue(value);\n    };\n\n    _this._setCurrentValueAnimated = function (value) {\n      var animationType = _this.props.animationType;\n\n      var animationConfig = _extends({}, DEFAULT_ANIMATION_CONFIGS[animationType], _this.props.animationConfig, {\n        toValue: value\n      });\n\n      Animated[animationType](_this.state.value, animationConfig).start();\n    };\n\n    _this._fireChangeEvent = function (event) {\n      if (_this.props[event]) {\n        _this.props[event](_this._getCurrentValue());\n      }\n    };\n\n    _this._getTouchOverflowSize = function () {\n      var state = _this.state;\n      var props = _this.props;\n      var size = {};\n\n      if (state.allMeasured === true) {\n        size.width = Math.max(0, props.thumbTouchSize.width - state.thumbSize.width);\n        size.height = Math.max(0, props.thumbTouchSize.height - state.containerSize.height);\n      }\n\n      return size;\n    };\n\n    _this._getTouchOverflowStyle = function () {\n      var _this$_getTouchOverfl = _this._getTouchOverflowSize(),\n          width = _this$_getTouchOverfl.width,\n          height = _this$_getTouchOverfl.height;\n\n      var touchOverflowStyle = {};\n\n      if (width !== undefined && height !== undefined) {\n        var verticalMargin = -height / 2;\n        touchOverflowStyle.marginTop = verticalMargin;\n        touchOverflowStyle.marginBottom = verticalMargin;\n        var horizontalMargin = -width / 2;\n        touchOverflowStyle.marginLeft = horizontalMargin;\n        touchOverflowStyle.marginRight = horizontalMargin;\n      }\n\n      if (_this.props.debugTouchArea === true) {\n        touchOverflowStyle.backgroundColor = 'orange';\n        touchOverflowStyle.opacity = 0.5;\n      }\n\n      return touchOverflowStyle;\n    };\n\n    _this._thumbHitTest = function (e) {\n      var nativeEvent = e.nativeEvent;\n\n      var thumbTouchRect = _this._getThumbTouchRect();\n\n      return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);\n    };\n\n    _this._getThumbTouchRect = function () {\n      var state = _this.state;\n      var props = _this.props;\n\n      var touchOverflowSize = _this._getTouchOverflowSize();\n\n      return new Rect(touchOverflowSize.width / 2 + _this._getThumbLeft(_this._getCurrentValue()) + (state.thumbSize.width - props.thumbTouchSize.width) / 2, touchOverflowSize.height / 2 + (state.containerSize.height - props.thumbTouchSize.height) / 2, props.thumbTouchSize.width, props.thumbTouchSize.height);\n    };\n\n    _this._renderDebugThumbTouchRect = function (thumbLeft) {\n      var thumbTouchRect = _this._getThumbTouchRect();\n\n      var positionStyle = {\n        left: thumbLeft,\n        top: thumbTouchRect.y,\n        width: thumbTouchRect.width,\n        height: thumbTouchRect.height\n      };\n      return _jsx(Animated.View, {\n        style: [defaultStyles.debugThumbTouchArea, positionStyle],\n        pointerEvents: \"none\"\n      });\n    };\n\n    _this._renderThumbImage = function () {\n      var thumbImage = _this.props.thumbImage;\n      if (!thumbImage) return;\n      return _jsx(Image, {\n        source: thumbImage\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Slider, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this._panResponder = PanResponder.create({\n        onStartShouldSetPanResponder: this._handleStartShouldSetPanResponder,\n        onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,\n        onPanResponderGrant: this._handlePanResponderGrant,\n        onPanResponderMove: this._handlePanResponderMove,\n        onPanResponderRelease: this._handlePanResponderEnd,\n        onPanResponderTerminationRequest: this._handlePanResponderRequestEnd,\n        onPanResponderTerminate: this._handlePanResponderEnd\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var newValue = nextProps.value;\n\n      if (this.props.value !== newValue) {\n        if (this.props.animateTransitions) {\n          this._setCurrentValueAnimated(newValue);\n        } else {\n          this._setCurrentValue(newValue);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          minimumValue = _this$props.minimumValue,\n          maximumValue = _this$props.maximumValue,\n          minimumTrackTintColor = _this$props.minimumTrackTintColor,\n          maximumTrackTintColor = _this$props.maximumTrackTintColor,\n          thumbTintColor = _this$props.thumbTintColor,\n          thumbImage = _this$props.thumbImage,\n          styles = _this$props.styles,\n          style = _this$props.style,\n          trackStyle = _this$props.trackStyle,\n          thumbStyle = _this$props.thumbStyle,\n          debugTouchArea = _this$props.debugTouchArea,\n          onValueChange = _this$props.onValueChange,\n          thumbTouchSize = _this$props.thumbTouchSize,\n          animationType = _this$props.animationType,\n          animateTransitions = _this$props.animateTransitions,\n          other = _objectWithoutProperties(_this$props, [\"minimumValue\", \"maximumValue\", \"minimumTrackTintColor\", \"maximumTrackTintColor\", \"thumbTintColor\", \"thumbImage\", \"styles\", \"style\", \"trackStyle\", \"thumbStyle\", \"debugTouchArea\", \"onValueChange\", \"thumbTouchSize\", \"animationType\", \"animateTransitions\"]);\n\n      var _this$state = this.state,\n          value = _this$state.value,\n          containerSize = _this$state.containerSize,\n          trackSize = _this$state.trackSize,\n          thumbSize = _this$state.thumbSize,\n          allMeasured = _this$state.allMeasured;\n      var mainStyles = styles || defaultStyles;\n      var thumbLeft = value.interpolate({\n        inputRange: [minimumValue, maximumValue],\n        outputRange: I18nManager.isRTL ? [0, -(containerSize.width - thumbSize.width)] : [0, containerSize.width - thumbSize.width]\n      });\n      var minimumTrackWidth = value.interpolate({\n        inputRange: [minimumValue, maximumValue],\n        outputRange: [0, containerSize.width - thumbSize.width]\n      });\n      var valueVisibleStyle = {};\n\n      if (!allMeasured) {\n        valueVisibleStyle.opacity = 0;\n      }\n\n      var minimumTrackStyle = _objectSpread({\n        position: 'absolute',\n        width: Animated.add(minimumTrackWidth, thumbSize.width / 2),\n        backgroundColor: minimumTrackTintColor\n      }, valueVisibleStyle);\n\n      var touchOverflowStyle = this._getTouchOverflowStyle();\n\n      return _jsxs(View, _objectSpread({}, other, {\n        style: [mainStyles.container, style],\n        onLayout: this._measureContainer,\n        children: [_jsx(View, {\n          style: [{\n            backgroundColor: maximumTrackTintColor\n          }, mainStyles.track, trackStyle],\n          renderToHardwareTextureAndroid: true,\n          onLayout: this._measureTrack\n        }), _jsx(Animated.View, {\n          renderToHardwareTextureAndroid: true,\n          style: [mainStyles.track, trackStyle, minimumTrackStyle]\n        }), _jsx(Animated.View, {\n          onLayout: this._measureThumb,\n          renderToHardwareTextureAndroid: true,\n          style: [{\n            backgroundColor: thumbTintColor\n          }, mainStyles.thumb, thumbStyle, _objectSpread({\n            transform: [{\n              translateX: thumbLeft\n            }, {\n              translateY: 0\n            }]\n          }, valueVisibleStyle)],\n          children: this._renderThumbImage()\n        }), _jsx(View, _objectSpread({\n          renderToHardwareTextureAndroid: true,\n          style: [defaultStyles.touchArea, touchOverflowStyle]\n        }, this._panResponder.panHandlers, {\n          children: debugTouchArea === true && this._renderDebugThumbTouchRect(minimumTrackWidth)\n        }))]\n      }));\n    }\n  }, {\n    key: \"_getPropsForComponentUpdate\",\n    value: function _getPropsForComponentUpdate(props) {\n      var value = props.value,\n          onValueChange = props.onValueChange,\n          onSlidingStart = props.onSlidingStart,\n          onSlidingComplete = props.onSlidingComplete,\n          style = props.style,\n          trackStyle = props.trackStyle,\n          thumbStyle = props.thumbStyle,\n          otherProps = _objectWithoutProperties(props, [\"value\", \"onValueChange\", \"onSlidingStart\", \"onSlidingComplete\", \"style\", \"trackStyle\", \"thumbStyle\"]);\n\n      return otherProps;\n    }\n  }, {\n    key: \"_handleMoveShouldSetPanResponder\",\n    value: function _handleMoveShouldSetPanResponder() {\n      return false;\n    }\n  }, {\n    key: \"_handlePanResponderRequestEnd\",\n    value: function _handlePanResponderRequestEnd(e, gestureState) {\n      return false;\n    }\n  }]);\n\n  return Slider;\n}(PureComponent);\n\nSlider.propTypes = {\n  value: PropTypes.number,\n  disabled: PropTypes.bool,\n  minimumValue: PropTypes.number,\n  maximumValue: PropTypes.number,\n  step: PropTypes.number,\n  minimumTrackTintColor: PropTypes.string,\n  maximumTrackTintColor: PropTypes.string,\n  thumbTintColor: PropTypes.string,\n  thumbTouchSize: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number\n  }),\n  onValueChange: PropTypes.func,\n  onSlidingStart: PropTypes.func,\n  onSlidingComplete: PropTypes.func,\n  style: ViewPropTypes.style,\n  trackStyle: ViewPropTypes.style,\n  thumbStyle: ViewPropTypes.style,\n  thumbImage: Image.propTypes.source,\n  debugTouchArea: PropTypes.bool,\n  animateTransitions: PropTypes.bool,\n  animationType: PropTypes.oneOf(['spring', 'timing']),\n  animationConfig: PropTypes.object\n};\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  thumbTintColor: '#343434',\n  thumbTouchSize: {\n    width: 40,\n    height: 40\n  },\n  debugTouchArea: false,\n  animationType: 'timing'\n};\nexport { Slider as default };\nvar defaultStyles = StyleSheet.create({\n  container: {\n    height: 40,\n    justifyContent: 'center'\n  },\n  track: {\n    height: TRACK_SIZE,\n    borderRadius: TRACK_SIZE / 2\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5\n  }\n});","map":{"version":3,"sources":["/home/codenomad/Documents/flicknplayreacttv/node_modules/react-native-video-players/src/VideoPlayerComponents/Slider.js"],"names":["React","PureComponent","ViewPropTypes","PropTypes","TRACK_SIZE","THUMB_SIZE","Rect","x","y","width","height","prototype","containsPoint","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","timing","duration","easing","Easing","inOut","ease","delay","Slider","state","containerSize","trackSize","thumbSize","allMeasured","value","Animated","Value","props","_handleStartShouldSetPanResponder","e","_thumbHitTest","_handlePanResponderGrant","_previousLeft","_getThumbLeft","_getCurrentValue","_fireChangeEvent","_handlePanResponderMove","gestureState","disabled","_setCurrentValue","_getValue","_handlePanResponderEnd","_measureContainer","_handleMeasure","_measureTrack","_measureThumb","name","nativeEvent","layout","size","storeName","currentSize","_containerSize","_trackSize","_thumbSize","setState","_getRatio","minimumValue","maximumValue","nonRtlRatio","ratio","I18nManager","isRTL","length","thumbLeft","dx","step","Math","max","min","round","__getValue","setValue","_setCurrentValueAnimated","animationType","animationConfig","toValue","start","event","_getTouchOverflowSize","thumbTouchSize","_getTouchOverflowStyle","touchOverflowStyle","undefined","verticalMargin","marginTop","marginBottom","horizontalMargin","marginLeft","marginRight","debugTouchArea","backgroundColor","opacity","thumbTouchRect","_getThumbTouchRect","locationX","locationY","touchOverflowSize","_renderDebugThumbTouchRect","positionStyle","left","top","defaultStyles","debugThumbTouchArea","_renderThumbImage","thumbImage","_panResponder","PanResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","_handleMoveShouldSetPanResponder","onPanResponderGrant","onPanResponderMove","onPanResponderRelease","onPanResponderTerminationRequest","_handlePanResponderRequestEnd","onPanResponderTerminate","nextProps","newValue","animateTransitions","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","styles","style","trackStyle","thumbStyle","onValueChange","other","mainStyles","interpolate","inputRange","outputRange","minimumTrackWidth","valueVisibleStyle","minimumTrackStyle","position","add","container","track","thumb","transform","translateX","translateY","touchArea","panHandlers","onSlidingStart","onSlidingComplete","otherProps","propTypes","number","bool","string","shape","func","Image","source","oneOf","object","defaultProps","StyleSheet","justifyContent","borderRadius","right","bottom"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\r\n\r\nimport {\r\n    Animated,\r\n    Image,\r\n    StyleSheet,\r\n    PanResponder,\r\n    View,\r\n    Easing,\r\n    ViewPropTypes,\r\n    I18nManager,\r\n} from 'react-native';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TRACK_SIZE = 4;\r\nconst THUMB_SIZE = 20;\r\n\r\nfunction Rect(x, y, width, height) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.height = height;\r\n}\r\n\r\nRect.prototype.containsPoint = function (x, y) {\r\n    return (\r\n        x >= this.x &&\r\n        y >= this.y &&\r\n        x <= this.x + this.width &&\r\n        y <= this.y + this.height\r\n    );\r\n};\r\n\r\nconst DEFAULT_ANIMATION_CONFIGS = {\r\n    spring: {\r\n        friction: 7,\r\n        tension: 100,\r\n    },\r\n    timing: {\r\n        duration: 150,\r\n        easing: Easing.inOut(Easing.ease),\r\n        delay: 0,\r\n    },\r\n    // decay : { // This has a serious bug\r\n    //   velocity     : 1,\r\n    //   deceleration : 0.997\r\n    // }\r\n};\r\n\r\nexport default class Slider extends PureComponent {\r\n    static propTypes = {\r\n        /**\r\n         * Initial value of the slider. The value should be between minimumValue\r\n         * and maximumValue, which default to 0 and 1 respectively.\r\n         * Default value is 0.\r\n         *\r\n         * *This is not a controlled component*, e.g. if you don't update\r\n         * the value, the component won't be reset to its inital value.\r\n         */\r\n        value: PropTypes.number,\r\n\r\n        /**\r\n         * If true the user won't be able to move the slider.\r\n         * Default value is false.\r\n         */\r\n        disabled: PropTypes.bool,\r\n\r\n        /**\r\n         * Initial minimum value of the slider. Default value is 0.\r\n         */\r\n        minimumValue: PropTypes.number,\r\n\r\n        /**\r\n         * Initial maximum value of the slider. Default value is 1.\r\n         */\r\n        maximumValue: PropTypes.number,\r\n\r\n        /**\r\n         * Step value of the slider. The value should be between 0 and\r\n         * (maximumValue - minimumValue). Default value is 0.\r\n         */\r\n        step: PropTypes.number,\r\n\r\n        /**\r\n         * The color used for the track to the left of the button. Overrides the\r\n         * default blue gradient image.\r\n         */\r\n        minimumTrackTintColor: PropTypes.string,\r\n\r\n        /**\r\n         * The color used for the track to the right of the button. Overrides the\r\n         * default blue gradient image.\r\n         */\r\n        maximumTrackTintColor: PropTypes.string,\r\n\r\n        /**\r\n         * The color used for the thumb.\r\n         */\r\n        thumbTintColor: PropTypes.string,\r\n\r\n        /**\r\n         * The size of the touch area that allows moving the thumb.\r\n         * The touch area has the same center has the visible thumb.\r\n         * This allows to have a visually small thumb while still allowing the user\r\n         * to move it easily.\r\n         * The default is {width: 40, height: 40}.\r\n         */\r\n        thumbTouchSize: PropTypes.shape({\r\n            width: PropTypes.number,\r\n            height: PropTypes.number,\r\n        }),\r\n\r\n        /**\r\n         * Callback continuously called while the user is dragging the slider.\r\n         */\r\n        onValueChange: PropTypes.func,\r\n\r\n        /**\r\n         * Callback called when the user starts changing the value (e.g. when\r\n         * the slider is pressed).\r\n         */\r\n        onSlidingStart: PropTypes.func,\r\n\r\n        /**\r\n         * Callback called when the user finishes changing the value (e.g. when\r\n         * the slider is released).\r\n         */\r\n        onSlidingComplete: PropTypes.func,\r\n\r\n        /**\r\n         * The style applied to the slider container.\r\n         */\r\n        style: ViewPropTypes.style,\r\n\r\n        /**\r\n         * The style applied to the track.\r\n         */\r\n        trackStyle: ViewPropTypes.style,\r\n\r\n        /**\r\n         * The style applied to the thumb.\r\n         */\r\n        thumbStyle: ViewPropTypes.style,\r\n\r\n        /**\r\n         * Sets an image for the thumb.\r\n         */\r\n        thumbImage: Image.propTypes.source,\r\n\r\n        /**\r\n         * Set this to true to visually see the thumb touch rect in green.\r\n         */\r\n        debugTouchArea: PropTypes.bool,\r\n\r\n        /**\r\n         * Set to true to animate values with default 'timing' animation type\r\n         */\r\n        animateTransitions: PropTypes.bool,\r\n\r\n        /**\r\n         * Custom Animation type. 'spring' or 'timing'.\r\n         */\r\n        animationType: PropTypes.oneOf(['spring', 'timing']),\r\n\r\n        /**\r\n         * Used to configure the animation parameters.  These are the same parameters in the Animated library.\r\n         */\r\n        animationConfig: PropTypes.object,\r\n    };\r\n\r\n    static defaultProps = {\r\n        value: 0,\r\n        minimumValue: 0,\r\n        maximumValue: 1,\r\n        step: 0,\r\n        minimumTrackTintColor: '#3f3f3f',\r\n        maximumTrackTintColor: '#b3b3b3',\r\n        thumbTintColor: '#343434',\r\n        thumbTouchSize: { width: 40, height: 40 },\r\n        debugTouchArea: false,\r\n        animationType: 'timing',\r\n    };\r\n\r\n    state = {\r\n        containerSize: { width: 0, height: 0 },\r\n        trackSize: { width: 0, height: 0 },\r\n        thumbSize: { width: 0, height: 0 },\r\n        allMeasured: false,\r\n        value: new Animated.Value(this.props.value),\r\n    };\r\n\r\n    componentWillMount() {\r\n        this._panResponder = PanResponder.create({\r\n            onStartShouldSetPanResponder: this._handleStartShouldSetPanResponder,\r\n            onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,\r\n            onPanResponderGrant: this._handlePanResponderGrant,\r\n            onPanResponderMove: this._handlePanResponderMove,\r\n            onPanResponderRelease: this._handlePanResponderEnd,\r\n            onPanResponderTerminationRequest: this._handlePanResponderRequestEnd,\r\n            onPanResponderTerminate: this._handlePanResponderEnd,\r\n        });\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        const newValue = nextProps.value;\r\n\r\n        if (this.props.value !== newValue) {\r\n            if (this.props.animateTransitions) {\r\n                this._setCurrentValueAnimated(newValue);\r\n            } else {\r\n                this._setCurrentValue(newValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            minimumValue,\r\n            maximumValue,\r\n            minimumTrackTintColor,\r\n            maximumTrackTintColor,\r\n            thumbTintColor,\r\n            thumbImage,\r\n            styles,\r\n            style,\r\n            trackStyle,\r\n            thumbStyle,\r\n            debugTouchArea,\r\n            onValueChange,\r\n            thumbTouchSize,\r\n            animationType,\r\n            animateTransitions,\r\n            ...other\r\n        } = this.props;\r\n        const {\r\n            value,\r\n            containerSize,\r\n            trackSize,\r\n            thumbSize,\r\n            allMeasured,\r\n        } = this.state;\r\n        const mainStyles = styles || defaultStyles;\r\n        const thumbLeft = value.interpolate({\r\n            inputRange: [minimumValue, maximumValue],\r\n            outputRange: I18nManager.isRTL\r\n                ? [0, -(containerSize.width - thumbSize.width)]\r\n                : [0, containerSize.width - thumbSize.width],\r\n            // extrapolate: 'clamp',\r\n        });\r\n        const minimumTrackWidth = value.interpolate({\r\n            inputRange: [minimumValue, maximumValue],\r\n            outputRange: [0, containerSize.width - thumbSize.width],\r\n            // extrapolate: 'clamp',\r\n        });\r\n        const valueVisibleStyle = {};\r\n        if (!allMeasured) {\r\n            valueVisibleStyle.opacity = 0;\r\n        }\r\n\r\n        const minimumTrackStyle = {\r\n            position: 'absolute',\r\n            width: Animated.add(minimumTrackWidth, thumbSize.width / 2),\r\n            backgroundColor: minimumTrackTintColor,\r\n            ...valueVisibleStyle,\r\n        };\r\n\r\n        const touchOverflowStyle = this._getTouchOverflowStyle();\r\n\r\n        return (\r\n            <View\r\n                {...other}\r\n                style={[mainStyles.container, style]}\r\n                onLayout={this._measureContainer}\r\n            >\r\n                <View\r\n                    style={[\r\n                        { backgroundColor: maximumTrackTintColor },\r\n                        mainStyles.track,\r\n                        trackStyle,\r\n                    ]}\r\n                    renderToHardwareTextureAndroid\r\n                    onLayout={this._measureTrack}\r\n                />\r\n                <Animated.View\r\n                    renderToHardwareTextureAndroid\r\n                    style={[mainStyles.track, trackStyle, minimumTrackStyle]}\r\n                />\r\n                <Animated.View\r\n                    onLayout={this._measureThumb}\r\n                    renderToHardwareTextureAndroid\r\n                    style={[\r\n                        { backgroundColor: thumbTintColor },\r\n                        mainStyles.thumb,\r\n                        thumbStyle,\r\n                        {\r\n                            transform: [{ translateX: thumbLeft }, { translateY: 0 }],\r\n                            ...valueVisibleStyle,\r\n                        },\r\n                    ]}\r\n                >\r\n                    {this._renderThumbImage()}\r\n                </Animated.View>\r\n                <View\r\n                    renderToHardwareTextureAndroid\r\n                    style={[defaultStyles.touchArea, touchOverflowStyle]}\r\n                    {...this._panResponder.panHandlers}\r\n                >\r\n                    {debugTouchArea === true &&\r\n                        this._renderDebugThumbTouchRect(minimumTrackWidth)}\r\n                </View>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    _getPropsForComponentUpdate(props) {\r\n        const {\r\n            value,\r\n            onValueChange,\r\n            onSlidingStart,\r\n            onSlidingComplete,\r\n            style,\r\n            trackStyle,\r\n            thumbStyle,\r\n            ...otherProps\r\n        } = props;\r\n\r\n        return otherProps;\r\n    }\r\n\r\n    _handleStartShouldSetPanResponder = (\r\n        e: Object /* gestureState: Object */,\r\n    ): boolean =>\r\n        // Should we become active when the user presses down on the thumb?\r\n        this._thumbHitTest(e);\r\n\r\n    _handleMoveShouldSetPanResponder(/* e: Object, gestureState: Object */): boolean {\r\n        // Should we become active when the user moves a touch over the thumb?\r\n        return false;\r\n    }\r\n\r\n    _handlePanResponderGrant = (/* e: Object, gestureState: Object */) => {\r\n        this._previousLeft = this._getThumbLeft(this._getCurrentValue());\r\n        this._fireChangeEvent('onSlidingStart');\r\n    };\r\n\r\n    _handlePanResponderMove = (e: Object, gestureState: Object) => {\r\n        if (this.props.disabled) {\r\n            return;\r\n        }\r\n\r\n        this._setCurrentValue(this._getValue(gestureState));\r\n        this._fireChangeEvent('onValueChange');\r\n    };\r\n\r\n    _handlePanResponderRequestEnd(e: Object, gestureState: Object) {\r\n        // Should we allow another component to take over this pan?\r\n        return false;\r\n    }\r\n\r\n    _handlePanResponderEnd = (e: Object, gestureState: Object) => {\r\n        if (this.props.disabled) {\r\n            return;\r\n        }\r\n\r\n        this._setCurrentValue(this._getValue(gestureState));\r\n        this._fireChangeEvent('onSlidingComplete');\r\n    };\r\n\r\n    _measureContainer = (x: Object) => {\r\n        this._handleMeasure('containerSize', x);\r\n    };\r\n\r\n    _measureTrack = (x: Object) => {\r\n        this._handleMeasure('trackSize', x);\r\n    };\r\n\r\n    _measureThumb = (x: Object) => {\r\n        this._handleMeasure('thumbSize', x);\r\n    };\r\n\r\n    _handleMeasure = (name: string, x: Object) => {\r\n        const { width, height } = x.nativeEvent.layout;\r\n        const size = { width, height };\r\n\r\n        const storeName = `_${name}`;\r\n        const currentSize = this[storeName];\r\n        if (\r\n            currentSize &&\r\n            width === currentSize.width &&\r\n            height === currentSize.height\r\n        ) {\r\n            return;\r\n        }\r\n        this[storeName] = size;\r\n\r\n        if (this._containerSize && this._trackSize && this._thumbSize) {\r\n            this.setState({\r\n                containerSize: this._containerSize,\r\n                trackSize: this._trackSize,\r\n                thumbSize: this._thumbSize,\r\n                allMeasured: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    _getRatio = (value: number) =>\r\n        (value - this.props.minimumValue) /\r\n        (this.props.maximumValue - this.props.minimumValue);\r\n\r\n    _getThumbLeft = (value: number) => {\r\n        const nonRtlRatio = this._getRatio(value);\r\n        const ratio = I18nManager.isRTL ? 1 - nonRtlRatio : nonRtlRatio;\r\n        return (\r\n            ratio * (this.state.containerSize.width - this.state.thumbSize.width)\r\n        );\r\n    };\r\n\r\n    _getValue = (gestureState: Object) => {\r\n        const length = this.state.containerSize.width - this.state.thumbSize.width;\r\n        const thumbLeft = this._previousLeft + gestureState.dx;\r\n\r\n        const nonRtlRatio = thumbLeft / length;\r\n        const ratio = I18nManager.isRTL ? 1 - nonRtlRatio : nonRtlRatio;\r\n\r\n        if (this.props.step) {\r\n            return Math.max(\r\n                this.props.minimumValue,\r\n                Math.min(\r\n                    this.props.maximumValue,\r\n                    this.props.minimumValue +\r\n                    Math.round(\r\n                        ratio *\r\n                        (this.props.maximumValue - this.props.minimumValue) /\r\n                        this.props.step,\r\n                    ) *\r\n                    this.props.step,\r\n                ),\r\n            );\r\n        }\r\n        return Math.max(\r\n            this.props.minimumValue,\r\n            Math.min(\r\n                this.props.maximumValue,\r\n                ratio * (this.props.maximumValue - this.props.minimumValue) +\r\n                this.props.minimumValue,\r\n            ),\r\n        );\r\n    };\r\n\r\n    _getCurrentValue = () => this.state.value.__getValue();\r\n\r\n    _setCurrentValue = (value: number) => {\r\n        this.state.value.setValue(value);\r\n    };\r\n\r\n    _setCurrentValueAnimated = (value: number) => {\r\n        const animationType = this.props.animationType;\r\n        const animationConfig = Object.assign(\r\n            {},\r\n            DEFAULT_ANIMATION_CONFIGS[animationType],\r\n            this.props.animationConfig,\r\n            {\r\n                toValue: value,\r\n            },\r\n        );\r\n\r\n        Animated[animationType](this.state.value, animationConfig).start();\r\n    };\r\n\r\n    _fireChangeEvent = event => {\r\n        if (this.props[event]) {\r\n            this.props[event](this._getCurrentValue());\r\n        }\r\n    };\r\n\r\n    _getTouchOverflowSize = () => {\r\n        const state = this.state;\r\n        const props = this.props;\r\n\r\n        const size = {};\r\n        if (state.allMeasured === true) {\r\n            size.width = Math.max(\r\n                0,\r\n                props.thumbTouchSize.width - state.thumbSize.width,\r\n            );\r\n            size.height = Math.max(\r\n                0,\r\n                props.thumbTouchSize.height - state.containerSize.height,\r\n            );\r\n        }\r\n\r\n        return size;\r\n    };\r\n\r\n    _getTouchOverflowStyle = () => {\r\n        const { width, height } = this._getTouchOverflowSize();\r\n\r\n        const touchOverflowStyle = {};\r\n        if (width !== undefined && height !== undefined) {\r\n            const verticalMargin = -height / 2;\r\n            touchOverflowStyle.marginTop = verticalMargin;\r\n            touchOverflowStyle.marginBottom = verticalMargin;\r\n\r\n            const horizontalMargin = -width / 2;\r\n            touchOverflowStyle.marginLeft = horizontalMargin;\r\n            touchOverflowStyle.marginRight = horizontalMargin;\r\n        }\r\n\r\n        if (this.props.debugTouchArea === true) {\r\n            touchOverflowStyle.backgroundColor = 'orange';\r\n            touchOverflowStyle.opacity = 0.5;\r\n        }\r\n\r\n        return touchOverflowStyle;\r\n    };\r\n\r\n    _thumbHitTest = (e: Object) => {\r\n        const nativeEvent = e.nativeEvent;\r\n        const thumbTouchRect = this._getThumbTouchRect();\r\n        return thumbTouchRect.containsPoint(\r\n            nativeEvent.locationX,\r\n            nativeEvent.locationY,\r\n        );\r\n    };\r\n\r\n    _getThumbTouchRect = () => {\r\n        const state = this.state;\r\n        const props = this.props;\r\n        const touchOverflowSize = this._getTouchOverflowSize();\r\n\r\n        return new Rect(\r\n            touchOverflowSize.width / 2 +\r\n            this._getThumbLeft(this._getCurrentValue()) +\r\n            (state.thumbSize.width - props.thumbTouchSize.width) / 2,\r\n            touchOverflowSize.height / 2 +\r\n            (state.containerSize.height - props.thumbTouchSize.height) / 2,\r\n            props.thumbTouchSize.width,\r\n            props.thumbTouchSize.height,\r\n        );\r\n    };\r\n\r\n    _renderDebugThumbTouchRect = thumbLeft => {\r\n        const thumbTouchRect = this._getThumbTouchRect();\r\n        const positionStyle = {\r\n            left: thumbLeft,\r\n            top: thumbTouchRect.y,\r\n            width: thumbTouchRect.width,\r\n            height: thumbTouchRect.height,\r\n        };\r\n\r\n        return (\r\n            <Animated.View\r\n                style={[defaultStyles.debugThumbTouchArea, positionStyle]}\r\n                pointerEvents=\"none\"\r\n            />\r\n        );\r\n    };\r\n\r\n    _renderThumbImage = () => {\r\n        const { thumbImage } = this.props;\r\n\r\n        if (!thumbImage) return;\r\n\r\n        return <Image source={thumbImage} />;\r\n    };\r\n}\r\n\r\nvar defaultStyles = StyleSheet.create({\r\n    container: {\r\n        height: 40,\r\n        justifyContent: 'center',\r\n    },\r\n    track: {\r\n        height: TRACK_SIZE,\r\n        borderRadius: TRACK_SIZE / 2,\r\n    },\r\n    thumb: {\r\n        position: 'absolute',\r\n        width: THUMB_SIZE,\r\n        height: THUMB_SIZE,\r\n        borderRadius: THUMB_SIZE / 2,\r\n    },\r\n    touchArea: {\r\n        position: 'absolute',\r\n        backgroundColor: 'transparent',\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n    },\r\n    debugThumbTouchArea: {\r\n        position: 'absolute',\r\n        backgroundColor: 'green',\r\n        opacity: 0.5,\r\n    },\r\n});"]},"metadata":{},"sourceType":"module"}