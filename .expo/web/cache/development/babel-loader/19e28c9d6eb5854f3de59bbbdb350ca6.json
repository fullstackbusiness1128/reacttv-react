{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport React, { PureComponent } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  tabStyle: {\n    paddingVertical: 5,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#0076FF',\n    borderWidth: 1,\n    backgroundColor: 'white'\n  },\n  activeTabStyle: {\n    backgroundColor: '#0076FF'\n  },\n  tabTextStyle: {\n    color: '#0076FF'\n  },\n  activeTabTextStyle: {\n    color: 'white'\n  },\n  tabBadgeContainerStyle: {\n    borderRadius: 20,\n    backgroundColor: 'red',\n    paddingLeft: 5,\n    paddingRight: 5,\n    marginLeft: 5,\n    marginBottom: 3\n  },\n  activeTabBadgeContainerStyle: {\n    backgroundColor: 'white'\n  },\n  tabBadgeStyle: {\n    color: 'white',\n    fontSize: 11,\n    fontWeight: 'bold'\n  },\n  activeTabBadgeStyle: {\n    color: 'black'\n  }\n});\n\nvar TabOption = function (_PureComponent) {\n  _inherits(TabOption, _PureComponent);\n\n  function TabOption() {\n    _classCallCheck(this, TabOption);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TabOption).apply(this, arguments));\n  }\n\n  _createClass(TabOption, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          isTabActive = _this$props.isTabActive,\n          index = _this$props.index,\n          badge = _this$props.badge,\n          text = _this$props.text,\n          firstTabStyle = _this$props.firstTabStyle,\n          lastTabStyle = _this$props.lastTabStyle,\n          tabStyle = _this$props.tabStyle,\n          activeTabStyle = _this$props.activeTabStyle,\n          tabTextStyle = _this$props.tabTextStyle,\n          activeTabTextStyle = _this$props.activeTabTextStyle,\n          tabBadgeContainerStyle = _this$props.tabBadgeContainerStyle,\n          activeTabBadgeContainerStyle = _this$props.activeTabBadgeContainerStyle,\n          tabBadgeStyle = _this$props.tabBadgeStyle,\n          activeTabBadgeStyle = _this$props.activeTabBadgeStyle,\n          onTabPress = _this$props.onTabPress,\n          textNumberOfLines = _this$props.textNumberOfLines,\n          allowFontScaling = _this$props.allowFontScaling,\n          accessible = _this$props.accessible,\n          activeTabOpacity = _this$props.activeTabOpacity,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          testID = _this$props.testID,\n          enabled = _this$props.enabled;\n      return _jsx(TouchableOpacity, {\n        style: [styles.tabStyle, tabStyle, isTabActive ? [styles.activeTabStyle, activeTabStyle] : {}, firstTabStyle, lastTabStyle],\n        accessible: accessible,\n        testID: testID,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: isTabActive ? 'selected' : 'button',\n        accessibilityComponentType: \"button\",\n        onPress: function onPress() {\n          return onTabPress(index);\n        },\n        disabled: !enabled,\n        activeOpacity: activeTabOpacity,\n        children: _jsxs(View, {\n          style: {\n            flexDirection: 'row'\n          },\n          children: [_jsx(Text, {\n            style: [styles.tabTextStyle, tabTextStyle, isTabActive ? [styles.activeTabTextStyle, activeTabTextStyle] : {}],\n            numberOfLines: textNumberOfLines,\n            allowFontScaling: allowFontScaling,\n            ellipsizeMode: \"tail\",\n            children: text\n          }), Boolean(badge) && _jsx(View, {\n            style: [styles.tabBadgeContainerStyle, tabBadgeContainerStyle, isTabActive ? [styles.activeTabBadgeContainerStyle, activeTabBadgeContainerStyle] : {}],\n            children: _jsx(Text, {\n              style: [styles.tabBadgeStyle, tabBadgeStyle, isTabActive ? [styles.activeTabBadgeStyle, activeTabBadgeStyle] : {}],\n              allowFontScaling: allowFontScaling,\n              children: badge\n            })\n          })]\n        })\n      });\n    }\n  }]);\n\n  return TabOption;\n}(PureComponent);\n\nTabOption.defaultProps = {\n  isTabActive: false,\n  index: 0,\n  badge: '',\n  firstTabStyle: {},\n  lastTabStyle: {},\n  tabStyle: {},\n  activeTabStyle: {},\n  tabTextStyle: {},\n  activeTabTextStyle: {},\n  tabBadgeContainerStyle: {},\n  activeTabBadgeContainerStyle: {},\n  tabBadgeStyle: {},\n  activeTabBadgeStyle: {},\n  textNumberOfLines: 1,\n  allowFontScaling: false,\n  accessible: true,\n  activeTabOpacity: 1,\n  accessibilityLabel: '',\n  testID: '',\n  enabled: false,\n  onTabPress: function onTabPress() {}\n};\nexport { TabOption as default };","map":{"version":3,"sources":["E:/chrisholloway/flicknplayreacttv/node_modules/react-native-segmented-control-tab/src/TabOption.js"],"names":["React","PureComponent","styles","StyleSheet","create","tabStyle","paddingVertical","flex","justifyContent","alignItems","borderColor","borderWidth","backgroundColor","activeTabStyle","tabTextStyle","color","activeTabTextStyle","tabBadgeContainerStyle","borderRadius","paddingLeft","paddingRight","marginLeft","marginBottom","activeTabBadgeContainerStyle","tabBadgeStyle","fontSize","fontWeight","activeTabBadgeStyle","TabOption","props","isTabActive","index","badge","text","firstTabStyle","lastTabStyle","onTabPress","textNumberOfLines","allowFontScaling","accessible","activeTabOpacity","accessibilityLabel","testID","enabled","flexDirection","Boolean","defaultProps"],"mappings":"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","sourcesContent":["/* @flow */\r\n\r\nimport React, { PureComponent } from 'react'\r\nimport {\r\n  View,\r\n  TouchableOpacity,\r\n  StyleSheet,\r\n  Text,\r\n} from 'react-native'\r\n\r\n\r\nimport type {\r\n  ViewStyleProp,\r\n  TextStyleProp,\r\n} from 'react-native/Libraries/StyleSheet/StyleSheet'\r\n\r\ntype Props = {\r\n  isTabActive?: boolean,\r\n  index?: number,\r\n  badge?: any,\r\n  text: string,\r\n  firstTabStyle?: ViewStyleProp,\r\n  lastTabStyle?: ViewStyleProp,\r\n  tabStyle?: ViewStyleProp,\r\n  activeTabStyle?: ViewStyleProp,\r\n  tabTextStyle?: TextStyleProp,\r\n  activeTabTextStyle?: TextStyleProp,\r\n  tabBadgeContainerStyle?: TextStyleProp,\r\n  activeTabBadgeContainerStyle?: TextStyleProp,\r\n  tabBadgeStyle?: TextStyleProp,\r\n  activeTabBadgeStyle?: TextStyleProp,\r\n  onTabPress: Function,\r\n  textNumberOfLines?: number,\r\n  allowFontScaling?: boolean,\r\n  accessible?: boolean,\r\n  activeTabOpacity?: number,\r\n  accessibilityLabel?: string,\r\n  testID?: string;\r\n  enabled?: boolean,\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  tabStyle: {\r\n    paddingVertical: 5,\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    borderColor: '#0076FF',\r\n    borderWidth: 1,\r\n    backgroundColor: 'white',\r\n  },\r\n  activeTabStyle: {\r\n    backgroundColor: '#0076FF',\r\n  },\r\n  tabTextStyle: {\r\n    color: '#0076FF',\r\n  },\r\n  activeTabTextStyle: {\r\n    color: 'white',\r\n  },\r\n  tabBadgeContainerStyle: {\r\n    borderRadius: 20,\r\n    backgroundColor: 'red',\r\n    paddingLeft: 5,\r\n    paddingRight: 5,\r\n    marginLeft: 5,\r\n    marginBottom: 3,\r\n  },\r\n  activeTabBadgeContainerStyle: {\r\n    backgroundColor: 'white',\r\n  },\r\n  tabBadgeStyle: {\r\n    color: 'white',\r\n    fontSize: 11,\r\n    fontWeight: 'bold',\r\n  },\r\n  activeTabBadgeStyle: {\r\n    color: 'black',\r\n  },\r\n})\r\n\r\nexport default class TabOption extends PureComponent<Props> {\r\n  static defaultProps = {\r\n    isTabActive: false,\r\n    index: 0,\r\n    badge: '',\r\n    firstTabStyle: {},\r\n    lastTabStyle: {},\r\n    tabStyle: {},\r\n    activeTabStyle: {},\r\n    tabTextStyle: {},\r\n    activeTabTextStyle: {},\r\n    tabBadgeContainerStyle: {},\r\n    activeTabBadgeContainerStyle: {},\r\n    tabBadgeStyle: {},\r\n    activeTabBadgeStyle: {},\r\n    textNumberOfLines: 1,\r\n    allowFontScaling: false,\r\n    accessible: true,\r\n    activeTabOpacity: 1,\r\n    accessibilityLabel: '',\r\n    testID: '',\r\n    enabled: false,\r\n    onTabPress: () => {},\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      isTabActive,\r\n      index,\r\n      badge,\r\n      text,\r\n      firstTabStyle,\r\n      lastTabStyle,\r\n      tabStyle,\r\n      activeTabStyle,\r\n      tabTextStyle,\r\n      activeTabTextStyle,\r\n      tabBadgeContainerStyle,\r\n      activeTabBadgeContainerStyle,\r\n      tabBadgeStyle,\r\n      activeTabBadgeStyle,\r\n      onTabPress,\r\n      textNumberOfLines,\r\n      allowFontScaling,\r\n      accessible,\r\n      activeTabOpacity,\r\n      accessibilityLabel,\r\n      testID,\r\n      enabled,\r\n    } = this.props\r\n    return (\r\n      <TouchableOpacity\r\n        style={[\r\n          styles.tabStyle,\r\n          tabStyle,\r\n          isTabActive ? [styles.activeTabStyle, activeTabStyle] : {},\r\n          firstTabStyle,\r\n          lastTabStyle,\r\n        ]}\r\n        accessible={accessible}\r\n        testID={testID}\r\n        accessibilityLabel={accessibilityLabel}\r\n        accessibilityTraits={isTabActive ? 'selected' : 'button'}\r\n        accessibilityComponentType=\"button\"\r\n        onPress={() => onTabPress(index)}\r\n        disabled={!enabled}\r\n        activeOpacity={activeTabOpacity}\r\n      >\r\n        <View style={{ flexDirection: 'row' }}>\r\n          <Text\r\n            style={[\r\n              styles.tabTextStyle,\r\n              tabTextStyle,\r\n              isTabActive\r\n                ? [styles.activeTabTextStyle, activeTabTextStyle]\r\n                : {},\r\n            ]}\r\n            numberOfLines={textNumberOfLines}\r\n            allowFontScaling={allowFontScaling}\r\n            ellipsizeMode=\"tail\"\r\n          >\r\n            {text}\r\n          </Text>\r\n          {Boolean(badge) && (\r\n            <View\r\n              style={[\r\n                styles.tabBadgeContainerStyle,\r\n                tabBadgeContainerStyle,\r\n                isTabActive\r\n                  ? [\r\n                    styles.activeTabBadgeContainerStyle,\r\n                    activeTabBadgeContainerStyle,\r\n                  ]\r\n                  : {},\r\n              ]}\r\n            >\r\n              <Text\r\n                style={[\r\n                  styles.tabBadgeStyle,\r\n                  tabBadgeStyle,\r\n                  isTabActive\r\n                    ? [styles.activeTabBadgeStyle, activeTabBadgeStyle]\r\n                    : {},\r\n                ]}\r\n                allowFontScaling={allowFontScaling}\r\n              >\r\n                {badge}\r\n              </Text>\r\n            </View>\r\n          )}\r\n        </View>\r\n      </TouchableOpacity>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}