{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SceneView } from '@react-navigation/core';\nvar FAR_FAR_AWAY = 3000;\n\nvar ResourceSavingSceneView = function (_React$PureComponent) {\n  _inherits(ResourceSavingSceneView, _React$PureComponent);\n\n  _createClass(ResourceSavingSceneView, null, [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.isFocused && !prevState.awake) {\n        return {\n          awake: true\n        };\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  function ResourceSavingSceneView(props) {\n    var _this;\n\n    _classCallCheck(this, ResourceSavingSceneView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResourceSavingSceneView).call(this));\n\n    _defineProperty(_assertThisInitialized(_this), \"_mustAlwaysBeVisible\", function () {\n      return _this.props.animationEnabled || _this.props.swipeEnabled;\n    });\n\n    _this.state = {\n      awake: props.lazy ? props.isFocused : true\n    };\n    return _this;\n  }\n\n  _createClass(ResourceSavingSceneView, [{\n    key: \"render\",\n    value: function render() {\n      var awake = this.state.awake;\n\n      var _this$props = this.props,\n          isFocused = _this$props.isFocused,\n          childNavigation = _this$props.childNavigation,\n          removeClippedSubviews = _this$props.removeClippedSubviews,\n          rest = _objectWithoutProperties(_this$props, [\"isFocused\", \"childNavigation\", \"removeClippedSubviews\"]);\n\n      return React.createElement(View, {\n        style: styles.container,\n        collapsable: false,\n        removeClippedSubviews: Platform.OS === 'android' ? removeClippedSubviews : !isFocused && removeClippedSubviews\n      }, React.createElement(View, {\n        style: this._mustAlwaysBeVisible() || isFocused ? styles.innerAttached : styles.innerDetached\n      }, awake ? React.createElement(SceneView, _extends({}, rest, {\n        navigation: childNavigation\n      })) : null));\n    }\n  }]);\n\n  return ResourceSavingSceneView;\n}(React.PureComponent);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  innerAttached: {\n    flex: 1\n  },\n  innerDetached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});\nexport default ResourceSavingSceneView;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAEA,SAASC,SAAT,QAA0B,wBAA1B;AAEA,IAAMC,YAAY,GAAG,IAArB;;IAEMC,uB;;;;;6CAC4BC,S,EAAWC,S,EAAW;MACpD,IAAID,SAAS,CAACE,SAAVF,IAAuB,CAACC,SAAS,CAACE,KAAtC,EAA6C;QAC3C,OAAO;UAAEA,KAAK,EAAE;QAAT,CAAP;MADF,OAEO;QACL,OAAO,IAAP;MACD;IACF;;;EAEDC,iCAAYC,KAAZD,EAAmB;IAAA;;IAAA;;IACjB;;IADiBE,uEAQI,YAAM;MAC3B,OAAO,MAAKD,KAAL,CAAWE,gBAAX,IAA+B,MAAKF,KAAL,CAAWG,YAAjD;IATiB;;IAGjB,MAAKC,KAAL,GAAa;MACXN,KAAK,EAAEE,KAAK,CAACK,IAANL,GAAaA,KAAK,CAACH,SAAnBG,GAA+B;IAD3B,CAAb;IAHiB;EAMlB;;;;6BAMQ;MAAA,IACCF,KADD,GACW,KAAKM,KADhB,CACCN,KADD;;MAAA,kBAOH,KAAKE,KAPF;MAAA,IAGLH,SAHK,eAGLA,SAHK;MAAA,IAILS,eAJK,eAILA,eAJK;MAAA,IAKLC,qBALK,eAKLA,qBALK;MAAA,IAMFC,IANE;;MASP,OACEjB,oBAACkB,IAAD;QACEC,KAAK,EAAEC,MAAM,CAACC,SADhB;QAEEC,WAAW,EAAE,KAFf;QAGEN,qBAAqB,EACnBO,QAAQ,CAACC,EAATD,KAAgB,SAAhBA,GACIP,qBADJO,GAEI,CAACjB,SAAD,IAAcU;MANtB,GASEhB,oBAACkB,IAAD;QACEC,KAAK,EACH,KAAKM,oBAAL,MAA+BnB,SAA/B,GACIc,MAAM,CAACM,aADX,GAEIN,MAAM,CAACO;MAJf,GAOGpB,KAAK,GAAGP,oBAACC,SAAD,eAAegB,IAAf;QAAqBW,UAAU,EAAEb;MAAjC,GAAH,GAA0D,IAPlE,CATF,CADF;IAqBD;;;;EAnDmCf,KAAK,CAAC6B,a;;AAsD5C,IAAMT,MAAM,GAAGU,UAAU,CAACC,MAAXD,CAAkB;EAC/BT,SAAS,EAAE;IACTW,IAAI,EAAE,CADG;IAETC,QAAQ,EAAE;EAFD,CADoB;EAK/BP,aAAa,EAAE;IACbM,IAAI,EAAE;EADO,CALgB;EAQ/BL,aAAa,EAAE;IACbK,IAAI,EAAE,CADO;IAEbE,GAAG,EAAEhC;EAFQ;AARgB,CAAlB4B,CAAf;AAcA,eAAe3B,uBAAf","names":["React","SceneView","FAR_FAR_AWAY","ResourceSavingSceneView","nextProps","prevState","isFocused","awake","constructor","props","_defineProperty","animationEnabled","swipeEnabled","state","lazy","childNavigation","removeClippedSubviews","rest","View","style","styles","container","collapsable","Platform","OS","_mustAlwaysBeVisible","innerAttached","innerDetached","navigation","PureComponent","StyleSheet","create","flex","overflow","top"],"sources":["ResourceSavingSceneView.js"],"sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport { SceneView } from '@react-navigation/core';\n\nconst FAR_FAR_AWAY = 3000; // this should be big enough to move the whole view out of its container\n\nclass ResourceSavingSceneView extends React.PureComponent {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.isFocused && !prevState.awake) {\n      return { awake: true };\n    } else {\n      return null;\n    }\n  }\n\n  constructor(props) {\n    super();\n\n    this.state = {\n      awake: props.lazy ? props.isFocused : true,\n    };\n  }\n\n  _mustAlwaysBeVisible = () => {\n    return this.props.animationEnabled || this.props.swipeEnabled;\n  };\n\n  render() {\n    const { awake } = this.state;\n    const {\n      isFocused,\n      childNavigation,\n      removeClippedSubviews,\n      ...rest\n    } = this.props;\n\n    return (\n      <View\n        style={styles.container}\n        collapsable={false}\n        removeClippedSubviews={\n          Platform.OS === 'android'\n            ? removeClippedSubviews\n            : !isFocused && removeClippedSubviews\n        }\n      >\n        <View\n          style={\n            this._mustAlwaysBeVisible() || isFocused\n              ? styles.innerAttached\n              : styles.innerDetached\n          }\n        >\n          {awake ? <SceneView {...rest} navigation={childNavigation} /> : null}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  innerAttached: {\n    flex: 1,\n  },\n  innerDetached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n\nexport default ResourceSavingSceneView;\n"]},"metadata":{},"sourceType":"module"}