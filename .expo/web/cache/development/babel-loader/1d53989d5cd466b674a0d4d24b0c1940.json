{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport PropTypes from 'prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Switch = function (_Component) {\n  _inherits(Switch, _Component);\n\n  function Switch(props, context) {\n    var _this;\n\n    _classCallCheck(this, Switch);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Switch).call(this, props, context));\n\n    _this.handleSwitch = function () {\n      var value = _this.state.value;\n      var _this$props = _this.props,\n          onValueChange = _this$props.onValueChange,\n          disabled = _this$props.disabled,\n          changeValueImmediately = _this$props.changeValueImmediately,\n          propValue = _this$props.value;\n\n      if (disabled) {\n        return;\n      }\n\n      if (_this.props.value === _this.state.value) {\n        onValueChange(!_this.state.value);\n        return;\n      }\n\n      if (changeValueImmediately) {\n        _this.animateSwitch(!propValue);\n\n        onValueChange(!propValue);\n      } else {\n        _this.animateSwitch(!value, function () {\n          return _this.setState({\n            value: !value\n          }, function () {\n            return onValueChange(_this.state.value);\n          });\n        });\n      }\n    };\n\n    _this.animateSwitch = function (value) {\n      var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n      Animated.parallel([Animated.spring(_this.state.transformSwitch, {\n        toValue: value ? _this.props.circleSize / _this.props.switchLeftPx : -_this.props.circleSize / _this.props.switchRightPx\n      }), Animated.timing(_this.state.backgroundColor, {\n        toValue: value ? 75 : -75,\n        duration: 200\n      }), Animated.timing(_this.state.circleColor, {\n        toValue: value ? 75 : -75,\n        duration: 200\n      }), Animated.timing(_this.state.circleBorderColor, {\n        toValue: value ? 75 : -75,\n        duration: 200\n      })]).start(cb);\n    };\n\n    _this.state = {\n      value: props.value,\n      transformSwitch: new Animated.Value(props.value ? props.circleSize / props.switchLeftPx : -props.circleSize / props.switchRightPx),\n      backgroundColor: new Animated.Value(props.value ? 75 : -75),\n      circleColor: new Animated.Value(props.value ? 75 : -75),\n      circleBorderColor: new Animated.Value(props.value ? 75 : -75)\n    };\n    return _this;\n  }\n\n  _createClass(Switch, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          value = _this$props2.value,\n          disabled = _this$props2.disabled;\n\n      if (prevProps.value === value) {\n        return;\n      }\n\n      if (prevProps.disabled && disabled === prevProps.disabled) {\n        return;\n      }\n\n      this.animateSwitch(value, function () {\n        return _this2.setState({\n          value: value\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          transformSwitch = _this$state.transformSwitch,\n          backgroundColor = _this$state.backgroundColor,\n          circleColor = _this$state.circleColor,\n          circleBorderColor = _this$state.circleBorderColor;\n\n      var _this$props3 = this.props,\n          backgroundActive = _this$props3.backgroundActive,\n          backgroundInactive = _this$props3.backgroundInactive,\n          circleActiveColor = _this$props3.circleActiveColor,\n          circleInActiveColor = _this$props3.circleInActiveColor,\n          activeText = _this$props3.activeText,\n          inActiveText = _this$props3.inActiveText,\n          circleSize = _this$props3.circleSize,\n          containerStyle = _this$props3.containerStyle,\n          activeTextStyle = _this$props3.activeTextStyle,\n          inactiveTextStyle = _this$props3.inactiveTextStyle,\n          barHeight = _this$props3.barHeight,\n          circleInactiveBorderColor = _this$props3.circleInactiveBorderColor,\n          circleActiveBorderColor = _this$props3.circleActiveBorderColor,\n          circleBorderWidth = _this$props3.circleBorderWidth,\n          innerCircleStyle = _this$props3.innerCircleStyle,\n          outerCircleStyle = _this$props3.outerCircleStyle,\n          renderActiveText = _this$props3.renderActiveText,\n          renderInActiveText = _this$props3.renderInActiveText,\n          renderInsideCircle = _this$props3.renderInsideCircle,\n          switchWidthMultiplier = _this$props3.switchWidthMultiplier,\n          switchBorderRadius = _this$props3.switchBorderRadius,\n          value = _this$props3.value,\n          restProps = _objectWithoutProperties(_this$props3, [\"backgroundActive\", \"backgroundInactive\", \"circleActiveColor\", \"circleInActiveColor\", \"activeText\", \"inActiveText\", \"circleSize\", \"containerStyle\", \"activeTextStyle\", \"inactiveTextStyle\", \"barHeight\", \"circleInactiveBorderColor\", \"circleActiveBorderColor\", \"circleBorderWidth\", \"innerCircleStyle\", \"outerCircleStyle\", \"renderActiveText\", \"renderInActiveText\", \"renderInsideCircle\", \"switchWidthMultiplier\", \"switchBorderRadius\", \"value\"]);\n\n      var interpolatedColorAnimation = backgroundColor.interpolate({\n        inputRange: [-75, 75],\n        outputRange: [backgroundInactive, backgroundActive]\n      });\n      var interpolatedCircleColor = circleColor.interpolate({\n        inputRange: [-75, 75],\n        outputRange: [circleInActiveColor, circleActiveColor]\n      });\n      var interpolatedCircleBorderColor = circleBorderColor.interpolate({\n        inputRange: [-75, 75],\n        outputRange: [circleInactiveBorderColor, circleActiveBorderColor]\n      });\n      return _jsx(TouchableWithoutFeedback, _objectSpread({\n        onPress: this.handleSwitch\n      }, restProps, {\n        children: _jsx(Animated.View, {\n          style: [styles.container, containerStyle, {\n            backgroundColor: interpolatedColorAnimation,\n            width: circleSize * switchWidthMultiplier,\n            height: barHeight || circleSize,\n            borderRadius: switchBorderRadius || circleSize\n          }],\n          children: _jsxs(Animated.View, {\n            style: [styles.animatedContainer, {\n              left: transformSwitch,\n              width: circleSize * switchWidthMultiplier\n            }, outerCircleStyle],\n            children: [value && renderActiveText && _jsx(Text, {\n              style: [styles.paddingRight, activeTextStyle],\n              children: activeText\n            }), _jsx(Animated.View, {\n              style: [styles.circle, {\n                borderWidth: circleBorderWidth,\n                borderColor: interpolatedCircleBorderColor,\n                backgroundColor: interpolatedCircleColor,\n                width: circleSize,\n                height: circleSize,\n                borderRadius: circleSize / 2\n              }, innerCircleStyle],\n              children: renderInsideCircle()\n            }), !value && renderInActiveText && _jsx(Text, {\n              style: [styles.text, styles.paddingLeft, inactiveTextStyle],\n              children: inActiveText\n            })]\n          })\n        })\n      }));\n    }\n  }]);\n\n  return Switch;\n}(Component);\n\nSwitch.propTypes = {\n  onValueChange: PropTypes.func,\n  disabled: PropTypes.bool,\n  activeText: PropTypes.string,\n  inActiveText: PropTypes.string,\n  backgroundActive: PropTypes.string,\n  backgroundInactive: PropTypes.string,\n  value: PropTypes.bool,\n  circleActiveColor: PropTypes.string,\n  circleInActiveColor: PropTypes.string,\n  circleSize: PropTypes.number,\n  circleBorderActiveColor: PropTypes.string,\n  circleBorderInactiveColor: PropTypes.string,\n  activeTextStyle: PropTypes.object,\n  inactiveTextStyle: PropTypes.object,\n  containerStyle: PropTypes.object,\n  barHeight: PropTypes.number,\n  circleBorderWidth: PropTypes.number,\n  innerCircleStyle: PropTypes.object,\n  renderInsideCircle: PropTypes.func,\n  changeValueImmediately: PropTypes.bool,\n  innerCircleStyle: PropTypes.object,\n  outerCircleStyle: PropTypes.object,\n  renderActiveText: PropTypes.bool,\n  renderInActiveText: PropTypes.bool,\n  switchLeftPx: PropTypes.number,\n  switchRightPx: PropTypes.number,\n  switchWidthMultiplier: PropTypes.number,\n  switchBorderRadius: PropTypes.number\n};\nSwitch.defaultProps = {\n  value: false,\n  onValueChange: function onValueChange() {\n    return null;\n  },\n  renderInsideCircle: function renderInsideCircle() {\n    return null;\n  },\n  disabled: false,\n  activeText: '',\n  inActiveText: '',\n  backgroundActive: 'green',\n  backgroundInactive: 'gray',\n  circleActiveColor: 'white',\n  circleInActiveColor: 'white',\n  circleBorderActiveColor: 'rgb(100, 100, 100)',\n  circleBorderInactiveColor: 'rgb(80, 80, 80)',\n  circleSize: 25,\n  barHeight: 15,\n  backgroundActive: 'rgba(60, 179, 113, 0.2)',\n  backgroundInactive: 'rgb(254,205,210)',\n  circleActiveColor: 'rgb(60, 179, 113)',\n  circleInActiveColor: 'rgb(244,66,55)',\n  circleBorderActiveColor: 'rgb(100, 100, 100)',\n  circleBorderInactiveColor: 'rgb(80, 80, 80)',\n  circleSize: 18,\n  barHeight: 10,\n  circleBorderWidth: 0,\n  changeValueImmediately: true,\n  innerCircleStyle: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  outerCircleStyle: {},\n  renderActiveText: true,\n  renderInActiveText: true,\n  switchLeftPx: 2,\n  switchRightPx: 2,\n  switchWidthMultiplier: 2.3,\n  switchBorderRadius: null,\n  testID: null\n};\nexport { Switch as default };\nvar styles = StyleSheet.create({\n  container: {\n    width: 71,\n    height: 30,\n    borderRadius: 30,\n    backgroundColor: 'black'\n  },\n  animatedContainer: {\n    flex: 1,\n    width: 78,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  circle: {\n    width: 30,\n    height: 30,\n    borderRadius: 15,\n    backgroundColor: 'white'\n  },\n  text: {\n    color: 'white',\n    backgroundColor: 'transparent'\n  },\n  paddingRight: {\n    paddingRight: 5\n  },\n  paddingLeft: {\n    paddingLeft: 5\n  }\n});","map":{"version":3,"sources":["/home/codenomad/Documents/flicknplayreacttv/node_modules/react-native-video-players/src/VideoPlayerComponents/components/Switch.js"],"names":["React","Component","ViewPropTypes","PropTypes","Switch","props","context","handleSwitch","value","state","onValueChange","disabled","changeValueImmediately","propValue","animateSwitch","setState","cb","Animated","parallel","spring","transformSwitch","toValue","circleSize","switchLeftPx","switchRightPx","timing","backgroundColor","duration","circleColor","circleBorderColor","start","Value","prevProps","backgroundActive","backgroundInactive","circleActiveColor","circleInActiveColor","activeText","inActiveText","containerStyle","activeTextStyle","inactiveTextStyle","barHeight","circleInactiveBorderColor","circleActiveBorderColor","circleBorderWidth","innerCircleStyle","outerCircleStyle","renderActiveText","renderInActiveText","renderInsideCircle","switchWidthMultiplier","switchBorderRadius","restProps","interpolatedColorAnimation","interpolate","inputRange","outputRange","interpolatedCircleColor","interpolatedCircleBorderColor","styles","container","width","height","borderRadius","animatedContainer","left","paddingRight","circle","borderWidth","borderColor","text","paddingLeft","propTypes","func","bool","string","number","circleBorderActiveColor","circleBorderInactiveColor","object","defaultProps","alignItems","justifyContent","testID","StyleSheet","create","flex","flexDirection","color"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  Animated,\r\n  PanResponder,\r\n  TouchableWithoutFeedback,\r\n  ViewPropTypes,\r\n} from 'react-native';\r\nimport PropTypes from 'prop-types';\r\nexport default class Switch extends Component {\r\n  static propTypes = {\r\n    onValueChange: PropTypes.func,\r\n    disabled: PropTypes.bool,\r\n    activeText: PropTypes.string,\r\n    inActiveText: PropTypes.string,\r\n    backgroundActive: PropTypes.string,\r\n    backgroundInactive: PropTypes.string,\r\n    value: PropTypes.bool,\r\n    circleActiveColor: PropTypes.string,\r\n    circleInActiveColor: PropTypes.string,\r\n    circleSize: PropTypes.number,\r\n    circleBorderActiveColor: PropTypes.string,\r\n    circleBorderInactiveColor: PropTypes.string,\r\n    activeTextStyle: PropTypes.object,\r\n    inactiveTextStyle: PropTypes.object,\r\n    containerStyle: PropTypes.object,\r\n    barHeight: PropTypes.number,\r\n    circleBorderWidth: PropTypes.number,\r\n    innerCircleStyle: PropTypes.object,\r\n    renderInsideCircle: PropTypes.func,\r\n    changeValueImmediately: PropTypes.bool,\r\n    innerCircleStyle: PropTypes.object,\r\n    outerCircleStyle: PropTypes.object,\r\n    renderActiveText: PropTypes.bool,\r\n    renderInActiveText: PropTypes.bool,\r\n    switchLeftPx: PropTypes.number,\r\n    switchRightPx: PropTypes.number,\r\n    switchWidthMultiplier: PropTypes.number,\r\n    switchBorderRadius: PropTypes.number,\r\n  };\r\n\r\n  static defaultProps = {\r\n    value: false,\r\n    onValueChange: () => null,\r\n    renderInsideCircle: () => null,\r\n    // innerCircleStyle: {},\r\n    disabled: false,\r\n    activeText: '',\r\n    inActiveText: '',\r\n    backgroundActive: 'green',\r\n    backgroundInactive: 'gray',\r\n    circleActiveColor: 'white',\r\n    circleInActiveColor: 'white',\r\n    circleBorderActiveColor: 'rgb(100, 100, 100)',\r\n    circleBorderInactiveColor: 'rgb(80, 80, 80)',\r\n    circleSize: 25,\r\n    barHeight: 15,\r\n    backgroundActive: 'rgba(60, 179, 113, 0.2)',\r\n    backgroundInactive: 'rgb(254,205,210)',\r\n    circleActiveColor: 'rgb(60, 179, 113)',\r\n    circleInActiveColor: 'rgb(244,66,55)',\r\n    circleBorderActiveColor: 'rgb(100, 100, 100)',\r\n    circleBorderInactiveColor: 'rgb(80, 80, 80)',\r\n    circleSize: 18,\r\n    barHeight: 10,\r\n    circleBorderWidth: 0,\r\n    changeValueImmediately: true,\r\n    innerCircleStyle: {alignItems: 'center', justifyContent: 'center'},\r\n    outerCircleStyle: {},\r\n    renderActiveText: true,\r\n    renderInActiveText: true,\r\n    switchLeftPx: 2,\r\n    switchRightPx: 2,\r\n    switchWidthMultiplier: 2.3,\r\n    switchBorderRadius: null,\r\n    testID: null,\r\n  };\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.state = {\r\n      value: props.value,\r\n      transformSwitch: new Animated.Value(\r\n        props.value\r\n          ? props.circleSize / props.switchLeftPx\r\n          : -props.circleSize / props.switchRightPx,\r\n      ),\r\n      backgroundColor: new Animated.Value(props.value ? 75 : -75),\r\n      circleColor: new Animated.Value(props.value ? 75 : -75),\r\n      circleBorderColor: new Animated.Value(props.value ? 75 : -75),\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const {value, disabled} = this.props;\r\n    if (prevProps.value === value) {\r\n      return;\r\n    }\r\n    if (prevProps.disabled && disabled === prevProps.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.animateSwitch(value, () => this.setState({value}));\r\n  }\r\n\r\n  handleSwitch = () => {\r\n    const {value} = this.state;\r\n    const {\r\n      onValueChange,\r\n      disabled,\r\n      changeValueImmediately,\r\n      value: propValue,\r\n    } = this.props;\r\n    if (disabled) {\r\n      return;\r\n    }\r\n    if (this.props.value === this.state.value) {\r\n      onValueChange(!this.state.value);\r\n      return;\r\n    }\r\n\r\n    if (changeValueImmediately) {\r\n      this.animateSwitch(!propValue);\r\n      onValueChange(!propValue);\r\n    } else {\r\n      this.animateSwitch(!value, () =>\r\n        this.setState({value: !value}, () => onValueChange(this.state.value)),\r\n      );\r\n    }\r\n  };\r\n\r\n  animateSwitch = (value, cb = () => {}) => {\r\n    Animated.parallel([\r\n      Animated.spring(this.state.transformSwitch, {\r\n        toValue: value\r\n          ? this.props.circleSize / this.props.switchLeftPx\r\n          : -this.props.circleSize / this.props.switchRightPx,\r\n      }),\r\n      Animated.timing(this.state.backgroundColor, {\r\n        toValue: value ? 75 : -75,\r\n        duration: 200,\r\n      }),\r\n      Animated.timing(this.state.circleColor, {\r\n        toValue: value ? 75 : -75,\r\n        duration: 200,\r\n      }),\r\n      Animated.timing(this.state.circleBorderColor, {\r\n        toValue: value ? 75 : -75,\r\n        duration: 200,\r\n      }),\r\n    ]).start(cb);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      transformSwitch,\r\n      backgroundColor,\r\n      circleColor,\r\n      circleBorderColor,\r\n    } = this.state;\r\n\r\n    const {\r\n      backgroundActive,\r\n      backgroundInactive,\r\n      circleActiveColor,\r\n      circleInActiveColor,\r\n      activeText,\r\n      inActiveText,\r\n      circleSize,\r\n      containerStyle,\r\n      activeTextStyle,\r\n      inactiveTextStyle,\r\n      barHeight,\r\n      circleInactiveBorderColor,\r\n      circleActiveBorderColor,\r\n      circleBorderWidth,\r\n      innerCircleStyle,\r\n      outerCircleStyle,\r\n      renderActiveText,\r\n      renderInActiveText,\r\n      renderInsideCircle,\r\n      switchWidthMultiplier,\r\n      switchBorderRadius,\r\n      value,\r\n      ...restProps\r\n    } = this.props;\r\n\r\n    const interpolatedColorAnimation = backgroundColor.interpolate({\r\n      inputRange: [-75, 75],\r\n      outputRange: [backgroundInactive, backgroundActive],\r\n    });\r\n\r\n    const interpolatedCircleColor = circleColor.interpolate({\r\n      inputRange: [-75, 75],\r\n      outputRange: [circleInActiveColor, circleActiveColor],\r\n    });\r\n\r\n    const interpolatedCircleBorderColor = circleBorderColor.interpolate({\r\n      inputRange: [-75, 75],\r\n      outputRange: [circleInactiveBorderColor, circleActiveBorderColor],\r\n    });\r\n\r\n    return (\r\n      <TouchableWithoutFeedback onPress={this.handleSwitch} {...restProps}>\r\n        <Animated.View\r\n          style={[\r\n            styles.container,\r\n            containerStyle,\r\n            {\r\n              backgroundColor: interpolatedColorAnimation,\r\n              width: circleSize * switchWidthMultiplier,\r\n              height: barHeight || circleSize,\r\n              borderRadius: switchBorderRadius || circleSize,\r\n            },\r\n          ]}>\r\n          <Animated.View\r\n            style={[\r\n              styles.animatedContainer,\r\n              {\r\n                left: transformSwitch,\r\n                width: circleSize * switchWidthMultiplier,\r\n              },\r\n              outerCircleStyle,\r\n            ]}>\r\n            {value && renderActiveText && (\r\n              <Text style={[ styles.paddingRight, activeTextStyle]}>\r\n                {activeText}\r\n              </Text>\r\n            )}\r\n\r\n            <Animated.View\r\n              style={[\r\n                styles.circle,\r\n                {\r\n                  borderWidth: circleBorderWidth,\r\n                  borderColor: interpolatedCircleBorderColor,\r\n                  backgroundColor: interpolatedCircleColor,\r\n                  width: circleSize,\r\n                  height: circleSize,\r\n                  borderRadius: circleSize / 2,\r\n                },\r\n                innerCircleStyle,\r\n              ]}>\r\n              {renderInsideCircle()}\r\n            </Animated.View>\r\n            {!value && renderInActiveText && (\r\n              <Text\r\n                style={[styles.text, styles.paddingLeft, inactiveTextStyle]}>\r\n                {inActiveText}\r\n              </Text>\r\n            )}\r\n          </Animated.View>\r\n        </Animated.View>\r\n      </TouchableWithoutFeedback>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: 71,\r\n    height: 30,\r\n    borderRadius: 30,\r\n    backgroundColor: 'black',\r\n  },\r\n  animatedContainer: {\r\n    flex: 1,\r\n    width: 78,\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  circle: {\r\n    width: 30,\r\n    height: 30,\r\n    borderRadius: 15,\r\n    backgroundColor: 'white',\r\n  },\r\n  text: {\r\n    color: 'white',\r\n    backgroundColor: 'transparent',\r\n  },\r\n  paddingRight: {\r\n    paddingRight: 5,\r\n  },\r\n  paddingLeft: {\r\n    paddingLeft: 5,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}