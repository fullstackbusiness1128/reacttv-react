{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SceneView, ThemeColors, ThemeContext } from 'react-navigation';\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\nimport * as DrawerActions from \"../routers/DrawerActions\";\nimport DrawerSidebar from \"./DrawerSidebar\";\nimport DrawerGestureContext from \"../utils/DrawerGestureContext\";\nimport ResourceSavingScene from \"./ResourceSavingScene\";\nimport Drawer from \"./Drawer\";\n\nvar DrawerView = function (_React$PureComponent) {\n  _inherits(DrawerView, _React$PureComponent);\n\n  function DrawerView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DrawerView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DrawerView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loaded: [_this.props.navigation.state.index],\n      drawerWidth: typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"context\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"drawerGestureRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"getLockMode\", function (_ref) {\n      var navigation = _ref.navigation,\n          descriptors = _ref.descriptors;\n      var activeKey = navigation.state.routes[navigation.state.index].key;\n      var drawerLockMode = descriptors[activeKey].options.drawerLockMode;\n      return drawerLockMode;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDrawerOpen\", function () {\n      var navigation = _this.props.navigation;\n      navigation.dispatch(DrawerActions.openDrawer({\n        key: navigation.state.key\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDrawerClose\", function () {\n      var navigation = _this.props.navigation;\n      navigation.dispatch(DrawerActions.closeDrawer({\n        key: navigation.state.key\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateWidth\", function () {\n      var drawerWidth = typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth;\n\n      if (_this.state.drawerWidth !== drawerWidth) {\n        _this.setState({\n          drawerWidth: drawerWidth\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderNavigationView\", function (_ref2) {\n      var progress = _ref2.progress;\n      return React.createElement(DrawerSidebar, _extends({\n        screenProps: _this.props.screenProps,\n        drawerOpenProgress: progress,\n        navigation: _this.props.navigation,\n        descriptors: _this.props.descriptors\n      }, _this.props.navigationConfig));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderContent\", function () {\n      var _this$props = _this.props,\n          lazy = _this$props.lazy,\n          navigation = _this$props.navigation,\n          _this$props$detachIna = _this$props.detachInactiveScreens,\n          detachInactiveScreens = _this$props$detachIna === void 0 ? true : _this$props$detachIna;\n      var loaded = _this.state.loaded;\n      var routes = navigation.state.routes;\n\n      if (_this.props.navigationConfig.unmountInactiveRoutes) {\n        var activeKey = navigation.state.routes[navigation.state.index].key;\n        var descriptor = _this.props.descriptors[activeKey];\n        return React.createElement(SceneView, {\n          navigation: descriptor.navigation,\n          screenProps: _this.props.screenProps,\n          component: descriptor.getComponent()\n        });\n      } else {\n        var enabled = (screensEnabled === null || screensEnabled === void 0 ? void 0 : screensEnabled()) && detachInactiveScreens;\n        return React.createElement(ScreenContainer, {\n          enabled: enabled,\n          style: styles.content\n        }, routes.map(function (route, index) {\n          if (lazy && !loaded.includes(index)) {\n            return null;\n          }\n\n          var isFocused = navigation.state.index === index;\n          var descriptor = _this.props.descriptors[route.key];\n          return React.createElement(ResourceSavingScene, {\n            key: route.key,\n            style: [StyleSheet.absoluteFill, {\n              opacity: isFocused ? 1 : 0\n            }],\n            isVisible: isFocused,\n            enabled: detachInactiveScreens\n          }, React.createElement(SceneView, {\n            navigation: descriptor.navigation,\n            screenProps: _this.props.screenProps,\n            component: descriptor.getComponent()\n          }));\n        }));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setDrawerGestureRef\", function (ref) {\n      _this.drawerGestureRef.current = ref;\n    });\n\n    return _this;\n  }\n\n  _createClass(DrawerView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.getLockMode(this.props) === 'locked-open') {\n        this.handleDrawerOpen();\n      }\n\n      Dimensions.addEventListener('change', this.updateWidth);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevLockMode = this.getLockMode(prevProps);\n      var nextLockMode = this.getLockMode(this.props);\n\n      if (prevLockMode !== nextLockMode) {\n        if (nextLockMode === 'locked-open') {\n          this.handleDrawerOpen();\n        } else {\n          this.handleDrawerClose();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.updateWidth);\n    }\n  }, {\n    key: \"getDrawerBackgroundColor\",\n    value: function getDrawerBackgroundColor() {\n      var drawerBackgroundColor = this.props.navigationConfig.drawerBackgroundColor;\n\n      if (drawerBackgroundColor) {\n        return typeof drawerBackgroundColor === 'string' ? drawerBackgroundColor : drawerBackgroundColor[this.context];\n      } else {\n        return ThemeColors[this.context].bodyContent;\n      }\n    }\n  }, {\n    key: \"getOverlayColor\",\n    value: function getOverlayColor() {\n      var overlayColor = this.props.navigationConfig.overlayColor;\n\n      if (overlayColor) {\n        return typeof overlayColor === 'string' ? overlayColor : overlayColor[this.context];\n      } else {\n        return 'rgba(0,0,0,0.5)';\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          navigation = _this$props2.navigation,\n          navigationConfig = _this$props2.navigationConfig;\n      var drawerType = navigationConfig.drawerType,\n          sceneContainerStyle = navigationConfig.sceneContainerStyle,\n          edgeWidth = navigationConfig.edgeWidth,\n          minSwipeDistance = navigationConfig.minSwipeDistance,\n          hideStatusBar = navigationConfig.hideStatusBar,\n          statusBarAnimation = navigationConfig.statusBarAnimation,\n          gestureHandlerProps = navigationConfig.gestureHandlerProps;\n      var drawerLockMode = this.getLockMode(this.props);\n      var drawerBackgroundColor = this.getDrawerBackgroundColor();\n      var overlayColor = this.getOverlayColor();\n      return React.createElement(DrawerGestureContext.Provider, {\n        value: this.drawerGestureRef\n      }, React.createElement(Drawer, {\n        open: navigation.state.isDrawerOpen,\n        gestureEnabled: drawerLockMode !== 'locked-open' && drawerLockMode !== 'locked-closed',\n        onOpen: this.handleDrawerOpen,\n        onClose: this.handleDrawerClose,\n        onGestureRef: this.setDrawerGestureRef,\n        gestureHandlerProps: gestureHandlerProps,\n        drawerType: drawerType,\n        drawerPosition: this.props.navigationConfig.drawerPosition,\n        sceneContainerStyle: sceneContainerStyle,\n        drawerStyle: {\n          backgroundColor: drawerBackgroundColor,\n          width: this.state.drawerWidth\n        },\n        overlayStyle: {\n          backgroundColor: overlayColor\n        },\n        swipeEdgeWidth: edgeWidth,\n        swipeDistanceThreshold: minSwipeDistance,\n        hideStatusBar: hideStatusBar,\n        statusBarAnimation: statusBarAnimation,\n        renderDrawerContent: this.renderNavigationView,\n        renderSceneContent: this.renderContent\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var index = nextProps.navigation.state.index;\n      return {\n        loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])\n      };\n    }\n  }]);\n\n  return DrawerView;\n}(React.PureComponent);\n\nexport { DrawerView as default };\n\n_defineProperty(DrawerView, \"contextType\", ThemeContext);\n\n_defineProperty(DrawerView, \"defaultProps\", {\n  lazy: true\n});\n\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","SceneView","ThemeColors","ThemeContext","ScreenContainer","screensEnabled","DrawerActions","DrawerSidebar","DrawerGestureContext","ResourceSavingScene","Drawer","DrawerView","args","_defineProperty","loaded","props","navigation","state","index","drawerWidth","navigationConfig","createRef","descriptors","activeKey","routes","key","drawerLockMode","options","dispatch","openDrawer","closeDrawer","setState","progress","screenProps","drawerOpenProgress","lazy","detachInactiveScreens","unmountInactiveRoutes","descriptor","component","getComponent","enabled","style","styles","content","map","route","includes","isFocused","StyleSheet","absoluteFill","opacity","isVisible","ref","drawerGestureRef","current","getLockMode","handleDrawerOpen","Dimensions","addEventListener","updateWidth","prevProps","prevLockMode","nextLockMode","handleDrawerClose","removeEventListener","drawerBackgroundColor","context","bodyContent","overlayColor","drawerType","sceneContainerStyle","edgeWidth","minSwipeDistance","hideStatusBar","statusBarAnimation","gestureHandlerProps","getDrawerBackgroundColor","getOverlayColor","Provider","value","open","isDrawerOpen","gestureEnabled","onOpen","onClose","onGestureRef","setDrawerGestureRef","drawerPosition","drawerStyle","backgroundColor","width","overlayStyle","swipeEdgeWidth","swipeDistanceThreshold","renderDrawerContent","renderNavigationView","renderSceneContent","renderContent","nextProps","prevState","PureComponent","create","flex"],"sources":["DrawerView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Dimensions, StyleSheet, ViewStyle } from 'react-native';\nimport {\n  SceneView,\n  ThemeColors,\n  ThemeContext,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\n\nimport * as DrawerActions from '../routers/DrawerActions';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Drawer from './Drawer';\nimport {\n  NavigationDrawerState,\n  DrawerContentComponentProps,\n  SceneDescriptorMap,\n} from '../types';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\n\ntype DrawerOptions = {\n  drawerBackgroundColor?: string;\n  overlayColor?: string;\n  minSwipeDistance?: number;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open';\n  keyboardDismissMode?: 'on-drag' | 'none';\n  drawerWidth: number | (() => number);\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  onDrawerClose?: () => void;\n  onDrawerOpen?: () => void;\n  sceneContainerStyle?: ViewStyle;\n  edgeWidth: number;\n  hideStatusBar?: boolean;\n  style?: ViewStyle;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\ntype Props = {\n  lazy: boolean;\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  navigationConfig: DrawerOptions & {\n    contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n    unmountInactiveRoutes?: boolean;\n    contentOptions?: object;\n  };\n  screenProps: unknown;\n  detachInactiveScreens: boolean;\n};\n\ntype State = {\n  loaded: number[];\n  drawerWidth: number;\n};\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent<Props, State> {\n  // eslint-disable-next-line react/sort-comp\n  static contextType = ThemeContext;\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state: State = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth:\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth,\n  };\n\n  componentDidMount() {\n    // If drawerLockMode was set to `locked-open`, we should open the drawer on mount\n    if (this.getLockMode(this.props) === 'locked-open') {\n      this.handleDrawerOpen();\n    }\n\n    Dimensions.addEventListener('change', this.updateWidth);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevLockMode = this.getLockMode(prevProps);\n    const nextLockMode = this.getLockMode(this.props);\n\n    if (prevLockMode !== nextLockMode) {\n      if (nextLockMode === 'locked-open') {\n        this.handleDrawerOpen();\n      } else {\n        this.handleDrawerClose();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this.updateWidth);\n  }\n\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private drawerGestureRef = React.createRef<PanGestureHandler>();\n\n  private getLockMode = ({ navigation, descriptors }: Props) => {\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = descriptors[activeKey].options;\n\n    return drawerLockMode;\n  };\n\n  private handleDrawerOpen = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.openDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private handleDrawerClose = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.closeDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private updateWidth = () => {\n    const drawerWidth =\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  private renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerSidebar\n        screenProps={this.props.screenProps}\n        drawerOpenProgress={progress}\n        navigation={this.props.navigation}\n        descriptors={this.props.descriptors}\n        {...this.props.navigationConfig}\n      />\n    );\n  };\n\n  private renderContent = () => {\n    let { lazy, navigation, detachInactiveScreens = true } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return (\n        <SceneView\n          navigation={descriptor.navigation}\n          screenProps={this.props.screenProps}\n          component={descriptor.getComponent()}\n        />\n      );\n    } else {\n      const enabled = screensEnabled?.() && detachInactiveScreens;\n\n      return (\n        // @ts-ignore\n        <ScreenContainer enabled={enabled} style={styles.content}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            let isFocused = navigation.state.index === index;\n            let descriptor = this.props.descriptors[route.key];\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={[\n                  StyleSheet.absoluteFill,\n                  { opacity: isFocused ? 1 : 0 },\n                ]}\n                isVisible={isFocused}\n                enabled={detachInactiveScreens}\n              >\n                <SceneView\n                  navigation={descriptor.navigation}\n                  screenProps={this.props.screenProps}\n                  component={descriptor.getComponent()}\n                />\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n      );\n    }\n  };\n\n  private setDrawerGestureRef = (ref: PanGestureHandler | null) => {\n    // @ts-ignore\n    this.drawerGestureRef.current = ref;\n  };\n\n  private getDrawerBackgroundColor() {\n    const { drawerBackgroundColor } = this.props.navigationConfig;\n\n    if (drawerBackgroundColor) {\n      return typeof drawerBackgroundColor === 'string'\n        ? drawerBackgroundColor\n        : drawerBackgroundColor[this.context];\n    } else {\n      return ThemeColors[this.context].bodyContent;\n    }\n  }\n\n  private getOverlayColor() {\n    const { overlayColor } = this.props.navigationConfig;\n\n    if (overlayColor) {\n      return typeof overlayColor === 'string'\n        ? overlayColor\n        : overlayColor[this.context];\n    } else {\n      return 'rgba(0,0,0,0.5)';\n    }\n  }\n\n  render() {\n    const { navigation, navigationConfig } = this.props;\n    const {\n      drawerType,\n      sceneContainerStyle,\n      edgeWidth,\n      minSwipeDistance,\n      hideStatusBar,\n      statusBarAnimation,\n      gestureHandlerProps,\n    } = navigationConfig;\n\n    const drawerLockMode = this.getLockMode(this.props);\n    const drawerBackgroundColor = this.getDrawerBackgroundColor();\n    const overlayColor = this.getOverlayColor();\n\n    return (\n      <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <Drawer\n          open={navigation.state.isDrawerOpen}\n          gestureEnabled={\n            drawerLockMode !== 'locked-open' &&\n            drawerLockMode !== 'locked-closed'\n          }\n          onOpen={this.handleDrawerOpen}\n          onClose={this.handleDrawerClose}\n          onGestureRef={this.setDrawerGestureRef}\n          gestureHandlerProps={gestureHandlerProps}\n          drawerType={drawerType}\n          drawerPosition={this.props.navigationConfig.drawerPosition}\n          sceneContainerStyle={sceneContainerStyle}\n          drawerStyle={{\n            backgroundColor: drawerBackgroundColor,\n            width: this.state.drawerWidth,\n          }}\n          overlayStyle={{ backgroundColor: overlayColor }}\n          swipeEdgeWidth={edgeWidth}\n          swipeDistanceThreshold={minSwipeDistance}\n          hideStatusBar={hideStatusBar}\n          statusBarAnimation={statusBarAnimation}\n          renderDrawerContent={this.renderNavigationView}\n          renderSceneContent={this.renderContent}\n        />\n      </DrawerGestureContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}