{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaView, ThemeContext } from 'react-navigation';\nimport TouchableItem from \"./TouchableItem\";\n\nvar DrawerNavigatorItems = function (_React$Component) {\n  _inherits(DrawerNavigatorItems, _React$Component);\n\n  function DrawerNavigatorItems() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DrawerNavigatorItems);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DrawerNavigatorItems)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"context\", void 0);\n\n    return _this;\n  }\n\n  _createClass(DrawerNavigatorItems, [{\n    key: \"getActiveTintColor\",\n    value: function getActiveTintColor() {\n      var activeTintColor = this.props.activeTintColor;\n\n      if (!activeTintColor) {\n        return;\n      } else if (typeof activeTintColor === 'string') {\n        return activeTintColor;\n      }\n\n      return activeTintColor[this.context];\n    }\n  }, {\n    key: \"getInactiveTintColor\",\n    value: function getInactiveTintColor() {\n      var inactiveTintColor = this.props.inactiveTintColor;\n\n      if (!inactiveTintColor) {\n        return;\n      } else if (typeof inactiveTintColor === 'string') {\n        return inactiveTintColor;\n      }\n\n      return inactiveTintColor[this.context];\n    }\n  }, {\n    key: \"getActiveBackgroundColor\",\n    value: function getActiveBackgroundColor() {\n      var activeBackgroundColor = this.props.activeBackgroundColor;\n\n      if (!activeBackgroundColor) {\n        return;\n      } else if (typeof activeBackgroundColor === 'string') {\n        return activeBackgroundColor;\n      }\n\n      return activeBackgroundColor[this.context];\n    }\n  }, {\n    key: \"getInactiveBackgroundColor\",\n    value: function getInactiveBackgroundColor() {\n      var inactiveBackgroundColor = this.props.inactiveBackgroundColor;\n\n      if (!inactiveBackgroundColor) {\n        return;\n      } else if (typeof inactiveBackgroundColor === 'string') {\n        return inactiveBackgroundColor;\n      }\n\n      return inactiveBackgroundColor[this.context];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          items = _this$props.items,\n          activeItemKey = _this$props.activeItemKey,\n          getLabel = _this$props.getLabel,\n          renderIcon = _this$props.renderIcon,\n          onItemPress = _this$props.onItemPress,\n          itemsContainerStyle = _this$props.itemsContainerStyle,\n          itemStyle = _this$props.itemStyle,\n          labelStyle = _this$props.labelStyle,\n          activeLabelStyle = _this$props.activeLabelStyle,\n          inactiveLabelStyle = _this$props.inactiveLabelStyle,\n          iconContainerStyle = _this$props.iconContainerStyle,\n          drawerPosition = _this$props.drawerPosition;\n      var activeTintColor = this.getActiveTintColor();\n      var activeBackgroundColor = this.getActiveBackgroundColor();\n      var inactiveTintColor = this.getInactiveTintColor();\n      var inactiveBackgroundColor = this.getInactiveBackgroundColor();\n      return React.createElement(View, {\n        style: [styles.container, itemsContainerStyle]\n      }, items.map(function (route, index) {\n        var _forceInset;\n\n        var focused = activeItemKey === route.key;\n        var color = focused ? activeTintColor : inactiveTintColor;\n        var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n        var scene = {\n          route: route,\n          index: index,\n          focused: focused,\n          tintColor: color\n        };\n        var icon = renderIcon(scene);\n        var label = getLabel(scene);\n        var accessibilityLabel = typeof label === 'string' ? label : undefined;\n        var extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n        return React.createElement(TouchableItem, {\n          key: route.key,\n          accessible: true,\n          accessibilityLabel: accessibilityLabel,\n          onPress: function onPress() {\n            onItemPress({\n              route: route,\n              focused: focused\n            });\n          },\n          delayPressIn: 0\n        }, React.createElement(SafeAreaView, {\n          style: [{\n            backgroundColor: backgroundColor\n          }, styles.item, itemStyle],\n          forceInset: (_forceInset = {}, _defineProperty2(_forceInset, drawerPosition, 'always'), _defineProperty2(_forceInset, drawerPosition === 'left' ? 'right' : 'left', 'never'), _defineProperty2(_forceInset, \"vertical\", 'never'), _forceInset)\n        }, icon ? React.createElement(View, {\n          style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle]\n        }, icon) : null, typeof label === 'string' ? React.createElement(Text, {\n          style: [styles.label, {\n            color: color\n          }, labelStyle, extraLabelStyle]\n        }, label) : label));\n      }));\n    }\n  }]);\n\n  return DrawerNavigatorItems;\n}(React.Component);\n\nexport { DrawerNavigatorItems as default };\n\n_defineProperty(DrawerNavigatorItems, \"defaultProps\", {\n  activeTintColor: {\n    light: '#2196f3',\n    dark: '#fff'\n  },\n  activeBackgroundColor: {\n    light: 'rgba(0, 0, 0, .04)',\n    dark: 'rgba(255, 255, 255, .04)'\n  },\n  inactiveTintColor: {\n    light: 'rgba(0, 0, 0, .87)',\n    dark: 'rgba(255, 255, 255, .87)'\n  },\n  inactiveBackgroundColor: {\n    light: 'transparent',\n    dark: 'transparent'\n  }\n});\n\n_defineProperty(DrawerNavigatorItems, \"contextType\", ThemeContext);\n\nvar styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"mappings":"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","names":["React","SafeAreaView","ThemeContext","TouchableItem","DrawerNavigatorItems","args","_defineProperty","activeTintColor","props","context","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","items","activeItemKey","getLabel","renderIcon","onItemPress","itemsContainerStyle","itemStyle","labelStyle","activeLabelStyle","inactiveLabelStyle","iconContainerStyle","drawerPosition","getActiveTintColor","getActiveBackgroundColor","getInactiveTintColor","getInactiveBackgroundColor","View","style","styles","container","map","route","index","focused","key","color","backgroundColor","scene","tintColor","icon","label","accessibilityLabel","undefined","extraLabelStyle","accessible","onPress","delayPressIn","item","forceInset","inactiveIcon","Text","Component","light","dark","StyleSheet","create","paddingVertical","flexDirection","alignItems","marginHorizontal","width","opacity","margin","fontWeight"],"sources":["DrawerNavigatorItems.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { SafeAreaView, ThemeContext } from 'react-navigation';\nimport TouchableItem from './TouchableItem';\nimport { DrawerNavigatorItemsProps } from '../types';\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default class DrawerNavigatorItems extends React.Component<\n  DrawerNavigatorItemsProps\n> {\n  /* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\n  static defaultProps = {\n    activeTintColor: {\n      light: '#2196f3',\n      dark: '#fff',\n    },\n    activeBackgroundColor: {\n      light: 'rgba(0, 0, 0, .04)',\n      dark: 'rgba(255, 255, 255, .04)',\n    },\n    inactiveTintColor: {\n      light: 'rgba(0, 0, 0, .87)',\n      dark: 'rgba(255, 255, 255, .87)',\n    },\n    inactiveBackgroundColor: {\n      light: 'transparent',\n      dark: 'transparent',\n    },\n  };\n\n  static contextType = ThemeContext;\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private getActiveTintColor() {\n    let { activeTintColor } = this.props;\n    if (!activeTintColor) {\n      return;\n    } else if (typeof activeTintColor === 'string') {\n      return activeTintColor;\n    }\n\n    return activeTintColor[this.context];\n  }\n\n  private getInactiveTintColor() {\n    let { inactiveTintColor } = this.props;\n    if (!inactiveTintColor) {\n      return;\n    } else if (typeof inactiveTintColor === 'string') {\n      return inactiveTintColor;\n    }\n\n    return inactiveTintColor[this.context];\n  }\n\n  private getActiveBackgroundColor() {\n    let { activeBackgroundColor } = this.props;\n    if (!activeBackgroundColor) {\n      return;\n    } else if (typeof activeBackgroundColor === 'string') {\n      return activeBackgroundColor;\n    }\n\n    return activeBackgroundColor[this.context];\n  }\n\n  private getInactiveBackgroundColor() {\n    let { inactiveBackgroundColor } = this.props;\n    if (!inactiveBackgroundColor) {\n      return;\n    } else if (typeof inactiveBackgroundColor === 'string') {\n      return inactiveBackgroundColor;\n    }\n\n    return inactiveBackgroundColor[this.context];\n  }\n\n  render() {\n    const {\n      items,\n      activeItemKey,\n      getLabel,\n      renderIcon,\n      onItemPress,\n      itemsContainerStyle,\n      itemStyle,\n      labelStyle,\n      activeLabelStyle,\n      inactiveLabelStyle,\n      iconContainerStyle,\n      drawerPosition,\n    } = this.props;\n\n    const activeTintColor = this.getActiveTintColor();\n    const activeBackgroundColor = this.getActiveBackgroundColor();\n    const inactiveTintColor = this.getInactiveTintColor();\n    const inactiveBackgroundColor = this.getInactiveBackgroundColor();\n\n    return (\n      <View style={[styles.container, itemsContainerStyle]}>\n        {items.map((route, index: number) => {\n          const focused = activeItemKey === route.key;\n          const color = focused ? activeTintColor : inactiveTintColor;\n          const backgroundColor = focused\n            ? activeBackgroundColor\n            : inactiveBackgroundColor;\n          const scene = { route, index, focused, tintColor: color };\n          const icon = renderIcon(scene);\n          const label = getLabel(scene);\n          const accessibilityLabel =\n            typeof label === 'string' ? label : undefined;\n          const extraLabelStyle = focused\n            ? activeLabelStyle\n            : inactiveLabelStyle;\n          return (\n            <TouchableItem\n              key={route.key}\n              accessible\n              accessibilityLabel={accessibilityLabel}\n              onPress={() => {\n                onItemPress({ route, focused });\n              }}\n              delayPressIn={0}\n            >\n              <SafeAreaView\n                style={[{ backgroundColor }, styles.item, itemStyle]}\n                forceInset={{\n                  [drawerPosition]: 'always',\n                  [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n                  vertical: 'never',\n                }}\n              >\n                {icon ? (\n                  <View\n                    style={[\n                      styles.icon,\n                      focused ? null : styles.inactiveIcon,\n                      iconContainerStyle,\n                    ]}\n                  >\n                    {icon}\n                  </View>\n                ) : null}\n                {typeof label === 'string' ? (\n                  <Text\n                    style={[\n                      styles.label,\n                      { color },\n                      labelStyle,\n                      extraLabelStyle,\n                    ]}\n                  >\n                    {label}\n                  </Text>\n                ) : (\n                  label\n                )}\n              </SafeAreaView>\n            </TouchableItem>\n          );\n        })}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4,\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center',\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62,\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}