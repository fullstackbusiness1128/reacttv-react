{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { PureComponent } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport styles from \"./Pagination.style\";\n\nvar PaginationDot = function (_PureComponent) {\n  _inherits(PaginationDot, _PureComponent);\n\n  function PaginationDot(props) {\n    var _this;\n\n    _classCallCheck(this, PaginationDot);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PaginationDot).call(this, props));\n    _this.state = {\n      animColor: new Animated.Value(0),\n      animOpacity: new Animated.Value(0),\n      animTransform: new Animated.Value(0)\n    };\n    return _this;\n  }\n\n  _createClass(PaginationDot, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.active) {\n        this._animate(1);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.active !== this.props.active) {\n        this._animate(this.props.active ? 1 : 0);\n      }\n    }\n  }, {\n    key: \"_animate\",\n    value: function _animate() {\n      var toValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var _this$state = this.state,\n          animColor = _this$state.animColor,\n          animOpacity = _this$state.animOpacity,\n          animTransform = _this$state.animTransform;\n      var _this$props = this.props,\n          animatedDuration = _this$props.animatedDuration,\n          animatedFriction = _this$props.animatedFriction,\n          animatedTension = _this$props.animatedTension;\n      var commonProperties = {\n        toValue: toValue,\n        isInteraction: false,\n        useNativeDriver: !this._shouldAnimateColor\n      };\n      var animations = [Animated.timing(animOpacity, _objectSpread({\n        easing: Easing.linear,\n        duration: animatedDuration\n      }, commonProperties)), Animated.spring(animTransform, _objectSpread({\n        friction: animatedFriction,\n        tension: animatedTension\n      }, commonProperties))];\n\n      if (this._shouldAnimateColor) {\n        animations.push(Animated.timing(animColor, _objectSpread({\n          easing: Easing.linear\n        }, commonProperties)));\n      }\n\n      Animated.parallel(animations).start();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          animColor = _this$state2.animColor,\n          animOpacity = _this$state2.animOpacity,\n          animTransform = _this$state2.animTransform;\n      var _this$props2 = this.props,\n          active = _this$props2.active,\n          activeOpacity = _this$props2.activeOpacity,\n          carouselRef = _this$props2.carouselRef,\n          color = _this$props2.color,\n          containerStyle = _this$props2.containerStyle,\n          inactiveColor = _this$props2.inactiveColor,\n          inactiveStyle = _this$props2.inactiveStyle,\n          inactiveOpacity = _this$props2.inactiveOpacity,\n          inactiveScale = _this$props2.inactiveScale,\n          index = _this$props2.index,\n          style = _this$props2.style,\n          tappable = _this$props2.tappable,\n          delayPressInDot = _this$props2.delayPressInDot;\n      var animatedStyle = {\n        opacity: animOpacity.interpolate({\n          inputRange: [0, 1],\n          outputRange: [inactiveOpacity, 1]\n        }),\n        transform: [{\n          scale: animTransform.interpolate({\n            inputRange: [0, 1],\n            outputRange: [inactiveScale, 1]\n          })\n        }]\n      };\n      var animatedColor = this._shouldAnimateColor && inactiveColor && color ? {\n        backgroundColor: animColor.interpolate({\n          inputRange: [0, 1],\n          outputRange: [inactiveColor, color]\n        })\n      } : {};\n      var dotContainerStyle = [styles.sliderPaginationDotContainer, containerStyle || {}];\n      var dotStyle = [styles.sliderPaginationDot, style || {}, !active && inactiveStyle || {}, animatedStyle, animatedColor];\n      var onPress = tappable && (!!index || index === 0) ? function () {\n        try {\n          var currentRef = carouselRef && 'current' in carouselRef ? carouselRef.current : carouselRef;\n\n          currentRef._snapToItem(currentRef._getPositionIndex(index));\n        } catch (error) {\n          console.warn('react-native-snap-carousel | Pagination: ' + '`carouselRef` has to be a Carousel ref.\\n' + error);\n        }\n      } : undefined;\n      return React.createElement(TouchableOpacity, {\n        accessible: false,\n        style: dotContainerStyle,\n        activeOpacity: tappable ? activeOpacity : 1,\n        onPress: onPress,\n        delayPressIn: delayPressInDot\n      }, React.createElement(Animated.View, {\n        style: dotStyle\n      }));\n    }\n  }, {\n    key: \"_shouldAnimateColor\",\n    get: function get() {\n      var _this$props3 = this.props,\n          color = _this$props3.color,\n          inactiveColor = _this$props3.inactiveColor;\n      return color && inactiveColor;\n    }\n  }]);\n\n  return PaginationDot;\n}(PureComponent);\n\nexport { PaginationDot as default };","map":{"version":3,"mappings":"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","names":["React","PureComponent","styles","PaginationDot","constructor","props","state","animColor","Animated","Value","animOpacity","animTransform","active","_animate","prevProps","toValue","animatedDuration","animatedFriction","animatedTension","commonProperties","isInteraction","useNativeDriver","_shouldAnimateColor","animations","timing","easing","Easing","linear","duration","spring","friction","tension","push","parallel","start","activeOpacity","carouselRef","color","containerStyle","inactiveColor","inactiveStyle","inactiveOpacity","inactiveScale","index","style","tappable","delayPressInDot","animatedStyle","opacity","interpolate","inputRange","outputRange","transform","scale","animatedColor","backgroundColor","dotContainerStyle","sliderPaginationDotContainer","dotStyle","sliderPaginationDot","onPress","currentRef","current","_snapToItem","_getPositionIndex","error","console","warn","undefined","TouchableOpacity","accessible","delayPressIn","View"],"sources":["PaginationDot.tsx"],"sourcesContent":["import React, { PureComponent, RefObject } from 'react';\nimport {\n    Animated,\n    Easing,\n    TouchableOpacity,\n    StyleProp,\n    ViewStyle\n} from 'react-native';\nimport styles from './Pagination.style';\nimport type Carousel from 'src/carousel/Carousel';\n\ntype PaginationDotProps<TData> = {\n  inactiveOpacity: number;\n  inactiveScale: number;\n  active?: boolean;\n  activeOpacity?: number;\n  animatedDuration?: number;\n  animatedFriction?: number;\n  animatedTension?: number;\n  carouselRef?: Carousel<TData> | RefObject<Carousel<TData>> | null;\n  color?: string;\n  containerStyle?: StyleProp<ViewStyle>;\n  delayPressInDot?: number;\n  inactiveColor?: string;\n  inactiveStyle?: StyleProp<ViewStyle>;\n  index?: number;\n  style?: StyleProp<ViewStyle>;\n  tappable?: boolean;\n};\n\ntype PaginationDotState = {\n  animColor: Animated.Value;\n  animOpacity: Animated.Value;\n  animTransform: Animated.Value;\n};\n\nexport default class PaginationDot<TData> extends PureComponent<\n  PaginationDotProps<TData>,\n  PaginationDotState\n> {\n    constructor (props: PaginationDotProps<TData>) {\n        super(props);\n        this.state = {\n            animColor: new Animated.Value(0),\n            animOpacity: new Animated.Value(0),\n            animTransform: new Animated.Value(0)\n        };\n    }\n\n    componentDidMount () {\n        if (this.props.active) {\n            this._animate(1);\n        }\n    }\n\n    componentDidUpdate (prevProps: PaginationDotProps<TData>) {\n        if (prevProps.active !== this.props.active) {\n            this._animate(this.props.active ? 1 : 0);\n        }\n    }\n\n    _animate (toValue = 0) {\n        const { animColor, animOpacity, animTransform } = this.state;\n        const { animatedDuration, animatedFriction, animatedTension } = this.props;\n\n        const commonProperties = {\n            toValue,\n            isInteraction: false,\n            useNativeDriver: !this._shouldAnimateColor\n        };\n\n        const animations = [\n            Animated.timing(animOpacity, {\n                easing: Easing.linear,\n                duration: animatedDuration,\n                ...commonProperties\n            }),\n            Animated.spring(animTransform, {\n                friction: animatedFriction,\n                tension: animatedTension,\n                ...commonProperties\n            })\n        ];\n\n        if (this._shouldAnimateColor) {\n            animations.push(\n                Animated.timing(animColor, {\n                    easing: Easing.linear,\n                    ...commonProperties\n                })\n            );\n        }\n\n        Animated.parallel(animations).start();\n    }\n\n    get _shouldAnimateColor () {\n        const { color, inactiveColor } = this.props;\n        return color && inactiveColor;\n    }\n\n    render () {\n        const { animColor, animOpacity, animTransform } = this.state;\n        const {\n            active,\n            activeOpacity,\n            carouselRef,\n            color,\n            containerStyle,\n            inactiveColor,\n            inactiveStyle,\n            inactiveOpacity,\n            inactiveScale,\n            index,\n            style,\n            tappable,\n            delayPressInDot\n        } = this.props;\n\n        const animatedStyle = {\n            opacity: animOpacity.interpolate({\n                inputRange: [0, 1],\n                outputRange: [inactiveOpacity, 1]\n            }),\n            transform: [\n                {\n                    scale: animTransform.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [inactiveScale, 1]\n                    })\n                }\n            ]\n        };\n        const animatedColor =\n      this._shouldAnimateColor && inactiveColor && color ?\n          {\n              backgroundColor: animColor.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [inactiveColor, color]\n              })\n          } :\n          {};\n\n        const dotContainerStyle = [\n            styles.sliderPaginationDotContainer,\n            containerStyle || {}\n        ];\n\n        const dotStyle = [\n            styles.sliderPaginationDot,\n            style || {},\n            (!active && inactiveStyle) || {},\n            animatedStyle,\n            animatedColor\n        ];\n\n        const onPress =\n      tappable && (!!index || index === 0) ?\n          () => {\n              try {\n                  const currentRef =\n                carouselRef && 'current' in carouselRef ?\n                    carouselRef.current :\n                    carouselRef;\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              currentRef!._snapToItem(currentRef!._getPositionIndex(index));\n              } catch (error) {\n                  console.warn(\n                      'react-native-snap-carousel | Pagination: ' +\n                  '`carouselRef` has to be a Carousel ref.\\n' +\n                  error\n                  );\n              }\n          } :\n          undefined;\n\n        return (\n            <TouchableOpacity\n              accessible={false}\n              style={dotContainerStyle}\n              activeOpacity={tappable ? activeOpacity : 1}\n              onPress={onPress}\n              delayPressIn={delayPressInDot}\n            >\n                <Animated.View style={dotStyle} />\n            </TouchableOpacity>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}