{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { ContinousBaseGesture } from \"./gesture\";\nexport var PanGesture = function (_ContinousBaseGesture) {\n  _inherits(PanGesture, _ContinousBaseGesture);\n\n  function PanGesture() {\n    var _this;\n\n    _classCallCheck(this, PanGesture);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PanGesture).call(this));\n\n    _defineProperty(_assertThisInitialized(_this), \"config\", {});\n\n    _this.handlerName = 'PanGestureHandler';\n    return _this;\n  }\n\n  _createClass(PanGesture, [{\n    key: \"activeOffsetY\",\n    value: function activeOffsetY(offset) {\n      if (Array.isArray(offset)) {\n        this.config.activeOffsetYStart = offset[0];\n        this.config.activeOffsetYEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.activeOffsetYStart = offset;\n      } else {\n        this.config.activeOffsetYEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"activeOffsetX\",\n    value: function activeOffsetX(offset) {\n      if (Array.isArray(offset)) {\n        this.config.activeOffsetXStart = offset[0];\n        this.config.activeOffsetXEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.activeOffsetXStart = offset;\n      } else {\n        this.config.activeOffsetXEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"failOffsetY\",\n    value: function failOffsetY(offset) {\n      if (Array.isArray(offset)) {\n        this.config.failOffsetYStart = offset[0];\n        this.config.failOffsetYEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.failOffsetYStart = offset;\n      } else {\n        this.config.failOffsetYEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"failOffsetX\",\n    value: function failOffsetX(offset) {\n      if (Array.isArray(offset)) {\n        this.config.failOffsetXStart = offset[0];\n        this.config.failOffsetXEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.failOffsetXStart = offset;\n      } else {\n        this.config.failOffsetXEnd = offset;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"minPointers\",\n    value: function minPointers(_minPointers) {\n      this.config.minPointers = _minPointers;\n      return this;\n    }\n  }, {\n    key: \"maxPointers\",\n    value: function maxPointers(_maxPointers) {\n      this.config.maxPointers = _maxPointers;\n      return this;\n    }\n  }, {\n    key: \"minDistance\",\n    value: function minDistance(distance) {\n      this.config.minDist = distance;\n      return this;\n    }\n  }, {\n    key: \"minVelocity\",\n    value: function minVelocity(velocity) {\n      this.config.minVelocity = velocity;\n      return this;\n    }\n  }, {\n    key: \"minVelocityX\",\n    value: function minVelocityX(velocity) {\n      this.config.minVelocityX = velocity;\n      return this;\n    }\n  }, {\n    key: \"minVelocityY\",\n    value: function minVelocityY(velocity) {\n      this.config.minVelocityY = velocity;\n      return this;\n    }\n  }, {\n    key: \"averageTouches\",\n    value: function averageTouches(value) {\n      this.config.avgTouches = value;\n      return this;\n    }\n  }, {\n    key: \"enableTrackpadTwoFingerGesture\",\n    value: function enableTrackpadTwoFingerGesture(value) {\n      this.config.enableTrackpadTwoFingerGesture = value;\n      return this;\n    }\n  }]);\n\n  return PanGesture;\n}(ContinousBaseGesture);","map":{"version":3,"sources":["panGesture.ts"],"names":["constructor","Array","offset"],"mappings":"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","sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport {\n  PanGestureConfig,\n  PanGestureHandlerEventPayload,\n} from '../PanGestureHandler';\n\nexport class PanGesture extends ContinousBaseGesture<PanGestureHandlerEventPayload> {\n  public config: BaseGestureConfig & PanGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'PanGestureHandler';\n  }\n\n  activeOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetYStart = offset[0];\n      this.config.activeOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetYStart = offset;\n    } else {\n      this.config.activeOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  activeOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetXStart = offset[0];\n      this.config.activeOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetXStart = offset;\n    } else {\n      this.config.activeOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetYStart = offset[0];\n      this.config.failOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetYStart = offset;\n    } else {\n      this.config.failOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetXStart = offset[0];\n      this.config.failOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetXStart = offset;\n    } else {\n      this.config.failOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  minPointers(minPointers: number) {\n    this.config.minPointers = minPointers;\n    return this;\n  }\n\n  maxPointers(maxPointers: number) {\n    this.config.maxPointers = maxPointers;\n    return this;\n  }\n\n  minDistance(distance: number) {\n    this.config.minDist = distance;\n    return this;\n  }\n\n  minVelocity(velocity: number) {\n    this.config.minVelocity = velocity;\n    return this;\n  }\n\n  minVelocityX(velocity: number) {\n    this.config.minVelocityX = velocity;\n    return this;\n  }\n\n  minVelocityY(velocity: number) {\n    this.config.minVelocityY = velocity;\n    return this;\n  }\n\n  averageTouches(value: boolean) {\n    this.config.avgTouches = value;\n    return this;\n  }\n\n  enableTrackpadTwoFingerGesture(value: boolean) {\n    this.config.enableTrackpadTwoFingerGesture = value;\n    return this;\n  }\n}\n\nexport type PanGestureType = InstanceType<typeof PanGesture>;\n"]},"metadata":{},"sourceType":"module"}