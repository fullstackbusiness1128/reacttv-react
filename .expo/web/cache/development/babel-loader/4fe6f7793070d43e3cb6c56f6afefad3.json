{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\nimport preloadFonts from \"./preloadFonts\";\nimport preloadImages from \"./preloadImages\";\n\nvar cacheFonts = function cacheFonts(fonts) {\n  return fonts.map(function (font) {\n    return Font.loadAsync(font);\n  });\n};\n\nvar cacheImages = function cacheImages(images) {\n  return Object.values(images).map(function (image) {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    }\n\n    return Asset.fromModule(image).downloadAsync();\n  });\n};\n\nvar loadAssetsAsync = function loadAssetsAsync() {\n  var fontAssets, imageAssets;\n  return _regeneratorRuntime.async(function loadAssetsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          fontAssets = cacheFonts(preloadFonts);\n          imageAssets = cacheImages(preloadImages);\n          return _context.abrupt(\"return\", Promise.all([].concat(_toConsumableArray(fontAssets), _toConsumableArray(imageAssets))));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default {\n  cacheFonts: cacheFonts,\n  cacheImages: cacheImages,\n  loadAssetsAsync: loadAssetsAsync\n};","map":{"version":3,"names":["Asset","Font","preloadFonts","preloadImages","cacheFonts","fonts","map","font","loadAsync","cacheImages","images","Object","values","image","Image","prefetch","fromModule","downloadAsync","loadAssetsAsync","fontAssets","imageAssets","Promise","all"],"sources":["E:/works/android/20220927/flicknplayreacttv-main/flicknplayreacttv-main/src/constants/functions.js"],"sourcesContent":["import { Image } from 'react-native';\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\n\nimport preloadFonts from './preloadFonts';\nimport preloadImages from './preloadImages';\n\n// cache fonts\n// /////////////////////////////////////////////////////////////////////////////\nconst cacheFonts = (fonts) => fonts.map((font) => Font.loadAsync(font));\n\n// cache images\n// /////////////////////////////////////////////////////////////////////////////\nconst cacheImages = (images) => {\n  return Object.values(images).map((image) => {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    }\n\n    return Asset.fromModule(image).downloadAsync();\n  });\n};\n\n// preload async\n// /////////////////////////////////////////////////////////////////////////////\nconst loadAssetsAsync = async () => {\n  // preload assets\n  const fontAssets = cacheFonts(preloadFonts);\n  const imageAssets = cacheImages(preloadImages);\n\n  // promise load all\n  return Promise.all([...fontAssets, ...imageAssets]);\n};\n\nexport default {\n  cacheFonts,\n  cacheImages,\n  loadAssetsAsync\n};\n"],"mappings":";;;AACA,SAASA,KAAT,QAAsB,YAAtB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AAEA,OAAOC,YAAP;AACA,OAAOC,aAAP;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD;EAAA,OAAWA,KAAK,CAACC,GAAN,CAAU,UAACC,IAAD;IAAA,OAAUN,IAAI,CAACO,SAAL,CAAeD,IAAf,CAAV;EAAA,CAAV,CAAX;AAAA,CAAnB;;AAIA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAAY;EAC9B,OAAOC,MAAM,CAACC,MAAP,CAAcF,MAAd,EAAsBJ,GAAtB,CAA0B,UAACO,KAAD,EAAW;IAC1C,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC7B,OAAOC,KAAK,CAACC,QAAN,CAAeF,KAAf,CAAP;IACD;;IAED,OAAOb,KAAK,CAACgB,UAAN,CAAiBH,KAAjB,EAAwBI,aAAxB,EAAP;EACD,CANM,CAAP;AAOD,CARD;;AAYA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;EAAA;EAAA;IAAA;MAAA;QAAA;UAEhBC,UAFgB,GAEHf,UAAU,CAACF,YAAD,CAFP;UAGhBkB,WAHgB,GAGFX,WAAW,CAACN,aAAD,CAHT;UAAA,iCAMfkB,OAAO,CAACC,GAAR,8BAAgBH,UAAhB,sBAA+BC,WAA/B,GANe;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAxB;;AASA,eAAe;EACbhB,UAAU,EAAVA,UADa;EAEbK,WAAW,EAAXA,WAFa;EAGbS,eAAe,EAAfA;AAHa,CAAf"},"metadata":{},"sourceType":"module"}