{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Hammer from '@egjs/hammerjs';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { State } from \"../State\";\nimport { EventMap } from \"./constants\";\nimport * as NodeManager from \"./NodeManager\";\nvar gestureInstances = 0;\n\nvar GestureHandler = function () {\n  _createClass(GestureHandler, [{\n    key: \"id\",\n    get: function get() {\n      return \"\" + this.name + this.gestureInstance;\n    }\n  }, {\n    key: \"isDiscrete\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }]);\n\n  function GestureHandler() {\n    var _this = this;\n\n    _classCallCheck(this, GestureHandler);\n\n    _defineProperty(this, \"handlerTag\", void 0);\n\n    _defineProperty(this, \"isGestureRunning\", false);\n\n    _defineProperty(this, \"view\", null);\n\n    _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n\n    _defineProperty(this, \"hasGestureFailed\", false);\n\n    _defineProperty(this, \"hammer\", null);\n\n    _defineProperty(this, \"initialRotation\", null);\n\n    _defineProperty(this, \"__initialX\", void 0);\n\n    _defineProperty(this, \"__initialY\", void 0);\n\n    _defineProperty(this, \"config\", {});\n\n    _defineProperty(this, \"previousState\", State.UNDETERMINED);\n\n    _defineProperty(this, \"pendingGestures\", {});\n\n    _defineProperty(this, \"oldState\", State.UNDETERMINED);\n\n    _defineProperty(this, \"lastSentState\", null);\n\n    _defineProperty(this, \"gestureInstance\", void 0);\n\n    _defineProperty(this, \"_stillWaiting\", void 0);\n\n    _defineProperty(this, \"propsRef\", void 0);\n\n    _defineProperty(this, \"ref\", void 0);\n\n    _defineProperty(this, \"clearSelfAsPending\", function () {\n      if (Array.isArray(_this.config.waitFor)) {\n        for (var _iterator = _this.config.waitFor, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var _gesture2 = _ref;\n\n          _gesture2.removePendingGesture(_this.id);\n        }\n      }\n    });\n\n    _defineProperty(this, \"destroy\", function () {\n      _this.clearSelfAsPending();\n\n      if (_this.hammer) {\n        _this.hammer.stop(false);\n\n        _this.hammer.destroy();\n      }\n\n      _this.hammer = null;\n    });\n\n    _defineProperty(this, \"isPointInView\", function (_ref2) {\n      var x = _ref2.x,\n          y = _ref2.y;\n\n      var rect = _this.view.getBoundingClientRect();\n\n      var pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    });\n\n    _defineProperty(this, \"sendEvent\", function (nativeEvent) {\n      var _this$propsRef$curren = _this.propsRef.current,\n          onGestureHandlerEvent = _this$propsRef$curren.onGestureHandlerEvent,\n          onGestureHandlerStateChange = _this$propsRef$curren.onGestureHandlerStateChange;\n\n      var event = _this.transformEventData(nativeEvent);\n\n      invokeNullableMethod(onGestureHandlerEvent, event);\n\n      if (_this.lastSentState !== event.nativeEvent.state) {\n        _this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    });\n\n    _defineProperty(this, \"sync\", function () {\n      var gesture = _this.hammer.get(_this.name);\n\n      if (!gesture) return;\n\n      var enable = function enable(recognizer, inputData) {\n        if (!_this.config.enabled) {\n          _this.isGestureRunning = false;\n          _this.hasGestureFailed = false;\n          return false;\n        }\n\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return _this.shouldEnableGestureOnSetup;\n        }\n\n        if (_this.hasGestureFailed) {\n          return false;\n        }\n\n        if (!_this.isDiscrete) {\n          if (_this.isGestureRunning) {\n            return true;\n          }\n\n          _this._stillWaiting = _this._getPendingGestures();\n\n          if (_this._stillWaiting.length) {\n            for (var _iterator2 = _this._stillWaiting, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n              var _ref3;\n\n              if (_isArray2) {\n                if (_i2 >= _iterator2.length) break;\n                _ref3 = _iterator2[_i2++];\n              } else {\n                _i2 = _iterator2.next();\n                if (_i2.done) break;\n                _ref3 = _i2.value;\n              }\n\n              var _gesture4 = _ref3;\n\n              if (!_gesture4.isDiscrete && _gesture4.isGestureRunning) {\n                _this.hasGestureFailed = true;\n                _this.isGestureRunning = false;\n                return false;\n              }\n            }\n\n            return false;\n          }\n        }\n\n        if (!_this.hasCustomActivationCriteria) {\n          return true;\n        }\n\n        var deltaRotation = _this.initialRotation == null ? 0 : inputData.rotation - _this.initialRotation;\n\n        var _this$isGestureEnable = _this.isGestureEnabledForEvent(_this.getConfig(), recognizer, _objectSpread({}, inputData, {\n          deltaRotation: deltaRotation\n        })),\n            success = _this$isGestureEnable.success,\n            failed = _this$isGestureEnable.failed;\n\n        if (failed) {\n          _this.simulateCancelEvent(inputData);\n\n          _this.hasGestureFailed = true;\n        }\n\n        return success;\n      };\n\n      var params = _this.getHammerConfig();\n\n      gesture.set(_objectSpread({}, params, {\n        enable: enable\n      }));\n    });\n\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  _createClass(GestureHandler, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {}\n  }, {\n    key: \"removePendingGesture\",\n    value: function removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n  }, {\n    key: \"addPendingGesture\",\n    value: function addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref4) {\n      var _ref4$enabled = _ref4.enabled,\n          enabled = _ref4$enabled === void 0 ? true : _ref4$enabled,\n          props = _objectWithoutProperties(_ref4, [\"enabled\"]);\n\n      this.clearSelfAsPending();\n      this.config = ensureConfig(_objectSpread({\n        enabled: enabled\n      }, props));\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n\n      if (Array.isArray(this.config.waitFor)) {\n        for (var _iterator3 = this.config.waitFor, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n          var _ref5;\n\n          if (_isArray3) {\n            if (_i3 >= _iterator3.length) break;\n            _ref5 = _iterator3[_i3++];\n          } else {\n            _i3 = _iterator3.next();\n            if (_i3.done) break;\n            _ref5 = _i3.value;\n          }\n\n          var _gesture5 = _ref5;\n\n          _gesture5.addPendingGesture(this);\n        }\n      }\n\n      if (this.hammer) {\n        this.sync();\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      if (type == 0) {\n        return 0;\n      }\n\n      return EventMap[type];\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(event) {\n      var eventType = event.eventType,\n          numberOfPointers = event.maxPointers;\n      var changedTouch = event.changedPointers[0];\n      var pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n      var state = this.getState(eventType);\n\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n\n      return {\n        nativeEvent: _objectSpread({\n          numberOfPointers: numberOfPointers,\n          state: state,\n          pointerInside: pointerInside\n        }, this.transformNativeEvent(event), {\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: this.oldState\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_event) {\n      return {};\n    }\n  }, {\n    key: \"cancelPendingGestures\",\n    value: function cancelPendingGestures(event) {\n      for (var _i4 = 0, _Object$values = Object.values(this.pendingGestures); _i4 < _Object$values.length; _i4++) {\n        var gesture = _Object$values[_i4];\n\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n  }, {\n    key: \"notifyPendingGestures\",\n    value: function notifyPendingGestures() {\n      for (var _i5 = 0, _Object$values2 = Object.values(this.pendingGestures); _i5 < _Object$values2.length; _i5++) {\n        var gesture = _Object$values2[_i5];\n\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n  }, {\n    key: \"cancelEvent\",\n    value: function cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(_objectSpread({}, event, {\n        eventType: Hammer.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(_ref6) {\n      var isFirst = _ref6.isFirst;\n\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n  }, {\n    key: \"setView\",\n    value: function setView(ref, propsRef) {\n      var _this2 = this;\n\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n\n      this.propsRef = propsRef;\n      this.ref = ref;\n      this.view = findNodeHandle(ref);\n      this.hammer = new Hammer.Manager(this.view);\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      var NativeGestureClass = this.NativeGestureClass;\n      var gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', function (ev) {\n        if (!_this2.config.enabled) {\n          _this2.hasGestureFailed = false;\n          _this2.isGestureRunning = false;\n          return;\n        }\n\n        _this2.onRawEvent(ev);\n\n        if (_this2.initialRotation === null && ev.rotation !== 0) {\n          _this2.initialRotation = ev.rotation;\n        }\n\n        if (ev.isFinal) {\n          setTimeout(function () {\n            _this2.initialRotation = null;\n            _this2.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this3 = this;\n\n      if (!this.isDiscrete) {\n        this.hammer.on(this.name + \"start\", function (event) {\n          return _this3.onStart(event);\n        });\n        this.hammer.on(this.name + \"end \" + this.name + \"cancel\", function (event) {\n          _this3.onGestureEnded(event);\n        });\n      }\n\n      this.hammer.on(this.name, function (ev) {\n        return _this3.onGestureActivated(ev);\n      });\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(_ref7) {\n      var deltaX = _ref7.deltaX,\n          deltaY = _ref7.deltaY,\n          rotation = _ref7.rotation;\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess() {}\n  }, {\n    key: \"_getPendingGestures\",\n    value: function _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        var stillWaiting = this.config.waitFor.filter(function (_ref8) {\n          var hasGestureFailed = _ref8.hasGestureFailed;\n          return hasGestureFailed === false;\n        });\n        return stillWaiting;\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      var pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers: pointers\n      };\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(_inputData) {}\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n  }]);\n\n  return GestureHandler;\n}();\n\nfunction invokeNullableMethod(method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        var handler = method.__getHandler();\n\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          var argMapping = method.__nodeConfig.argMapping;\n\n          if (Array.isArray(argMapping)) {\n            for (var _iterator4 = argMapping.entries(), _isArray4 = Array.isArray(_iterator4), _i6 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n              var _ref11;\n\n              if (_isArray4) {\n                if (_i6 >= _iterator4.length) break;\n                _ref11 = _iterator4[_i6++];\n              } else {\n                _i6 = _iterator4.next();\n                if (_i6.done) break;\n                _ref11 = _i6.value;\n              }\n\n              var _ref12 = _ref11;\n\n              var _ref10 = _slicedToArray(_ref12, 2);\n\n              var _index = _ref10[0];\n\n              var _ref10$ = _slicedToArray(_ref10[1], 2);\n\n              var _key = _ref10$[0];\n              var _value = _ref10$[1];\n\n              if (_key in event.nativeEvent) {\n                var nativeValue = event.nativeEvent[_key];\n\n                if (_value && _value.setValue) {\n                  _value.setValue(nativeValue);\n                } else {\n                  method.__nodeConfig.argMapping[_index] = [_key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction ensureConfig(config) {\n  var props = _objectSpread({}, config);\n\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor).map(function (_ref13) {\n      var handlerTag = _ref13.handlerTag;\n      return NodeManager.getHandler(handlerTag);\n    }).filter(function (v) {\n      return v;\n    });\n  } else {\n    props.waitFor = null;\n  }\n\n  var configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n  configProps.forEach(function (prop) {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\n\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;","map":{"version":3,"mappings":"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","names":["Hammer","State","EventMap","NodeManager","gestureInstances","GestureHandler","name","gestureInstance","Error","constructor","_defineProperty","UNDETERMINED","Array","isArray","config","waitFor","gesture","removePendingGesture","id","clearSelfAsPending","hammer","stop","destroy","x","y","rect","view","getBoundingClientRect","pointerInside","left","right","top","bottom","nativeEvent","propsRef","current","onGestureHandlerEvent","onGestureHandlerStateChange","event","transformEventData","invokeNullableMethod","lastSentState","state","get","enable","recognizer","inputData","enabled","isGestureRunning","hasGestureFailed","options","maxPointers","shouldEnableGestureOnSetup","isDiscrete","_stillWaiting","_getPendingGestures","length","hasCustomActivationCriteria","deltaRotation","initialRotation","rotation","isGestureEnabledForEvent","getConfig","success","failed","simulateCancelEvent","params","getHammerConfig","set","_gesture","pendingGestures","_config","_recognizer","_event","props","ensureConfig","updateHasCustomActivationCriteria","addPendingGesture","sync","type","eventType","numberOfPointers","changedTouch","changedPointers","isPointInView","clientX","clientY","getState","previousState","oldState","transformNativeEvent","handlerTag","target","ref","timeStamp","Date","now","Object","values","cancelEvent","onWaitingEnded","cancelPendingGestures","notifyPendingGestures","sendEvent","INPUT_CANCEL","isFinal","onGestureEnded","isFirst","findNodeHandle","Manager","NativeGestureClass","add","on","ev","onRawEvent","setTimeout","setupEvents","onStart","onGestureActivated","deltaX","deltaY","__initialX","__initialY","stillWaiting","filter","pointers","minPointers","_inputData","method","__getHandler","handler","argMapping","__nodeConfig","entries","index","key","value","nativeValue","setValue","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","getHandler","v","configProps","forEach","prop","Number","NaN"],"sources":["GestureHandler.ts"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\n\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\n\nexport type Config = Partial<{\n  enabled: boolean;\n  minPointers: number;\n  maxPointers: number;\n  minDist: number;\n  minDistSq: number;\n  minVelocity: number;\n  minVelocitySq: number;\n  maxDist: number;\n  maxDistSq: number;\n  failOffsetXStart: number;\n  failOffsetYStart: number;\n  failOffsetXEnd: number;\n  failOffsetYEnd: number;\n  activeOffsetXStart: number;\n  activeOffsetXEnd: number;\n  activeOffsetYStart: number;\n  activeOffsetYEnd: number;\n  waitFor: any[] | null;\n}>;\n\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\n\nlet gestureInstances = 0;\n\nabstract class GestureHandler {\n  public handlerTag: any;\n  public isGestureRunning = false;\n  public view: number | null = null;\n  protected hasCustomActivationCriteria: boolean;\n  protected hasGestureFailed = false;\n  protected hammer: HammerManager | null = null;\n  protected initialRotation: number | null = null;\n  protected __initialX: any;\n  protected __initialY: any;\n  protected config: Config = {};\n  protected previousState: State = State.UNDETERMINED;\n  private pendingGestures: Record<string, this> = {};\n  private oldState: State = State.UNDETERMINED;\n  private lastSentState: State | null = null;\n  private gestureInstance: number;\n  private _stillWaiting: any;\n  private propsRef: any;\n  private ref: any;\n\n  abstract get name(): string;\n\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture: this) {}\n\n  removePendingGesture(id: string) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture: this) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(\n    _config: any,\n    _recognizer: any,\n    _event: any\n  ): { failed?: boolean; success?: boolean } {\n    return { success: true };\n  }\n\n  get NativeGestureClass(): RecognizerStatic {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config: Config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = ensureConfig({ enabled, ...props });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type: keyof typeof EventMap): State {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n\n  transformEventData(event: HammerInputExt) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: this.oldState,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(_event: HammerInputExt) {\n    return {};\n  }\n\n  sendEvent = (nativeEvent: HammerInputExt) => {\n    const {\n      onGestureHandlerEvent,\n      onGestureHandlerStateChange,\n    } = this.propsRef.current;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state as State;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event: HammerInputExt) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n  onGestureEnded(event: HammerInputExt) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event: HammerInputExt) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }: HammerInputExt) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n    this.hammer = new Hammer.Manager(this.view as any);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    // @ts-ignore TODO(TS)\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent((ev as unknown) as HammerInputExt);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\n        this.onStart((event as unknown) as HammerInputExt)\n      );\n      this.hammer!.on(\n        `${this.name}end ${this.name}cancel`,\n        (event: HammerInput) => {\n          this.onGestureEnded((event as unknown) as HammerInputExt);\n        }\n      );\n    }\n    this.hammer!.on(this.name, (ev: HammerInput) =>\n      this.onGestureActivated((ev as unknown) as HammerInputExt)\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer!.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer: any, inputData: any) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      // @ts-ignore FIXME(TS)\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    // @ts-ignore FIXME(TS)\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(_inputData: any) {}\n}\n\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(\n  method:\n    | ((event: NativeEvent) => void)\n    | { __getHandler: () => (event: NativeEvent) => void }\n    | { __nodeConfig: { argMapping: any } },\n  event: NativeEvent\n) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const [index, [key, value]] of argMapping.entries()) {\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Validate the props\nfunction ensureConfig(config: Config): Required<Config> {\n  const props = { ...config };\n\n  // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist! * props.minDist!;\n  }\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity! * props.minVelocity!;\n  }\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist! * config.maxDist!;\n  }\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor)\n      .map(({ handlerTag }: { handlerTag: number }) =>\n        NodeManager.getHandler(handlerTag)\n      )\n      .filter((v) => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  const configProps = [\n    'minPointers',\n    'maxPointers',\n    'minDist',\n    'maxDist',\n    'maxDistSq',\n    'minVelocitySq',\n    'minDistSq',\n    'minVelocity',\n    'failOffsetXStart',\n    'failOffsetYStart',\n    'failOffsetXEnd',\n    'failOffsetYEnd',\n    'activeOffsetXStart',\n    'activeOffsetXEnd',\n    'activeOffsetYStart',\n    'activeOffsetYEnd',\n  ] as const;\n  configProps.forEach((prop: typeof configProps[number]) => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\n}\n\nfunction asArray<T>(value: T | T[]) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"]},"metadata":{},"sourceType":"module"}