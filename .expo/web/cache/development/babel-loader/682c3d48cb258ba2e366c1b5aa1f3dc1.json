{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\nimport preloadFonts from \"./preloadFonts\";\nimport preloadImages from \"./preloadImages\";\n\nvar cacheFonts = function cacheFonts(fonts) {\n  return fonts.map(function (font) {\n    return Font.loadAsync(font);\n  });\n};\n\nvar cacheImages = function cacheImages(images) {\n  return Object.values(images).map(function (image) {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    }\n\n    return Asset.fromModule(image).downloadAsync();\n  });\n};\n\nvar loadAssetsAsync = function loadAssetsAsync() {\n  var fontAssets, imageAssets;\n  return _regeneratorRuntime.async(function loadAssetsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          fontAssets = cacheFonts(preloadFonts);\n          imageAssets = cacheImages(preloadImages);\n          return _context.abrupt(\"return\", Promise.all([].concat(_toConsumableArray(fontAssets), _toConsumableArray(imageAssets))));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default {\n  cacheFonts: cacheFonts,\n  cacheImages: cacheImages,\n  loadAssetsAsync: loadAssetsAsync\n};","map":{"version":3,"sources":["E:/chrisholloway/flicknplayreacttv/src/constants/functions.js"],"names":["Asset","Font","preloadFonts","preloadImages","cacheFonts","fonts","map","font","loadAsync","cacheImages","images","Object","values","image","Image","prefetch","fromModule","downloadAsync","loadAssetsAsync","fontAssets","imageAssets","Promise","all"],"mappings":";;;AACA,SAASA,KAAT,QAAsB,YAAtB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AAEA,OAAOC,YAAP;AACA,OAAOC,aAAP;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD;AAAA,SAAWA,KAAK,CAACC,GAAN,CAAU,UAACC,IAAD;AAAA,WAAUN,IAAI,CAACO,SAAL,CAAeD,IAAf,CAAV;AAAA,GAAV,CAAX;AAAA,CAAnB;;AAIA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAAY;AAC9B,SAAOC,MAAM,CAACC,MAAP,CAAcF,MAAd,EAAsBJ,GAAtB,CAA0B,UAACO,KAAD,EAAW;AAC1C,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOC,KAAK,CAACC,QAAN,CAAeF,KAAf,CAAP;AACD;;AAED,WAAOb,KAAK,CAACgB,UAAN,CAAiBH,KAAjB,EAAwBI,aAAxB,EAAP;AACD,GANM,CAAP;AAOD,CARD;;AAYA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhBC,UAAAA,UAFgB,GAEHf,UAAU,CAACF,YAAD,CAFP;AAGhBkB,UAAAA,WAHgB,GAGFX,WAAW,CAACN,aAAD,CAHT;AAAA,2CAMfkB,OAAO,CAACC,GAAR,8BAAgBH,UAAhB,sBAA+BC,WAA/B,GANe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AASA,eAAe;AACbhB,EAAAA,UAAU,EAAVA,UADa;AAEbK,EAAAA,WAAW,EAAXA,WAFa;AAGbS,EAAAA,eAAe,EAAfA;AAHa,CAAf","sourcesContent":["import { Image } from 'react-native';\r\nimport { Asset } from 'expo-asset';\r\nimport * as Font from 'expo-font';\r\n\r\nimport preloadFonts from './preloadFonts';\r\nimport preloadImages from './preloadImages';\r\n\r\n// cache fonts\r\n// /////////////////////////////////////////////////////////////////////////////\r\nconst cacheFonts = (fonts) => fonts.map((font) => Font.loadAsync(font));\r\n\r\n// cache images\r\n// /////////////////////////////////////////////////////////////////////////////\r\nconst cacheImages = (images) => {\r\n  return Object.values(images).map((image) => {\r\n    if (typeof image === 'string') {\r\n      return Image.prefetch(image);\r\n    }\r\n\r\n    return Asset.fromModule(image).downloadAsync();\r\n  });\r\n};\r\n\r\n// preload async\r\n// /////////////////////////////////////////////////////////////////////////////\r\nconst loadAssetsAsync = async () => {\r\n  // preload assets\r\n  const fontAssets = cacheFonts(preloadFonts);\r\n  const imageAssets = cacheImages(preloadImages);\r\n\r\n  // promise load all\r\n  return Promise.all([...fontAssets, ...imageAssets]);\r\n};\r\n\r\nexport default {\r\n  cacheFonts,\r\n  cacheImages,\r\n  loadAssetsAsync\r\n};\r\n"]},"metadata":{},"sourceType":"module"}