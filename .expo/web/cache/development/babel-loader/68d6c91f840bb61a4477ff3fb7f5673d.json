{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nexport default (function (Navigator, navigatorConfig) {\n  var _class, _temp;\n\n  return _temp = _class = function (_React$Component) {\n    _inherits(KeyboardAwareNavigator, _React$Component);\n\n    function KeyboardAwareNavigator() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, KeyboardAwareNavigator);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(KeyboardAwareNavigator)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n      _defineProperty(_assertThisInitialized(_this), \"_previouslyFocusedTextInput\", null);\n\n      _defineProperty(_assertThisInitialized(_this), \"_handleGestureBegin\", function () {\n        _this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedInput ? TextInput.State.currentlyFocusedInput() : TextInput.State.currentlyFocusedField();\n\n        if (_this._previouslyFocusedTextInput) {\n          TextInput.State.blurTextInput(_this._previouslyFocusedTextInput);\n        }\n\n        _this.props.onGestureBegin && _this.props.onGestureBegin();\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_handleGestureCanceled\", function () {\n        if (_this._previouslyFocusedTextInput) {\n          TextInput.State.focusTextInput(_this._previouslyFocusedTextInput);\n        }\n\n        _this.props.onGestureCanceled && _this.props.onGestureCanceled();\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_handleGestureEnd\", function () {\n        _this._previouslyFocusedTextInput = null;\n        _this.props.onGestureFinish && _this.props.onGestureFinish();\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_handleTransitionStart\", function (transitionProps, prevTransitionProps) {\n        if (transitionProps.index !== prevTransitionProps.index) {\n          var currentField = TextInput.State.currentlyFocusedInput ? TextInput.State.currentlyFocusedInput() : TextInput.State.currentlyFocusedField();\n\n          if (currentField) {\n            TextInput.State.blurTextInput(currentField);\n          }\n        }\n\n        var onTransitionStart = _this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n        onTransitionStart && onTransitionStart(transitionProps, prevTransitionProps);\n      });\n\n      return _this;\n    }\n\n    _createClass(KeyboardAwareNavigator, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(Navigator, _extends({}, this.props, {\n          onGestureBegin: this._handleGestureBegin,\n          onGestureCanceled: this._handleGestureCanceled,\n          onGestureEnd: this._handleGestureEnd,\n          onTransitionStart: this._handleTransitionStart\n        }));\n      }\n    }]);\n\n    return KeyboardAwareNavigator;\n  }(React.Component), _defineProperty(_class, \"router\", Navigator.router), _defineProperty(_class, \"navigationOptions\", Navigator.navigationOptions), _temp;\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAGA,gBAAe,UAACC,SAAD,EAAYC,eAAZ;EAAA;;EAAA;IAAA;;IACwC;MAAA;;MAAA;;MAAA;;MAAA;QAAAC;MAAA;;MAAA;;MAAAC,8EAGrB,IAHqB;;MAAAA,sEAK7B,YAAM;QAC1B,MAAKC,2BAAL,GAAmCC,SAAS,CAACC,KAAVD,CAAgBE,qBAAhBF,GAC/BA,SAAS,CAACC,KAAVD,CAAgBE,qBAAhBF,EAD+BA,GAE/BA,SAAS,CAACC,KAAVD,CAAgBG,qBAAhBH,EAFJ;;QAGA,IAAI,MAAKD,2BAAT,EAAsC;UACpCC,SAAS,CAACC,KAAVD,CAAgBI,aAAhBJ,CAA8B,MAAKD,2BAAnCC;QACD;;QACD,MAAKK,KAAL,CAAWC,cAAX,IAA6B,MAAKD,KAAL,CAAWC,cAAX,EAA7B;MAZiD;;MAAAR,yEAe1B,YAAM;QAC7B,IAAI,MAAKC,2BAAT,EAAsC;UACpCC,SAAS,CAACC,KAAVD,CAAgBO,cAAhBP,CAA+B,MAAKD,2BAApCC;QACD;;QACD,MAAKK,KAAL,CAAWG,iBAAX,IAAgC,MAAKH,KAAL,CAAWG,iBAAX,EAAhC;MAnBiD;;MAAAV,oEAsB/B,YAAM;QACxB,MAAKC,2BAAL,GAAmC,IAAnC;QACA,MAAKM,KAAL,CAAWI,eAAX,IAA8B,MAAKJ,KAAL,CAAWI,eAAX,EAA9B;MAxBiD;;MAAAX,yEA2B1B,UAACY,eAAD,EAAkBC,mBAAlB,EAA0C;QAIjE,IAAID,eAAe,CAACE,KAAhBF,KAA0BC,mBAAmB,CAACC,KAAlD,EAAyD;UACvD,IAAMC,YAAY,GAAGb,SAAS,CAACC,KAAVD,CAAgBE,qBAAhBF,GACjBA,SAAS,CAACC,KAAVD,CAAgBE,qBAAhBF,EADiBA,GAEjBA,SAAS,CAACC,KAAVD,CAAgBG,qBAAhBH,EAFJ;;UAGA,IAAIa,YAAJ,EAAkB;YAChBb,SAAS,CAACC,KAAVD,CAAgBI,aAAhBJ,CAA8Ba,YAA9Bb;UACD;QACF;;QAED,IAAMc,iBAAiB,GACrB,MAAKT,KAAL,CAAWS,iBAAX,IAAgClB,eAAe,CAACkB,iBADlD;QAEAA,iBAAiB,IACfA,iBAAiB,CAACJ,eAAD,EAAkBC,mBAAlB,CADnBG;MA1CiD;;MAAA;IAAA;;IADxC;MAAA;MAAA,yBA+CF;QACP,OACEpB,oBAACC,SAAD,eACM,KAAKU,KADX;UAEEC,cAAc,EAAE,KAAKS,mBAFvB;UAGEP,iBAAiB,EAAE,KAAKQ,sBAH1B;UAIEC,YAAY,EAAE,KAAKC,iBAJrB;UAKEJ,iBAAiB,EAAE,KAAKK;QAL1B,GADF;MASD;IAzDU;;IAAA;EAAA,EACwBzB,KAAK,CAAC0B,SAD9B,qCAEKzB,SAAS,CAAC0B,MAFf,gDAGgB1B,SAAS,CAAC2B,iBAH1B;AAAf","names":["React","Navigator","navigatorConfig","args","_defineProperty","_previouslyFocusedTextInput","TextInput","State","currentlyFocusedInput","currentlyFocusedField","blurTextInput","props","onGestureBegin","focusTextInput","onGestureCanceled","onGestureFinish","transitionProps","prevTransitionProps","index","currentField","onTransitionStart","_handleGestureBegin","_handleGestureCanceled","onGestureEnd","_handleGestureEnd","_handleTransitionStart","Component","router","navigationOptions"],"sources":["createKeyboardAwareNavigator.js"],"sourcesContent":["import * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default (Navigator, navigatorConfig) =>\n  class KeyboardAwareNavigator extends React.Component {\n    static router = Navigator.router;\n    static navigationOptions = Navigator.navigationOptions;\n    _previouslyFocusedTextInput = null;\n\n    _handleGestureBegin = () => {\n      this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedInput\n        ? TextInput.State.currentlyFocusedInput()\n        : TextInput.State.currentlyFocusedField();\n      if (this._previouslyFocusedTextInput) {\n        TextInput.State.blurTextInput(this._previouslyFocusedTextInput);\n      }\n      this.props.onGestureBegin && this.props.onGestureBegin();\n    };\n\n    _handleGestureCanceled = () => {\n      if (this._previouslyFocusedTextInput) {\n        TextInput.State.focusTextInput(this._previouslyFocusedTextInput);\n      }\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n    };\n\n    _handleGestureEnd = () => {\n      this._previouslyFocusedTextInput = null;\n      this.props.onGestureFinish && this.props.onGestureFinish();\n    };\n\n    _handleTransitionStart = (transitionProps, prevTransitionProps) => {\n      // TODO: We should not even have received the transition start event\n      // in the case where the index did not change, I believe. We\n      // should revisit this after 2.0 release.\n      if (transitionProps.index !== prevTransitionProps.index) {\n        const currentField = TextInput.State.currentlyFocusedInput\n          ? TextInput.State.currentlyFocusedInput()\n          : TextInput.State.currentlyFocusedField();\n        if (currentField) {\n          TextInput.State.blurTextInput(currentField);\n        }\n      }\n\n      const onTransitionStart =\n        this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n      onTransitionStart &&\n        onTransitionStart(transitionProps, prevTransitionProps);\n    };\n\n    render() {\n      return (\n        <Navigator\n          {...this.props}\n          onGestureBegin={this._handleGestureBegin}\n          onGestureCanceled={this._handleGestureCanceled}\n          onGestureEnd={this._handleGestureEnd}\n          onTransitionStart={this._handleTransitionStart}\n        />\n      );\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}