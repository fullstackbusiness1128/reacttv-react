{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedText from \"../../Typography/AnimatedText\";\n\nvar InputLabel = function InputLabel(props) {\n  var parentState = props.parentState,\n      labelBackground = props.labelBackground;\n  var _props$labelProps = props.labelProps,\n      label = _props$labelProps.label,\n      error = _props$labelProps.error,\n      onLayoutAnimatedText = _props$labelProps.onLayoutAnimatedText,\n      hasActiveOutline = _props$labelProps.hasActiveOutline,\n      activeColor = _props$labelProps.activeColor,\n      placeholderStyle = _props$labelProps.placeholderStyle,\n      baseLabelTranslateX = _props$labelProps.baseLabelTranslateX,\n      baseLabelTranslateY = _props$labelProps.baseLabelTranslateY,\n      font = _props$labelProps.font,\n      fontSize = _props$labelProps.fontSize,\n      fontWeight = _props$labelProps.fontWeight,\n      placeholderOpacity = _props$labelProps.placeholderOpacity,\n      wiggleOffsetX = _props$labelProps.wiggleOffsetX,\n      labelScale = _props$labelProps.labelScale,\n      topPosition = _props$labelProps.topPosition,\n      paddingOffset = _props$labelProps.paddingOffset,\n      placeholderColor = _props$labelProps.placeholderColor,\n      errorColor = _props$labelProps.errorColor,\n      labelTranslationXOffset = _props$labelProps.labelTranslationXOffset;\n  var labelTranslationX = {\n    transform: [{\n      translateX: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0]\n      })\n    }]\n  };\n\n  var labelStyle = _objectSpread({}, font, {\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    transform: [{\n      translateX: parentState.error.interpolate({\n        inputRange: [0, 0.5, 1],\n        outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0]\n      })\n    }, {\n      translateY: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateY, 0]\n      })\n    }, {\n      scale: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [labelScale, 1]\n      })\n    }]\n  });\n\n  return label ? React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.labelContainer, {\n      opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1\n    }, labelTranslationX]\n  }, labelBackground === null || labelBackground === void 0 ? void 0 : labelBackground({\n    parentState: parentState,\n    labelStyle: labelStyle,\n    labelProps: props.labelProps\n  }), React.createElement(AnimatedText, {\n    onLayout: onLayoutAnimatedText,\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset || {}, {\n      color: activeColor,\n      opacity: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [hasActiveOutline ? 1 : 0, 0]\n      })\n    }],\n    numberOfLines: 1\n  }, label), React.createElement(AnimatedText, {\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset, {\n      color: error && errorColor ? errorColor : placeholderColor,\n      opacity: placeholderOpacity\n    }],\n    numberOfLines: 1\n  }, label)) : null;\n};\n\nvar styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3\n  }\n});\nexport default InputLabel;","map":{"version":3,"mappings":"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","names":["React","AnimatedText","InputLabel","props","parentState","labelBackground","labelProps","label","error","onLayoutAnimatedText","hasActiveOutline","activeColor","placeholderStyle","baseLabelTranslateX","baseLabelTranslateY","font","fontSize","fontWeight","placeholderOpacity","wiggleOffsetX","labelScale","topPosition","paddingOffset","placeholderColor","errorColor","labelTranslationXOffset","labelTranslationX","transform","translateX","labeled","interpolate","inputRange","outputRange","labelStyle","value","translateY","scale","Animated","View","pointerEvents","style","StyleSheet","absoluteFill","styles","labelContainer","opacity","focused","labelLayout","measured","onLayout","top","color","numberOfLines","create","zIndex"],"sources":["InputLabel.tsx"],"sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\n\nimport type { InputLabelProps } from '../types';\n\nconst InputLabel = (props: InputLabelProps) => {\n  const { parentState, labelBackground } = props;\n\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n    errorColor,\n    labelTranslationXOffset,\n  } = props.labelProps;\n\n  const labelTranslationX = {\n    transform: [\n      {\n        // Offset label scale since RN doesn't support transform origin\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0],\n        }),\n      },\n    ],\n  };\n\n  const labelStyle = {\n    ...font,\n    fontSize,\n    fontWeight,\n    transform: [\n      {\n        // Wiggle the label when there's an error\n        translateX: parentState.error.interpolate({\n          inputRange: [0, 0.5, 1],\n          outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0],\n        }),\n      },\n      {\n        // Move label to top\n        translateY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateY, 0],\n        }),\n      },\n      {\n        // Make label smaller\n        scale: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [labelScale, 1],\n        }),\n      },\n    ],\n  };\n\n  return label ? (\n    // Position colored placeholder and gray placeholder on top of each other and crossfade them\n    // This gives the effect of animating the color, but allows us to use native driver\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[\n        StyleSheet.absoluteFill,\n        styles.labelContainer,\n        {\n          opacity:\n            // Hide the label in minimized state until we measure it's width\n            parentState.value || parentState.focused\n              ? parentState.labelLayout.measured\n                ? 1\n                : 0\n              : 1,\n        },\n        labelTranslationX,\n      ]}\n    >\n      {labelBackground?.({\n        parentState,\n        labelStyle,\n        labelProps: props.labelProps,\n      })}\n      <AnimatedText\n        onLayout={onLayoutAnimatedText}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset || {},\n          {\n            color: activeColor,\n            opacity: parentState.labeled.interpolate({\n              inputRange: [0, 1],\n              outputRange: [hasActiveOutline ? 1 : 0, 0],\n            }),\n          },\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </AnimatedText>\n      <AnimatedText\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset,\n          {\n            color: error && errorColor ? errorColor : placeholderColor,\n            opacity: placeholderOpacity,\n          },\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </AnimatedText>\n    </Animated.View>\n  ) : null;\n};\n\nconst styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3,\n  },\n});\n\nexport default InputLabel;\n"]},"metadata":{},"sourceType":"module"}