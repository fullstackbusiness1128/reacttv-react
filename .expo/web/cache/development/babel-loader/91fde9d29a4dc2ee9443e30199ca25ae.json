{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Styles from \"./Styles\";\nimport ToggleSwitch from \"./VideoPlayerComponents/components/Switch\";\nimport CheckBox from \"./VideoPlayerComponents/components/CheckBox\";\nimport PropTypes from 'prop-types';\nimport Fonts from \"./VideoPlayerComponents/components/Fonts\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar VideoSettings = function (_Component) {\n  _inherits(VideoSettings, _Component);\n\n  function VideoSettings(props) {\n    var _this;\n\n    _classCallCheck(this, VideoSettings);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VideoSettings).call(this, props));\n\n    _this.getOrientation = function () {\n      if (_this.refs.rootView) {\n        if (Dimensions.get('window').width < Dimensions.get('window').height) {\n          _this.setState({\n            currentOreintation: 'portrait'\n          });\n        } else {\n          _this.setState({\n            currentOreintation: 'landscape'\n          });\n        }\n      }\n    };\n\n    _this.renderOptions = function () {\n      return _this.state.qualityArray.map(function (item, index) {\n        return _jsxs(View, {\n          style: Styles.rowView,\n          children: [_jsx(CheckBox, {\n            style: {},\n            onChange: function onChange() {\n              _this.props.IsQualityArray ? _this.props.IsQualityArray(item, index) : [_this.setState({\n                boxSelected: index\n              }), _this.setState({\n                autoConnectionStatus: false\n              })];\n            },\n            checked: _this.state.boxSelected == index ? true : false,\n            label: 'hide'\n          }), _jsx(View, {\n            style: {\n              marginRight: 20\n            },\n            children: _jsx(Text, {\n              style: [Styles.rowTitleText, {}],\n              children: item\n            })\n          })]\n        });\n      });\n    };\n\n    _this.renderLandscapeOption = function () {\n      return _this.state.qualityArray.map(function () {\n        return _jsx(View, {\n          style: {\n            flexDirection: 'row'\n          },\n          children: _jsxs(View, {\n            style: [Styles.rowView, {\n              marginTop: 0,\n              paddingLeft: 25,\n              paddingRight: 25\n            }],\n            children: [_jsx(CheckBox, {\n              style: {\n                marginRight: 5\n              },\n              onChange: function onChange() {\n                _this.props.IsQualityArray ? _this.props.IsQualityArray(item, index) : [_this.setState({\n                  boxSelected: index\n                }), _this.setState({\n                  autoConnectionStatus: false\n                })];\n              },\n              checked: _this.state.boxSelected == index ? true : false,\n              label: 'hide'\n            }), _jsx(Text, {\n              style: [Styles.rowTitleText, {\n                flex: 1\n              }],\n              children: item\n            })]\n          })\n        });\n      });\n    };\n\n    _this.state = {\n      qualityArray: _this.props.qualityArray || ['320p', '480p', '720p', '180p'],\n      autoConnectionStatus: true,\n      boxSelected: _this.props.boxSelected || null,\n      rotationText: '',\n      rotationIndex: 1,\n      rotationStatus: false,\n      isScreenRotation: false,\n      currentOreintation: '',\n      infoAlert: false,\n      infoAlertMesg: '',\n      infoKey: '',\n      apiCalled: false,\n      isLoading: false,\n      changeQuality: '',\n      changeOrientation: ''\n    };\n    return _this;\n  }\n\n  _createClass(VideoSettings, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.getOrientation();\n      Dimensions.addEventListener('change', function () {\n        _this2.getOrientation();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return this.state.isScreenRotation == false ? _jsx(Modal, {\n        animationType: \"slide\",\n        transparent: true,\n        visible: this.props.isOpen,\n        supportedOrientations: ['portrait', 'landscape', 'portrait-upside-down', 'landscape-left', 'landscape-right'],\n        onRequestClose: function onRequestClose() {\n          _this3.props.onVideoSettingsClose(false, _this3.state.changeOrientation, _this3.state.changeQuality);\n        },\n        children: _jsxs(SafeAreaView, {\n          ref: \"rootView\",\n          style: Styles.container,\n          children: [_jsx(StatusBar, {\n            hidden: false,\n            translucent: true,\n            backgroundColor: 'rgba(25,54,81,0.9)'\n          }), _jsxs(ScrollView, {\n            style: {\n              flex: 1\n            },\n            children: [_jsxs(View, {\n              style: Styles.headerView,\n              children: [_jsx(View, {\n                style: Styles.innnerHeader,\n                children: _jsx(Text, {\n                  style: Styles.headerTxt,\n                  children: \"Media Quality\"\n                })\n              }), _jsx(View, {\n                style: Styles.crossBtnView,\n                children: _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    _this3.props.onVideoSettingsClose(false, _this3.state.changeOrientation, _this3.state.changeQuality);\n                  },\n                  hitSlop: {\n                    top: 5,\n                    bottom: 5,\n                    left: 5,\n                    right: 5\n                  },\n                  children: _jsx(Image, {\n                    source: require(\"./VideoPlayerComponents/components/images/Close.png\")\n                  })\n                })\n              })]\n            }), _jsxs(View, {\n              style: Styles.secondView,\n              children: [_jsxs(View, {\n                style: [Styles.rowView, {\n                  marginTop: 5\n                }],\n                children: [_jsx(ToggleSwitch, {\n                  value: this.state.autoConnectionStatus || this.props.autoConnectionStatus,\n                  onValueChange: function onValueChange() {\n                    _this3.props.IsAutoConnectionStatus ? _this3.props.IsAutoConnectionStatus() : [_this3.setState({\n                      boxSelected: null\n                    }), _this3.setState({\n                      autoConnectionStatus: !_this3.state.autoConnectionStatus\n                    })];\n                  }\n                }), _jsx(Text, {\n                  style: [Styles.rowTitleText, {\n                    flex: 1,\n                    marginLeft: 10,\n                    fontSize: Fonts.size.normal\n                  }],\n                  children: \"Auto based on your connection\"\n                })]\n              }), _jsx(View, {\n                style: Styles.textView,\n                children: _jsx(Text, {\n                  style: Styles.rowText,\n                  children: \"If you are having connection issues, you can force the app to always display videos in these resolutions.\"\n                })\n              }), this.renderOptions()]\n            })]\n          })]\n        })\n      }) : this.renderElement();\n    }\n  }, {\n    key: \"renderElement\",\n    value: function renderElement() {\n      var _this4 = this;\n\n      return _jsx(Modal, {\n        animationType: \"slide\",\n        transparent: true,\n        visible: this.props.isOpen,\n        supportedOrientations: ['portrait', 'landscape', 'portrait-upside-down', 'landscape-left', 'landscape-right'],\n        onRequestClose: function onRequestClose() {\n          _this4.props.onVideoSettingsClose(false, _this4.state.changeOrientation, _this4.state.changeQuality);\n        },\n        children: _jsxs(SafeAreaView, {\n          ref: \"rootView\",\n          style: Styles.container,\n          children: [_jsx(StatusBar, {\n            hidden: false,\n            translucent: true,\n            backgroundColor: 'rgba(25,54,81,0.9)'\n          }), \"// \", _jsx(Loader, {\n            loading: this.state.isLoading\n          }), \"//\", ' ', _jsxs(ScrollView, {\n            style: {\n              flex: 1\n            },\n            children: [_jsxs(View, {\n              style: [Styles.headerView, {\n                marginTop: 20\n              }],\n              children: [_jsx(View, {\n                style: [Styles.innnerHeader, {\n                  marginLeft: 25\n                }],\n                children: _jsx(Text, {\n                  style: Styles.headerTxt,\n                  children: \"Media Quality\"\n                })\n              }), _jsx(View, {\n                style: [Styles.crossBtnView, {\n                  marginRight: 25\n                }],\n                children: _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    _this4.props.onVideoSettingsClose(false, _this4.state.changeOrientation, _this4.state.changeQuality);\n                  },\n                  hitSlop: {\n                    top: 5,\n                    bottom: 5,\n                    left: 5,\n                    right: 5\n                  },\n                  children: _jsx(Image, {\n                    source: require(\"./VideoPlayerComponents/components/images/Close.png\")\n                  })\n                })\n              })]\n            }), _jsxs(View, {\n              style: [Styles.secondView, {\n                marginTop: 20\n              }],\n              children: [_jsxs(View, {\n                style: [Styles.rowView, {\n                  marginTop: 5,\n                  paddingLeft: 25,\n                  paddingRight: 25\n                }],\n                children: [_jsx(ToggleSwitch, {\n                  value: this.state.autoConnectionStatus || this.props.autoConnectionStatus,\n                  onValueChange: function onValueChange() {\n                    _this4.setState({\n                      boxSelected: null\n                    });\n\n                    _this4.props.IsAutoConnectionStatus ? _this4.props.IsAutoConnectionStatus() : _this4.setState({\n                      autoConnectionStatus: !_this4.state.autoConnectionStatus\n                    });\n                  }\n                }), _jsx(Text, {\n                  style: [Styles.rowTitleText, {\n                    flex: 1,\n                    marginLeft: 10,\n                    fontSize: Fonts.size.normal\n                  }],\n                  children: \"Auto based on your connection\"\n                })]\n              }), _jsx(View, {\n                style: [Styles.textView, {\n                  marginTop: 10\n                }],\n                children: _jsx(Text, {\n                  style: [Styles.rowText, {\n                    marginHorizontal: 25\n                  }],\n                  children: \"If you are having connection issues, you can force the app to always display videos in these resolutions\"\n                })\n              }), this.renderLandscapeOption()]\n            })]\n          })]\n        })\n      });\n    }\n  }]);\n\n  return VideoSettings;\n}(Component);\n\nVideoSettings.propTypes = {\n  isOpen: PropTypes.bool,\n  openFromVideo: PropTypes.string\n};\nexport default VideoSettings;","map":{"version":3,"sources":["/home/codenomad/Documents/flicknplayreacttv/node_modules/react-native-video-players/src/VideoSettings.js"],"names":["React","Component","Styles","ToggleSwitch","CheckBox","PropTypes","Fonts","VideoSettings","props","getOrientation","refs","rootView","Dimensions","get","width","height","setState","currentOreintation","renderOptions","state","qualityArray","map","item","index","rowView","IsQualityArray","boxSelected","autoConnectionStatus","marginRight","rowTitleText","renderLandscapeOption","flexDirection","marginTop","paddingLeft","paddingRight","flex","rotationText","rotationIndex","rotationStatus","isScreenRotation","infoAlert","infoAlertMesg","infoKey","apiCalled","isLoading","changeQuality","changeOrientation","addEventListener","isOpen","onVideoSettingsClose","container","headerView","innnerHeader","headerTxt","crossBtnView","top","bottom","left","right","require","secondView","IsAutoConnectionStatus","marginLeft","fontSize","size","normal","textView","rowText","renderElement","marginHorizontal","propTypes","bool","openFromVideo","string"],"mappings":"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","sourcesContent":["//import liraries\nimport React, { Component } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  Image,\n  Modal,\n  ScrollView,\n  SafeAreaView,\n  Dimensions,\n  StatusBar,\n} from 'react-native';\nimport Styles from './Styles';\nimport ToggleSwitch from './VideoPlayerComponents/components/Switch';\nimport CheckBox from './VideoPlayerComponents/components/CheckBox';\nimport PropTypes from 'prop-types';\nimport Fonts from './VideoPlayerComponents/components/Fonts';\n\n// create a component\nclass VideoSettings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      qualityArray: this.props.qualityArray || ['320p', '480p', '720p', '180p'],\n      autoConnectionStatus: true,\n      boxSelected: this.props.boxSelected || null,\n      rotationText: '',\n      rotationIndex: 1,\n      rotationStatus: false,\n      isScreenRotation: false,\n      currentOreintation: '',\n      infoAlert: false,\n      infoAlertMesg: '',\n      infoKey: '',\n      apiCalled: false,\n      isLoading: false,\n      changeQuality: '',\n      changeOrientation: '',\n    };\n  }\n\n  /* Life cycles methods. */\n  componentDidMount() {\n    this.getOrientation();\n    Dimensions.addEventListener('change', () => {\n      this.getOrientation();\n    });\n  }\n\n  getOrientation = () => {\n    if (this.refs.rootView) {\n      if (Dimensions.get('window').width < Dimensions.get('window').height) {\n        this.setState({ currentOreintation: 'portrait' });\n        \n      } else {\n        this.setState({ currentOreintation: 'landscape' });\n\n      }\n    }\n  };\n\n  renderOptions = () => {\n    return this.state.qualityArray.map((item, index) => {\n      return (\n        <View style={Styles.rowView}>\n          <CheckBox\n            style={{}}\n            onChange={() => {\n        \n              this.props.IsQualityArray\n                ? this.props.IsQualityArray(item, index)\n                : [this.setState({ boxSelected: index }), this.setState({ autoConnectionStatus: false })]\n            }}\n            checked={this.state.boxSelected == index ? true : false}\n            label={'hide'}\n          />\n          <View style={{ marginRight: 20 }}>\n            <Text style={[Styles.rowTitleText, {}]}>{item}</Text>\n          </View>\n        </View>\n      );\n    });\n  };\n\n  render() {\n    /** Modal screen for portrait **/\n    return this.state.isScreenRotation == false ? (\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={this.props.isOpen}\n        supportedOrientations={[\n          'portrait',\n          'landscape',\n          'portrait-upside-down',\n          'landscape-left',\n          'landscape-right',\n        ]}\n        onRequestClose={() => {\n          this.props.onVideoSettingsClose(\n            false,\n            this.state.changeOrientation,\n            this.state.changeQuality,\n          );\n        }}>\n        <SafeAreaView ref=\"rootView\" style={Styles.container}>\n          <StatusBar\n            hidden={false}\n            translucent={true}\n            backgroundColor={'rgba(25,54,81,0.9)'}\n          />\n          <ScrollView style={{ flex: 1 }}>\n            {/* ============= Info popup ============== */}\n\n            <View style={Styles.headerView}>\n              <View style={Styles.innnerHeader}>\n                <Text style={Styles.headerTxt}>Media Quality</Text>\n              </View>\n              <View style={Styles.crossBtnView}>\n                <TouchableOpacity\n                  onPress={() => {\n                    this.props.onVideoSettingsClose(\n                      false,\n                      this.state.changeOrientation,\n                      this.state.changeQuality,\n                    );\n                  }}\n                  hitSlop={{ top: 5, bottom: 5, left: 5, right: 5 }}>\n                  <Image\n                    source={require('./VideoPlayerComponents/components/images/Close.png')}></Image>\n                </TouchableOpacity>\n              </View>\n            </View>\n\n            {/* ============= Auto based connection view ============== */}\n            <View style={Styles.secondView}>\n              <View style={[Styles.rowView, { marginTop: 5 }]}>\n                <ToggleSwitch\n                  value={\n                    this.state.autoConnectionStatus ||\n                    this.props.autoConnectionStatus\n                  }\n                  onValueChange={() => {\n\n                    this.props.IsAutoConnectionStatus\n                      ? this.props.IsAutoConnectionStatus()\n                      : [ this.setState({ boxSelected: null }),this.setState({\n                        autoConnectionStatus: !this.state\n                          .autoConnectionStatus,\n                      })]\n                  }}\n                />\n                <Text\n                  style={[\n                    Styles.rowTitleText,\n                    {\n                      flex: 1,\n                      marginLeft: 10,\n                      fontSize: Fonts.size.normal,\n                      // fontFamily: Fonts.type.Bold,\n                    },\n                  ]}>\n                  Auto based on your connection\n                </Text>\n              </View>\n\n              {/* ============= Different video resolution view ============== */}\n              <View style={Styles.textView}>\n                <Text style={Styles.rowText}>\n                  If you are having connection issues, you can force the app to\n                  always display videos in these resolutions.\n                </Text>\n              </View>\n              {this.renderOptions()}\n            </View>\n          </ScrollView>\n        </SafeAreaView>\n      </Modal>\n    ) : (\n        this.renderElement()\n      );\n  }\n\n  renderLandscapeOption = () => {\n    return this.state.qualityArray.map(() => {\n      return (\n        <View style={{ flexDirection: 'row' }}>\n          <View\n            style={[\n              Styles.rowView,\n              { marginTop: 0, paddingLeft: 25, paddingRight: 25 },\n            ]}>\n            <CheckBox\n              style={{ marginRight: 5 }}\n              onChange={() => {\n                this.props.IsQualityArray\n                  ? this.props.IsQualityArray(item, index)\n                  : [this.setState({ boxSelected: index }),this.setState({ autoConnectionStatus: false })]\n              }}\n              checked={this.state.boxSelected == index ? true : false}\n              label={'hide'}\n            />\n            <Text style={[Styles.rowTitleText, { flex: 1 }]}>{item}</Text>\n          </View>\n        </View>\n      );\n    });\n  };\n  /** Modal screen for landscape **/\n  renderElement() {\n    return (\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={this.props.isOpen}\n        supportedOrientations={[\n          'portrait',\n          'landscape',\n          'portrait-upside-down',\n          'landscape-left',\n          'landscape-right',\n        ]}\n        onRequestClose={() => {\n          this.props.onVideoSettingsClose(\n            false,\n            this.state.changeOrientation,\n            this.state.changeQuality,\n          );\n        }}>\n        <SafeAreaView ref=\"rootView\" style={Styles.container}>\n          <StatusBar\n            hidden={false}\n            translucent={true}\n            backgroundColor={'rgba(25,54,81,0.9)'}\n          />\n          // <Loader loading={this.state.isLoading} />\n          //{' '}\n          <ScrollView style={{ flex: 1 }}>\n            {/* ============= Header View ============== */}\n            <View style={[Styles.headerView, { marginTop: 20 }]}>\n              <View style={[Styles.innnerHeader, { marginLeft: 25 }]}>\n                <Text style={Styles.headerTxt}>Media Quality</Text>\n              </View>\n              <View style={[Styles.crossBtnView, { marginRight: 25 }]}>\n                <TouchableOpacity\n                  onPress={() => {\n                    this.props.onVideoSettingsClose(\n                      false,\n                      this.state.changeOrientation,\n                      this.state.changeQuality,\n                    );\n                  }}\n                  hitSlop={{ top: 5, bottom: 5, left: 5, right: 5 }}>\n                  <Image\n                    source={require('./VideoPlayerComponents/components/images/Close.png')}></Image>\n                </TouchableOpacity>\n              </View>\n            </View>\n\n            {/* ============= Auto connection ============== */}\n            <View style={[Styles.secondView, { marginTop: 20 }]}>\n              <View\n                style={[\n                  Styles.rowView,\n                  { marginTop: 5, paddingLeft: 25, paddingRight: 25 },\n                ]}>\n                <ToggleSwitch\n                  value={\n                    this.state.autoConnectionStatus ||\n                    this.props.autoConnectionStatus\n                  }\n                  onValueChange={() => {\n                    this.setState({ boxSelected: null })\n                    this.props.IsAutoConnectionStatus\n                      ? this.props.IsAutoConnectionStatus()\n                      : this.setState({\n                        autoConnectionStatus: !this.state\n                          .autoConnectionStatus,\n                      });\n                  }}\n                />\n                <Text\n                  style={[\n                    Styles.rowTitleText,\n                    {\n                      flex: 1,\n                      marginLeft: 10,\n                      fontSize: Fonts.size.normal,\n                      // fontFamily: Fonts.type.Bold,\n                    },\n                  ]}>\n                  Auto based on your connection\n                </Text>\n              </View>\n\n              <View style={[Styles.textView, { marginTop: 10 }]}>\n                <Text style={[Styles.rowText, { marginHorizontal: 25 }]}>\n                  If you are having connection issues, you can force the app to\n                  always display videos in these resolutions\n                </Text>\n              </View>\n\n              {this.renderLandscapeOption()}\n            </View>\n          </ScrollView>\n        </SafeAreaView>\n      </Modal>\n    );\n  }\n}\n\nVideoSettings.propTypes = {\n  isOpen: PropTypes.bool,\n  openFromVideo: PropTypes.string,\n};\n\nexport default VideoSettings;\n"]},"metadata":{},"sourceType":"module"}