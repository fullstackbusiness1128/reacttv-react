{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  border-radius: 4px;\\n  cursor: pointer;\\n  position: relative;\\n\\n  a {\\n    border-radius: 4px;\\n    \", \"\\n    box-shadow: rgb(0 0 0 / 69%) 0px 26px 30px -10px,\\n      rgb(0 0 0 / 73%) 0px 16px 10px -10px;\\n    cursor: pointer;\\n    display: block;\\n    position: relative;\\n    padding: 4px;\\n    img {\\n      width: 100%;\\n      height: 500px;\\n    }\\n    &:hover {\\n      padding: 0;\\n      border: 4px solid rgba(249, 249, 249, 0.8);\\n      transition-duration: 300ms;\\n    }\\n  },\\n  \\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  margin-top: 20px;\\n  \", \"\\n\\n  & > button {\\n    opacity: 0;\\n\\n    height: 100%;\\n    width: 5vw;\\n    z-index: 1;\\n  }\\n\\n  &:hover {\\n    & > button {\\n      opacity: 1;\\n      \", \"\\n      transition: opacity 0.4s ease 0s;\\n    }\\n  }\\n\\n  ul li button {\\n    &:before {\\n      font-size: 10px;\\n      color: rgb(150, 158, 171);\\n    }\\n  }\\n\\n  li.slick-active button:before {\\n    color: white;\\n  }\\n\\n  .slick-list {\\n    overflow: initial;\\n  }\\n  .slick-prev {\\n    left: -60px;\\n  }\\n  .slick-next {\\n    right: -60px;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { colors, device, images } from \"../constants\";\nimport Slider from \"react-slick\";\nimport Icon from \"@expo/vector-icons/Entypo\";\nimport styled from \"styled-components/native\";\nimport example1 from \"../assets/slider-badag.jpg\";\nimport example2 from \"../assets/slider-badging.jpg\";\nimport example3 from \"../assets/slider-scale.jpg\";\nimport example4 from \"../assets/slider-scales.jpg\";\nimport Button from \"./Button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar myIcon = _jsx(Icon, {\n  name: \"star\",\n  size: 25,\n  color: \"#ffd504\"\n});\n\nvar categoriesData = [{\n  id: 1,\n  image: 'logoDisney'\n}, {\n  id: 2,\n  image: 'logoPixar'\n}, {\n  id: 3,\n  image: 'logoMarvel'\n}, {\n  id: 4,\n  image: 'logoStarWars'\n}, {\n  id: 5,\n  image: 'logoNatGeo'\n}];\n\nvar Categories = function Categories(_ref) {\n  var dataset1 = _ref.dataset1;\n  console.log(dataset1);\n  var settings = {\n    dots: true,\n    infinite: true,\n    speed: 400,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    autoplay: true\n  };\n  var isCarousel = React.useRef(null);\n  var length = categoriesData.length;\n  var bgWidth = Math.ceil((device.width - 16 - length * 18) / length);\n  return _jsx(View, {\n    children: _jsx(Carousel, _objectSpread({}, settings, {\n      children: dataset1.map(function (data, index) {\n        return _jsx(View, {\n          children: _jsx(Wrap, {\n            children: _jsxs(\"a\", {\n              alt: \"image\",\n              children: [_jsxs(View, {\n                style: styles.bannertext,\n                children: [_jsxs(Text, {\n                  style: styles.texts,\n                  children: [myIcon, data.rating, \"/10\"]\n                }), _jsx(Text, {\n                  style: styles.bannerheading,\n                  children: data.name\n                }), _jsx(Text, {\n                  style: styles.texts,\n                  children: data.description\n                }), _jsx(Button, {\n                  style: styles.watchnow,\n                  children: _jsx(Text, {\n                    style: {\n                      color: 'white'\n                    },\n                    children: \"Watch Now \"\n                  })\n                })]\n              }), _jsx(Image, {\n                source: {\n                  uri: data.backdrop\n                },\n                alt: \"\"\n              })]\n            })\n          })\n        }, index);\n      })\n    }))\n  });\n};\n\nvar Carousel = styled(Slider)(_templateObject(), \"\", \"\");\nvar Wrap = styled.View(_templateObject2(), \"\");\nvar styles = {\n  bannertext: {\n    position: 'absolute',\n    height: 500,\n    paddingTop: 10,\n    paddingHorizontal: 40,\n    backgroundColor: '#00000047',\n    color: 'white'\n  },\n  watchnow: {\n    textAlign: 'left',\n    justifyContent: 'left',\n    backgroundColor: '#f65f54',\n    color: 'white',\n    borderRadius: '30px',\n    width: 200\n  },\n  texts: {\n    fontSize: 20,\n    fontFamily: 'Roboto Condensed',\n    letterSpacing: '1px'\n  },\n  bannerheading: {\n    fontSize: 40,\n    fontFamily: 'Roboto Condensed',\n    marginTop: 10,\n    marginBottom: 10\n  }\n};\nexport default Categories;","map":{"version":3,"sources":["C:/Users/dev/Documents/react/flicknplayreacttv-main/src/components/Categories.js"],"names":["React","colors","device","images","Slider","Icon","styled","example1","example2","example3","example4","Button","myIcon","categoriesData","id","image","Categories","dataset1","console","log","settings","dots","infinite","speed","slidesToShow","slidesToScroll","autoplay","isCarousel","useRef","length","bgWidth","Math","ceil","width","map","data","index","styles","bannertext","texts","rating","bannerheading","name","description","watchnow","color","uri","backdrop","Carousel","Wrap","View","position","height","paddingTop","paddingHorizontal","backgroundColor","textAlign","justifyContent","borderRadius","fontSize","fontFamily","letterSpacing","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Image, StyleSheet, TouchableOpacity, View, Text } from 'react-native';\nimport { colors, device, images } from '../constants';\n// import Carousel from 'react-native-snap-carousel';\n// import './icons/style.css'\n// import \"slick-carousel/slick/slick.css\";\n// import \"slick-carousel/slick/slick-theme.css\";\nimport Slider from \"react-slick\";\nimport Icon from 'react-native-vector-icons/Entypo';\nimport styled from \"styled-components/native\";\nimport example1 from '../assets/slider-badag.jpg'\nimport example2 from '../assets/slider-badging.jpg'\nimport example3 from '../assets/slider-scale.jpg'\nimport example4 from '../assets/slider-scales.jpg'\n// icons\n// import SvgCategoryBackground from './icons/Svg.CategoryBackground';\n// import CarouselCardItem, { SLIDER_WIDTH, ITEM_WIDTH } from './CarouselCardItem'\nimport Button from './Button';\nconst myIcon = <Icon name=\"star\" size={25} color=\"#ffd504\" />;\n// data\nconst categoriesData = [\n  { id: 1, image: 'logoDisney' },\n  { id: 2, image: 'logoPixar' },\n  { id: 3, image: 'logoMarvel' },\n  { id: 4, image: 'logoStarWars' },\n  { id: 5, image: 'logoNatGeo' }\n];\n\n\nconst Categories = ({ dataset1 }) => {\n  console.log(dataset1)\n  let settings = {\n    dots: true,\n    infinite: true,\n    speed: 400,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    autoplay: true,\n  };\n  const isCarousel = React.useRef(null)\n  const { length } = categoriesData;\n  const bgWidth = Math.ceil((device.width - 16 - length * 18) / length);\n\n  return (\n    <View>\n      <Carousel {...settings}>\n        {/* update the settings by passing the setting object as props */}\n        {\n          dataset1.map((data, index) => (\n            <View key={index}>\n              <Wrap >\n\n                <a alt=\"image\">\n                  <View style={styles.bannertext}>\n                    <Text style={styles.texts}>{myIcon}{data.rating}/10</Text>\n                    <Text style={styles.bannerheading}>{data.name}</Text>\n                    <Text style={styles.texts}>{data.description}</Text>\n                    <Button style={styles.watchnow}><Text style={{ color: 'white' }}>Watch Now </Text></Button>\n                  </View>\n                  <Image source={{ uri: data.backdrop }} alt=\"\" />\n                </a>\n              </Wrap>\n            </View>\n          )\n\n          )\n        }\n\n      </Carousel>\n    </View>\n  )\n};\nconst Carousel = styled(Slider)`\n  margin-top: 20px;\n  ${\"\" /* Overwriting the styles */}\n\n  & > button {\n    opacity: 0;\n\n    height: 100%;\n    width: 5vw;\n    z-index: 1;\n  }\n\n  &:hover {\n    & > button {\n      opacity: 1;\n      ${\"\" /* 0.4s represents time taken for transition and 0s represents after how much time transition will start or take effect */\n  }\n      transition: opacity 0.4s ease 0s;\n    }\n  }\n\n  ul li button {\n    &:before {\n      font-size: 10px;\n      color: rgb(150, 158, 171);\n    }\n  }\n\n  li.slick-active button:before {\n    color: white;\n  }\n\n  .slick-list {\n    overflow: initial;\n  }\n  .slick-prev {\n    left: -60px;\n  }\n  .slick-next {\n    right: -60px;\n  }\n`;\n\nconst Wrap = styled.View`\n  border-radius: 4px;\n  cursor: pointer;\n  position: relative;\n\n  a {\n    border-radius: 4px;\n    ${\"\" /* This shadow code can created using Online calculators*/}\n    box-shadow: rgb(0 0 0 / 69%) 0px 26px 30px -10px,\n      rgb(0 0 0 / 73%) 0px 16px 10px -10px;\n    cursor: pointer;\n    display: block;\n    position: relative;\n    padding: 4px;\n    img {\n      width: 100%;\n      height: 500px;\n    }\n    &:hover {\n      padding: 0;\n      border: 4px solid rgba(249, 249, 249, 0.8);\n      transition-duration: 300ms;\n    }\n  },\n  \n`;\nconst styles = {\n  bannertext: {\n    position: 'absolute',\n    height: 500,\n    paddingTop: 10,\n    paddingHorizontal: 40,\n    backgroundColor: '#00000047',\n    color: 'white'\n  },\n  watchnow: {\n    textAlign: 'left',\n    justifyContent: 'left',\n    backgroundColor: '#f65f54',\n    color: 'white',\n    borderRadius: '30px',\n    width: 200,\n  },\n  texts: {\n    fontSize: 20,\n    fontFamily: 'Roboto Condensed',\n    letterSpacing: '1px'\n  },\n  bannerheading: {\n    fontSize: 40,\n    fontFamily: 'Roboto Condensed',\n    marginTop: 10,\n    marginBottom: 10\n  }\n}\n\nexport default Categories;\n"]},"metadata":{},"sourceType":"module"}