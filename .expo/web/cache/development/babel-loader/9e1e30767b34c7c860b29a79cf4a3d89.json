{"ast":null,"code":"var isMedia = function isMedia(query) {\n  return query.indexOf('@media') === 0;\n};\n\nvar isPseudo = function isPseudo(query) {\n  return query.indexOf(':') === 0;\n};\n\nvar isMediaOrPseudo = function isMediaOrPseudo(query) {\n  return isMedia(query) || isPseudo(query);\n};\n\nvar deepClone = function deepClone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nvar createCssRule = function createCssRule(query, stringHash, css) {\n  var rule;\n  var dataMediaSelector = \"[data-media~=\\\"\" + stringHash + \"\\\"]\";\n\n  if (isMedia(query)) {\n    rule = query + \" {\" + dataMediaSelector + \" \" + css + \"}\";\n  } else {\n    rule = \"\" + dataMediaSelector + query + \" \" + css;\n  }\n\n  return rule;\n};\n\nexport { isMedia, isPseudo, isMediaOrPseudo, deepClone, createCssRule };","map":{"version":3,"sources":["E:/chrisholloway/flicknplayreacttv/node_modules/react-native-media-query/utils/common.js"],"names":["isMedia","query","indexOf","isPseudo","isMediaOrPseudo","deepClone","obj","JSON","parse","stringify","createCssRule","stringHash","css","rule","dataMediaSelector"],"mappings":"AAAA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD;AAAA,SAAWA,KAAK,CAACC,OAAN,CAAc,QAAd,MAA4B,CAAvC;AAAA,CAAhB;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACF,KAAD;AAAA,SAAWA,KAAK,CAACC,OAAN,CAAc,GAAd,MAAuB,CAAlC;AAAA,CAAjB;;AACA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACH,KAAD;AAAA,SAAYD,OAAO,CAACC,KAAD,CAAP,IAAkBE,QAAQ,CAACF,KAAD,CAAtC;AAAA,CAAxB;;AAEA,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD;AAAA,SAASC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,GAAf,CAAX,CAAT;AAAA,CAAlB;;AAEA,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAACT,KAAD,EAAQU,UAAR,EAAoBC,GAApB,EAA4B;AAC9C,MAAIC,IAAJ;AACA,MAAMC,iBAAiB,uBAAoBH,UAApB,QAAvB;;AAEE,MAAIX,OAAO,CAACC,KAAD,CAAX,EAAoB;AAClBY,IAAAA,IAAI,GAAMZ,KAAN,UAAgBa,iBAAhB,SAAqCF,GAArC,MAAJ;AACD,GAFD,MAEO;AACLC,IAAAA,IAAI,QAAMC,iBAAN,GAA0Bb,KAA1B,SAAmCW,GAAvC;AACD;;AAEH,SAAOC,IAAP;AACH,CAXD;;AAaA,SAAQb,OAAR,EAAiBG,QAAjB,EAA2BC,eAA3B,EAA4CC,SAA5C,EAAuDK,aAAvD","sourcesContent":["const isMedia = (query) => query.indexOf('@media') === 0;\nconst isPseudo = (query) => query.indexOf(':') === 0;\nconst isMediaOrPseudo = (query) =>  isMedia(query) || isPseudo(query)\n\nconst deepClone = (obj) => JSON.parse(JSON.stringify(obj));\n\nconst createCssRule = (query, stringHash, css) => {\n    let rule;\n    const dataMediaSelector = `[data-media~=\"${stringHash}\"]`;\n\n      if (isMedia(query)) {\n        rule = `${query} {${dataMediaSelector} ${css}}`;\n      } else {\n        rule = `${dataMediaSelector}${query} ${css}`;\n      }\n    \n    return rule\n}\n\nexport {isMedia, isPseudo, isMediaOrPseudo, deepClone, createCssRule}"]},"metadata":{},"sourceType":"module"}