{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text } from 'react-native-paper';\nimport Background from \"../components/Background\";\nimport Logo from \"../components/Logo\";\nimport Header from \"../components/Header\";\nimport Button from \"../components/Button\";\nimport TextInput from \"../components/TextInput\";\nimport BackButton from \"../components/BackButton\";\nimport { theme } from \"../core/theme\";\nimport { emailValidator } from \"../helpers/emailValidator\";\nimport { passwordValidator } from \"../helpers/passwordValidator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar axios = require('axios');\n\nexport default function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState({\n    value: '',\n    error: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState({\n    value: '',\n    error: ''\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var onLoginPressed = function onLoginPressed() {\n    var emailError = emailValidator(email.value);\n    var passwordError = passwordValidator(password.value);\n\n    if (emailError || passwordError) {\n      setEmail(_objectSpread({}, email, {\n        error: emailError\n      }));\n      setPassword(_objectSpread({}, password, {\n        error: passwordError\n      }));\n      return;\n    }\n\n    console.log(email, password);\n\n    if (email.value != '' || password.value != '') {\n      axios.post(\"https://www.flicknplay.com/api/v1/auth/login\").then(function (response) {\n        console.log(response.data.lists);\n        ListData(response.data.lists);\n      });\n      navigation.navigate('TabNavigator');\n    }\n  };\n\n  return _jsxs(Background, {\n    children: [_jsx(BackButton, {\n      goBack: function goBack() {\n        return navigation.replace('StartScreen');\n      }\n    }), _jsx(Logo, {}), _jsx(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: \"Welcome back.\"\n    }), _jsx(TextInput, {\n      label: \"Email\",\n      returnKeyType: \"next\",\n      value: email.value,\n      onChangeText: function onChangeText(text) {\n        return setEmail({\n          value: text,\n          error: ''\n        });\n      },\n      error: !!email.error,\n      errorText: email.error,\n      autoCapitalize: \"none\",\n      autoCompleteType: \"email\",\n      textContentType: \"emailAddress\",\n      keyboardType: \"email-address\"\n    }), _jsx(TextInput, {\n      label: \"Password\",\n      returnKeyType: \"done\",\n      value: password.value,\n      onChangeText: function onChangeText(text) {\n        return setPassword({\n          value: text,\n          error: ''\n        });\n      },\n      error: !!password.error,\n      errorText: password.error,\n      secureTextEntry: true\n    }), _jsx(View, {\n      style: styles.forgotPassword,\n      children: _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate('ResetPasswordScreen');\n        },\n        children: _jsx(Text, {\n          style: styles.forgot,\n          children: \"Forgot your password?\"\n        })\n      })\n    }), _jsx(Button, {\n      mode: \"contained\",\n      onPress: onLoginPressed,\n      children: \"Login\"\n    }), _jsxs(View, {\n      style: styles.row,\n      children: [_jsx(Text, {\n        style: {\n          color: 'white'\n        },\n        children: \"Don\\u2019t have an account? \"\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.replace('RegisterScreen');\n        },\n        children: _jsx(Text, {\n          style: styles.link,\n          children: \"Sign up\"\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  forgotPassword: {\n    width: '100%',\n    alignItems: 'flex-end',\n    marginBottom: 24\n  },\n  row: {\n    flexDirection: 'row',\n    marginTop: 4\n  },\n  forgot: {\n    fontSize: 13,\n    color: theme.colors.secondary\n  },\n  link: {\n    fontWeight: 'bold',\n    color: theme.colors.primary\n  }\n});","map":{"version":3,"sources":["/home/codenomad/Documents/Expo_flicknPlay/src/screens/LoginScreen.js"],"names":["React","useState","Text","Background","Logo","Header","Button","TextInput","BackButton","theme","emailValidator","passwordValidator","axios","require","LoginScreen","navigation","value","error","email","setEmail","password","setPassword","onLoginPressed","emailError","passwordError","console","log","post","then","response","data","lists","ListData","navigate","replace","color","text","styles","forgotPassword","forgot","row","link","StyleSheet","create","width","alignItems","marginBottom","flexDirection","marginTop","fontSize","colors","secondary","fontWeight","primary"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { TouchableOpacity, StyleSheet, View } from 'react-native'\nimport { Text } from 'react-native-paper'\nimport Background from '../components/Background'\nimport Logo from '../components/Logo'\nimport Header from '../components/Header'\nimport Button from '../components/Button'\nimport TextInput from '../components/TextInput'\nimport BackButton from '../components/BackButton'\nimport { theme } from '../core/theme'\nimport { emailValidator } from '../helpers/emailValidator'\nimport { passwordValidator } from '../helpers/passwordValidator'\n// import TabNavigator from '../navigation/TabNavigator'\nconst axios = require('axios');\nexport default function LoginScreen({ navigation }) {\n  const [email, setEmail] = useState({ value: '', error: '' })\n  const [password, setPassword] = useState({ value: '', error: '' })\n\n  const onLoginPressed = () => {\n    const emailError = emailValidator(email.value)\n    const passwordError = passwordValidator(password.value)\n    if (emailError || passwordError) {\n      setEmail({ ...email, error: emailError })\n      setPassword({ ...password, error: passwordError })\n       return\n    }\n    console.log(email,password)\n    if(email.value!='' || password.value!=''){\n      axios.post(`https://www.flicknplay.com/api/v1/auth/login`).then((response)=>{\n     \n        console.log(response.data.lists)\n        ListData(response.data.lists)\n      })\n      navigation.navigate('TabNavigator')\n    }\n  \n    // navigation.reset({\n    //   index: 0,\n    //   routes: [{ name: 'RegisterScreen',params:{TabNavigator} }],\n    // })\n  }\n\n  return (\n    <Background>\n      <BackButton  goBack={() => navigation.replace('StartScreen')} />\n      <Logo />\n      <h1 style={{color:'white'}}>Welcome back.</h1> \n      <TextInput\n        label=\"Email\"\n        returnKeyType=\"next\"\n        value={email.value}\n        onChangeText={(text) => setEmail({ value: text, error: '' })}\n        error={!!email.error}\n        errorText={email.error}\n        autoCapitalize=\"none\"\n        autoCompleteType=\"email\"\n        textContentType=\"emailAddress\"\n        keyboardType=\"email-address\"\n      />\n      <TextInput\n        label=\"Password\"\n        returnKeyType=\"done\"\n        value={password.value}\n        onChangeText={(text) => setPassword({ value: text, error: '' })}\n        error={!!password.error}\n        errorText={password.error}\n        secureTextEntry\n      />\n      <View style={styles.forgotPassword}>\n        <TouchableOpacity\n          onPress={() => navigation.navigate('ResetPasswordScreen')}\n        >\n          <Text style={styles.forgot}>Forgot your password?</Text>\n        </TouchableOpacity>\n      </View>\n      <Button mode=\"contained\" onPress={onLoginPressed}>\n        Login\n      </Button>\n      <View style={styles.row}>\n        <Text style={{color:'white'}}>Don’t have an account? </Text>\n        <TouchableOpacity onPress={() => navigation.replace('RegisterScreen')}>\n          <Text style={styles.link}>Sign up</Text>\n        </TouchableOpacity>\n      </View>\n    </Background>\n  )\n}\n\nconst styles = StyleSheet.create({\n  forgotPassword: {\n    width: '100%',\n    alignItems: 'flex-end',\n    marginBottom: 24,\n  },\n  row: {\n    flexDirection: 'row',\n    marginTop: 4,\n  },\n  forgot: {\n    fontSize: 13,\n    color: theme.colors.secondary,\n  },\n  link: {\n    fontWeight: 'bold',\n    color: theme.colors.primary,\n  },\n})\n"]},"metadata":{},"sourceType":"module"}