{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport React, { PureComponent } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TabOption from \"./TabOption\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  tabsContainerStyle: {\n    backgroundColor: 'transparent',\n    flexDirection: 'row'\n  },\n  tabStyle: {\n    paddingVertical: 5,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#0076FF',\n    borderWidth: 1,\n    backgroundColor: 'white'\n  }\n});\n\nvar handleTabPress = function handleTabPress(index, multiple, selectedIndex, onTabPress) {\n  if (multiple) {\n    onTabPress(index);\n  } else if (selectedIndex !== index) {\n    onTabPress(index);\n  }\n};\n\nvar getAccessibilityLabelByIndex = function getAccessibilityLabelByIndex(accessibilityLabels, index) {\n  return accessibilityLabels && accessibilityLabels.length > 0 && accessibilityLabels[index] ? accessibilityLabels[index] : undefined;\n};\n\nvar getTestIdByIndex = function getTestIdByIndex(testIDs, index) {\n  return testIDs && testIDs.length > 0 && testIDs[index] ? testIDs[index] : undefined;\n};\n\nvar SegmentedControlTab = function (_PureComponent) {\n  _inherits(SegmentedControlTab, _PureComponent);\n\n  function SegmentedControlTab() {\n    _classCallCheck(this, SegmentedControlTab);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SegmentedControlTab).apply(this, arguments));\n  }\n\n  _createClass(SegmentedControlTab, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          multiple = _this$props.multiple,\n          selectedIndex = _this$props.selectedIndex,\n          selectedIndices = _this$props.selectedIndices,\n          values = _this$props.values,\n          badges = _this$props.badges,\n          borderRadius = _this$props.borderRadius,\n          tabsContainerStyle = _this$props.tabsContainerStyle,\n          tabsContainerDisableStyle = _this$props.tabsContainerDisableStyle,\n          tabStyle = _this$props.tabStyle,\n          firstTabStyle = _this$props.firstTabStyle,\n          lastTabStyle = _this$props.lastTabStyle,\n          activeTabStyle = _this$props.activeTabStyle,\n          tabTextStyle = _this$props.tabTextStyle,\n          activeTabTextStyle = _this$props.activeTabTextStyle,\n          tabBadgeContainerStyle = _this$props.tabBadgeContainerStyle,\n          activeTabBadgeContainerStyle = _this$props.activeTabBadgeContainerStyle,\n          tabBadgeStyle = _this$props.tabBadgeStyle,\n          activeTabBadgeStyle = _this$props.activeTabBadgeStyle,\n          _onTabPress = _this$props.onTabPress,\n          textNumberOfLines = _this$props.textNumberOfLines,\n          allowFontScaling = _this$props.allowFontScaling,\n          accessible = _this$props.accessible,\n          accessibilityLabels = _this$props.accessibilityLabels,\n          testIDs = _this$props.testIDs,\n          activeTabOpacity = _this$props.activeTabOpacity,\n          enabled = _this$props.enabled;\n      var firstTabStyleDefault = [{\n        borderRightWidth: values && values.length === 2 ? 1 : 0,\n        borderTopLeftRadius: borderRadius,\n        borderBottomLeftRadius: borderRadius\n      }];\n      var lastTabStyleDefault = [{\n        borderLeftWidth: 0,\n        borderTopRightRadius: borderRadius,\n        borderBottomRightRadius: borderRadius\n      }];\n      var tabsContainerStyles = [styles.tabsContainerStyle, tabsContainerStyle];\n\n      if (!enabled) {\n        tabsContainerStyles.push(tabsContainerDisableStyle);\n      }\n\n      return _jsx(View, {\n        style: tabsContainerStyles,\n        removeClippedSubviews: false,\n        children: values && values.map(function (item, index) {\n          var accessibilityText = getAccessibilityLabelByIndex(accessibilityLabels, index);\n          var testID = getTestIdByIndex(testIDs, index);\n          return _jsx(TabOption, {\n            index: index,\n            badge: badges && badges[index] ? badges[index] : false,\n            isTabActive: multiple ? selectedIndices.includes(index) : selectedIndex === index,\n            text: item,\n            textNumberOfLines: textNumberOfLines,\n            onTabPress: function onTabPress(indexs) {\n              return handleTabPress(indexs, multiple, selectedIndex, _onTabPress);\n            },\n            firstTabStyle: index === 0 ? [{\n              borderRightWidth: 0\n            }, firstTabStyleDefault, firstTabStyle] : {},\n            lastTabStyle: index === values.length - 1 ? [{\n              borderLeftWidth: 0\n            }, lastTabStyleDefault, lastTabStyle] : {},\n            tabStyle: [tabStyle, index !== 0 && index !== values.length - 1 ? {\n              marginLeft: -1\n            } : {}],\n            activeTabStyle: activeTabStyle,\n            tabTextStyle: tabTextStyle,\n            activeTabTextStyle: activeTabTextStyle,\n            tabBadgeContainerStyle: tabBadgeContainerStyle,\n            activeTabBadgeContainerStyle: activeTabBadgeContainerStyle,\n            tabBadgeStyle: tabBadgeStyle,\n            activeTabBadgeStyle: activeTabBadgeStyle,\n            allowFontScaling: allowFontScaling,\n            activeTabOpacity: activeTabOpacity,\n            accessible: accessible,\n            accessibilityLabel: accessibilityText || item,\n            testID: testID || item,\n            enabled: enabled\n          }, item);\n        })\n      });\n    }\n  }]);\n\n  return SegmentedControlTab;\n}(PureComponent);\n\nSegmentedControlTab.defaultProps = {};\nSegmentedControlTab.defaultProps = {\n  values: ['One', 'Two', 'Three'],\n  accessible: true,\n  accessibilityLabels: [],\n  testIDs: [],\n  badges: ['', '', ''],\n  multiple: false,\n  selectedIndex: 0,\n  selectedIndices: [0],\n  onTabPress: function onTabPress() {},\n  tabsContainerStyle: {},\n  tabsContainerDisableStyle: {\n    opacity: 0.6\n  },\n  tabStyle: {},\n  firstTabStyle: {},\n  lastTabStyle: {},\n  activeTabStyle: {},\n  tabTextStyle: {},\n  activeTabTextStyle: {},\n  tabBadgeContainerStyle: {},\n  activeTabBadgeContainerStyle: {},\n  tabBadgeStyle: {},\n  activeTabBadgeStyle: {},\n  borderRadius: 5,\n  textNumberOfLines: 1,\n  allowFontScaling: true,\n  activeTabOpacity: 1,\n  enabled: true\n};\nexport { SegmentedControlTab as default };","map":{"version":3,"sources":["E:/chrisholloway/flicknplayreacttv/node_modules/react-native-segmented-control-tab/src/SegmentedControlTab.js"],"names":["React","PureComponent","TabOption","styles","StyleSheet","create","tabsContainerStyle","backgroundColor","flexDirection","tabStyle","paddingVertical","flex","justifyContent","alignItems","borderColor","borderWidth","handleTabPress","index","multiple","selectedIndex","onTabPress","getAccessibilityLabelByIndex","accessibilityLabels","length","undefined","getTestIdByIndex","testIDs","SegmentedControlTab","props","selectedIndices","values","badges","borderRadius","tabsContainerDisableStyle","firstTabStyle","lastTabStyle","activeTabStyle","tabTextStyle","activeTabTextStyle","tabBadgeContainerStyle","activeTabBadgeContainerStyle","tabBadgeStyle","activeTabBadgeStyle","textNumberOfLines","allowFontScaling","accessible","activeTabOpacity","enabled","firstTabStyleDefault","borderRightWidth","borderTopLeftRadius","borderBottomLeftRadius","lastTabStyleDefault","borderLeftWidth","borderTopRightRadius","borderBottomRightRadius","tabsContainerStyles","push","map","item","accessibilityText","testID","includes","indexs","marginLeft","defaultProps","opacity"],"mappings":"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","sourcesContent":["/* @flow */\r\nimport React, { PureComponent } from 'react'\r\nimport {\r\n  View, StyleSheet,\r\n} from 'react-native'\r\n\r\nimport type {\r\n  ViewStyleProp,\r\n  TextStyleProp,\r\n} from 'react-native/Libraries/StyleSheet/StyleSheet'\r\n\r\nimport TabOption from './TabOption'\r\n\r\ntype Props = {\r\n  tabStyle: ViewStyleProp,\r\n  firstTabStyle: ViewStyleProp,\r\n  lastTabStyle: ViewStyleProp,\r\n  activeTabStyle: ViewStyleProp,\r\n  tabTextStyle: TextStyleProp,\r\n  activeTabTextStyle: TextStyleProp,\r\n  tabBadgeContainerStyle: TextStyleProp,\r\n  activeTabBadgeContainerStyle: TextStyleProp,\r\n  tabBadgeStyle: TextStyleProp,\r\n  activeTabBadgeStyle: TextStyleProp,\r\n  onTabPress: Function,\r\n  textNumberOfLines: number,\r\n  allowFontScaling: boolean,\r\n  accessible: boolean,\r\n  activeTabOpacity: number,\r\n  enabled: boolean,\r\n  values: string[],\r\n  badges: string[],\r\n  multiple: boolean,\r\n  selectedIndex: number,\r\n  selectedIndices: number[],\r\n  tabsContainerStyle: ViewStyleProp,\r\n  tabsContainerDisableStyle: ViewStyleProp,\r\n  borderRadius: number,\r\n  accessibilityLabels: string[],\r\n  testIDs: string[],\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  tabsContainerStyle: {\r\n    backgroundColor: 'transparent',\r\n    flexDirection: 'row',\r\n  },\r\n  tabStyle: {\r\n    paddingVertical: 5,\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    borderColor: '#0076FF',\r\n    borderWidth: 1,\r\n    backgroundColor: 'white',\r\n  },\r\n})\r\nconst handleTabPress = (\r\n  index: number,\r\n  multiple: boolean,\r\n  selectedIndex: number,\r\n  onTabPress: Function,\r\n) => {\r\n  if (multiple) {\r\n    onTabPress(index)\r\n  } else if (selectedIndex !== index) {\r\n    onTabPress(index)\r\n  }\r\n}\r\n\r\nconst getAccessibilityLabelByIndex = (\r\n  accessibilityLabels: string[],\r\n  index: number,\r\n) => (accessibilityLabels\r\n  && accessibilityLabels.length > 0\r\n  && accessibilityLabels[index]\r\n  ? accessibilityLabels[index]\r\n  : undefined)\r\n\r\nconst getTestIdByIndex = (\r\n  testIDs: string[],\r\n  index: number,\r\n) => (testIDs\r\n  && testIDs.length > 0\r\n  && testIDs[index]\r\n  ? testIDs[index]\r\n  : undefined)\r\n\r\nexport default class SegmentedControlTab extends PureComponent<Props> {\r\n  static defaultProps = {\r\n\r\n  };\r\n\r\n  static defaultProps = {\r\n    values: ['One', 'Two', 'Three'],\r\n    accessible: true,\r\n    accessibilityLabels: [],\r\n    testIDs: [],\r\n    badges: ['', '', ''],\r\n    multiple: false,\r\n    selectedIndex: 0,\r\n    selectedIndices: [0],\r\n    onTabPress: () => {},\r\n    tabsContainerStyle: {},\r\n    tabsContainerDisableStyle: { opacity: 0.6 },\r\n    tabStyle: {},\r\n    firstTabStyle: {},\r\n    lastTabStyle: {},\r\n    activeTabStyle: {},\r\n    tabTextStyle: {},\r\n    activeTabTextStyle: {},\r\n    tabBadgeContainerStyle: {},\r\n    activeTabBadgeContainerStyle: {},\r\n    tabBadgeStyle: {},\r\n    activeTabBadgeStyle: {},\r\n    borderRadius: 5,\r\n    textNumberOfLines: 1,\r\n    allowFontScaling: true,\r\n    activeTabOpacity: 1,\r\n    enabled: true,\r\n  };\r\n\r\n\r\n  render() {\r\n    const {\r\n      multiple,\r\n      selectedIndex,\r\n      selectedIndices,\r\n      values,\r\n      badges,\r\n      borderRadius,\r\n      tabsContainerStyle,\r\n      tabsContainerDisableStyle,\r\n      tabStyle,\r\n      firstTabStyle,\r\n      lastTabStyle,\r\n      activeTabStyle,\r\n      tabTextStyle,\r\n      activeTabTextStyle,\r\n      tabBadgeContainerStyle,\r\n      activeTabBadgeContainerStyle,\r\n      tabBadgeStyle,\r\n      activeTabBadgeStyle,\r\n      onTabPress,\r\n      textNumberOfLines,\r\n      allowFontScaling,\r\n      accessible,\r\n      accessibilityLabels,\r\n      testIDs,\r\n      activeTabOpacity,\r\n      enabled,\r\n    } = this.props\r\n    const firstTabStyleDefault = [\r\n      {\r\n        borderRightWidth: values && values.length === 2 ? 1 : 0,\r\n        borderTopLeftRadius: borderRadius,\r\n        borderBottomLeftRadius: borderRadius,\r\n      },\r\n    ]\r\n    const lastTabStyleDefault = [\r\n      {\r\n        borderLeftWidth: 0,\r\n        borderTopRightRadius: borderRadius,\r\n        borderBottomRightRadius: borderRadius,\r\n      },\r\n    ]\r\n\r\n    const tabsContainerStyles = [styles.tabsContainerStyle, tabsContainerStyle]\r\n    if (!enabled) {\r\n      tabsContainerStyles.push(tabsContainerDisableStyle)\r\n    }\r\n    return (\r\n      <View style={tabsContainerStyles} removeClippedSubviews={false}>\r\n        {values && values.map((item, index) => {\r\n          const accessibilityText = getAccessibilityLabelByIndex(\r\n            accessibilityLabels,\r\n            index,\r\n          )\r\n          const testID = getTestIdByIndex(\r\n            testIDs,\r\n            index,\r\n          )\r\n          return (\r\n            <TabOption\r\n              key={item}\r\n              index={index}\r\n              badge={badges && badges[index] ? badges[index] : false}\r\n              isTabActive={\r\n                multiple\r\n                  ? selectedIndices.includes(index)\r\n                  : selectedIndex === index\r\n              }\r\n              text={item}\r\n              textNumberOfLines={textNumberOfLines}\r\n              onTabPress={indexs => handleTabPress(indexs, multiple, selectedIndex, onTabPress)\r\n              }\r\n              firstTabStyle={\r\n                index === 0 ? [{ borderRightWidth: 0 }, firstTabStyleDefault, firstTabStyle] : {}\r\n              }\r\n              lastTabStyle={\r\n                index === values.length - 1\r\n                  ? [{ borderLeftWidth: 0 }, lastTabStyleDefault, lastTabStyle]\r\n                  : {}\r\n              }\r\n              tabStyle={[\r\n                tabStyle,\r\n                index !== 0 && index !== values.length - 1\r\n                  ? { marginLeft: -1 }\r\n                  : {},\r\n              ]}\r\n              activeTabStyle={activeTabStyle}\r\n              tabTextStyle={tabTextStyle}\r\n              activeTabTextStyle={activeTabTextStyle}\r\n              tabBadgeContainerStyle={tabBadgeContainerStyle}\r\n              activeTabBadgeContainerStyle={activeTabBadgeContainerStyle}\r\n              tabBadgeStyle={tabBadgeStyle}\r\n              activeTabBadgeStyle={activeTabBadgeStyle}\r\n              allowFontScaling={allowFontScaling}\r\n              activeTabOpacity={activeTabOpacity}\r\n              accessible={accessible}\r\n              accessibilityLabel={accessibilityText || item}\r\n              testID={testID || item}\r\n              enabled={enabled}\r\n            />\r\n          )\r\n        })}\r\n      </View>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}