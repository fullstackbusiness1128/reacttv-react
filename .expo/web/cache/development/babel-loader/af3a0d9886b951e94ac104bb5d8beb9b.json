{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Screen, screensEnabled, shouldUseActivityState } from 'react-native-screens';\nvar FAR_FAR_AWAY = 30000;\n\nvar ResourceSavingScene = function (_React$Component) {\n  _inherits(ResourceSavingScene, _React$Component);\n\n  function ResourceSavingScene() {\n    _classCallCheck(this, ResourceSavingScene);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ResourceSavingScene).apply(this, arguments));\n  }\n\n  _createClass(ResourceSavingScene, [{\n    key: \"render\",\n    value: function render() {\n      if ((screensEnabled === null || screensEnabled === void 0 ? void 0 : screensEnabled()) && this.props.enabled && Platform.OS !== 'web') {\n        var _this$props = this.props,\n            _isVisible = _this$props.isVisible,\n            _rest = _objectWithoutProperties(_this$props, [\"isVisible\"]);\n\n        if (shouldUseActivityState) {\n          return React.createElement(Screen, _extends({\n            activityState: _isVisible ? 2 : 0\n          }, _rest));\n        } else {\n          return React.createElement(Screen, _extends({\n            active: _isVisible ? 1 : 0\n          }, _rest));\n        }\n      }\n\n      var _this$props2 = this.props,\n          isVisible = _this$props2.isVisible,\n          children = _this$props2.children,\n          style = _this$props2.style,\n          rest = _objectWithoutProperties(_this$props2, [\"isVisible\", \"children\", \"style\"]);\n\n      return React.createElement(View, _extends({\n        style: [styles.container, Platform.OS === 'web' ? {\n          display: isVisible ? 'flex' : 'none'\n        } : null, style],\n        collapsable: false,\n        removeClippedSubviews: Platform.OS === 'ios' ? !isVisible : true,\n        pointerEvents: isVisible ? 'auto' : 'none'\n      }, rest), React.createElement(View, {\n        style: isVisible ? styles.attached : styles.detached\n      }, children));\n    }\n  }]);\n\n  return ResourceSavingScene;\n}(React.Component);\n\nexport { ResourceSavingScene as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAEA,SACEC,MADF,EAEEC,cAFF,EAIEC,sBAJF,QAKO,sBALP;AAcA,IAAMC,YAAY,GAAG,KAArB;;IAEqBC,mB;;;;;;;;;;;6BACV;MAEP,IAAI,eAAc,SAAdH,kBAAc,WAAdA,0BAAc,EAAd,KAAsB,KAAKI,KAAL,CAAWC,OAAjC,IAA4CC,QAAQ,CAACC,EAATD,KAAgB,KAAhE,EAAuE;QAAA,kBACtC,KAAKF,KADiC;QAAA,IAC7DI,UAD6D,eAC7DA,SAD6D;QAAA,IAC/CC,KAD+C;;QAGrE,IAAIR,sBAAJ,EAA4B;UAC1B,OAEEH,oBAACC,MAAD;YAAQW,aAAa,EAAEF,UAAS,GAAG,CAAH,GAAO;UAAvC,GAA8CC,KAA9C,EAFF;QADF,OAKO;UACL,OAEEX,oBAACC,MAAD;YAAQY,MAAM,EAAEH,UAAS,GAAG,CAAH,GAAO;UAAhC,GAAuCC,KAAvC,EAFF;QAID;MACF;;MAhBM,mBAkByC,KAAKL,KAlB9C;MAAA,IAkBCI,SAlBD,gBAkBCA,SAlBD;MAAA,IAkBYI,QAlBZ,gBAkBYA,QAlBZ;MAAA,IAkBsBC,KAlBtB,gBAkBsBA,KAlBtB;MAAA,IAkBgCJ,IAlBhC;;MAoBP,OACEX,oBAACgB,IAAD;QACED,KAAK,EAAE,CACLE,MAAM,CAACC,SADF,EAELV,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,GACI;UAAEW,OAAO,EAAET,SAAS,GAAG,MAAH,GAAY;QAAhC,CADJF,GAEI,IAJC,EAKLO,KALK,CADT;QAQEK,WAAW,EAAE,KARf;QASEC,qBAAqB,EAGnBb,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,GAAwB,CAACE,SAAzBF,GAAqC,IAZzC;QAcEc,aAAa,EAAEZ,SAAS,GAAG,MAAH,GAAY;MAdtC,GAeMC,IAfN,GAiBEX,oBAACgB,IAAD;QAAMD,KAAK,EAAEL,SAAS,GAAGO,MAAM,CAACM,QAAV,GAAqBN,MAAM,CAACO;MAAlD,GACGV,QADH,CAjBF,CADF;IAuBD;;;;EA5C8Cd,KAAK,CAACyB,S;;SAAlCpB,mB;AA+CrB,IAAMY,MAAM,GAAGS,UAAU,CAACC,MAAXD,CAAkB;EAC/BR,SAAS,EAAE;IACTU,IAAI,EAAE,CADG;IAETC,QAAQ,EAAE;EAFD,CADoB;EAK/BN,QAAQ,EAAE;IACRK,IAAI,EAAE;EADE,CALqB;EAQ/BJ,QAAQ,EAAE;IACRI,IAAI,EAAE,CADE;IAERE,GAAG,EAAE1B;EAFG;AARqB,CAAlBsB,CAAf","names":["React","Screen","screensEnabled","shouldUseActivityState","FAR_FAR_AWAY","ResourceSavingScene","props","enabled","Platform","OS","isVisible","rest","activityState","active","children","style","View","styles","container","display","collapsable","removeClippedSubviews","pointerEvents","attached","detached","Component","StyleSheet","create","flex","overflow","top"],"sources":["ResourceSavingScene.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  Screen,\n  screensEnabled,\n  // @ts-ignore\n  shouldUseActivityState,\n} from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  style?: any;\n  enabled: boolean;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingScene extends React.Component<Props> {\n  render() {\n    // react-native-screens is buggy on web\n    if (screensEnabled?.() && this.props.enabled && Platform.OS !== 'web') {\n      const { isVisible, ...rest } = this.props;\n\n      if (shouldUseActivityState) {\n        return (\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          <Screen activityState={isVisible ? 2 : 0} {...rest} />\n        );\n      } else {\n        return (\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          <Screen active={isVisible ? 1 : 0} {...rest} />\n        );\n      }\n    }\n\n    const { isVisible, children, style, ...rest } = this.props;\n\n    return (\n      <View\n        style={[\n          styles.container,\n          Platform.OS === 'web'\n            ? { display: isVisible ? 'flex' : 'none' }\n            : null,\n          style,\n        ]}\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        <View style={isVisible ? styles.attached : styles.detached}>\n          {children}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}