{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Text } from 'react-native-paper';\nimport Background from \"../components/Background\";\nimport Logo from \"../components/Logo\";\nimport Header from \"../components/Header\";\nimport Button from \"../components/Button\";\nimport TextInput from \"../components/TextInput\";\nimport BackButton from \"../components/BackButton\";\nimport { theme } from \"../core/theme\";\nimport { emailValidator } from \"../helpers/emailValidator\";\nimport { passwordValidator } from \"../helpers/passwordValidator\";\nimport { nameValidator } from \"../helpers/nameValidator\";\nimport Toast from 'react-native-toast-message';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar axios = require('axios');\n\nexport default function RegisterScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState({\n    value: '',\n    error: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState({\n    value: '',\n    error: ''\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var _useState5 = useState({\n    value: '',\n    error: ''\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      password = _useState6[0],\n      setPassword = _useState6[1];\n\n  var onSignUpPressed = function onSignUpPressed() {\n    var nameError, emailError, passwordError, showToast, formData, url;\n    return _regeneratorRuntime.async(function onSignUpPressed$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            nameError = nameValidator(name.value);\n            emailError = emailValidator(email.value);\n            passwordError = passwordValidator(password.value);\n\n            showToast = function showToast() {\n              Toast.show({\n                type: 'success',\n                text1: 'This is some something ðŸ‘‹'\n              });\n            };\n\n            if (!(emailError || passwordError || nameError)) {\n              _context2.next = 9;\n              break;\n            }\n\n            setName(_objectSpread({}, name, {\n              error: nameError\n            }));\n            setEmail(_objectSpread({}, email, {\n              error: emailError\n            }));\n            setPassword(_objectSpread({}, password, {\n              error: passwordError\n            }));\n            return _context2.abrupt(\"return\");\n\n          case 9:\n            if (!(email.value != '' || password.value != '')) {\n              _context2.next = 19;\n              break;\n            }\n\n            formData = new FormData();\n            formData.append('email', email.value);\n            formData.append('password', password.value);\n            formData.append('display_name', name.value);\n            formData.append('password_confirmation', password.value);\n            formData.append('token_name', 'flicknplaysapi');\n            url = \"https://www.flicknplay.com/api/v1/auth/register\";\n            _context2.next = 19;\n            return _regeneratorRuntime.awrap(axios.post(url, formData, {\n              headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n              }\n            }).then(function _callee(response) {\n              var _response$data;\n\n              return _regeneratorRuntime.async(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      console.log(response);\n\n                      if ((response == null ? void 0 : (_response$data = response.data) == null ? void 0 : _response$data.status) == \"needs_email_verification\") {}\n\n                    case 2:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              });\n            }).catch(function (error) {\n              console.log(error.response);\n            }));\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n\n  return _jsxs(Background, {\n    children: [_jsx(BackButton, {\n      goBack: function goBack() {\n        return navigation.replace('LoginScreen');\n      }\n    }), _jsx(Logo, {}), _jsx(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: \"Create Account\"\n    }), _jsx(TextInput, {\n      label: \"Name\",\n      returnKeyType: \"next\",\n      value: name.value,\n      onChangeText: function onChangeText(text) {\n        return setName({\n          value: text,\n          error: ''\n        });\n      },\n      error: !!name.error,\n      errorText: name.error\n    }), _jsx(TextInput, {\n      label: \"Email\",\n      returnKeyType: \"next\",\n      value: email.value,\n      onChangeText: function onChangeText(text) {\n        return setEmail({\n          value: text,\n          error: ''\n        });\n      },\n      error: !!email.error,\n      errorText: email.error,\n      autoCapitalize: \"none\",\n      autoCompleteType: \"email\",\n      textContentType: \"emailAddress\",\n      keyboardType: \"email-address\"\n    }), _jsx(TextInput, {\n      label: \"Password\",\n      returnKeyType: \"done\",\n      value: password.value,\n      onChangeText: function onChangeText(text) {\n        return setPassword({\n          value: text,\n          error: ''\n        });\n      },\n      error: !!password.error,\n      errorText: password.error,\n      secureTextEntry: true\n    }), _jsx(Button, {\n      mode: \"contained\",\n      onPress: onSignUpPressed,\n      style: {\n        marginTop: 24\n      },\n      children: \"Sign Up\"\n    }), _jsxs(View, {\n      style: styles.row,\n      children: [_jsx(Text, {\n        style: {\n          color: 'white'\n        },\n        children: \"Already have an account? \"\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.replace('LoginScreen');\n        },\n        children: _jsx(Text, {\n          style: styles.link,\n          children: \"Login\"\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n    marginTop: 4\n  },\n  link: {\n    fontWeight: 'bold',\n    color: theme.colors.primary\n  }\n});","map":{"version":3,"sources":["/home/codenomad/Documents/Expo_flicknPlay/src/screens/RegisterScreen.js"],"names":["React","useState","Text","Background","Logo","Header","Button","TextInput","BackButton","theme","emailValidator","passwordValidator","nameValidator","Toast","axios","require","RegisterScreen","navigation","value","error","name","setName","email","setEmail","password","setPassword","onSignUpPressed","nameError","emailError","passwordError","showToast","show","type","text1","formData","FormData","append","url","post","headers","then","response","console","log","data","status","catch","replace","color","text","marginTop","styles","row","link","StyleSheet","create","flexDirection","fontWeight","colors","primary"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { View, StyleSheet, TouchableOpacity } from 'react-native'\nimport { Text } from 'react-native-paper'\nimport Background from '../components/Background'\nimport Logo from '../components/Logo'\nimport Header from '../components/Header'\nimport Button from '../components/Button'\nimport TextInput from '../components/TextInput'\nimport BackButton from '../components/BackButton'\nimport { theme } from '../core/theme'\nimport { emailValidator } from '../helpers/emailValidator'\nimport { passwordValidator } from '../helpers/passwordValidator'\nimport { nameValidator } from '../helpers/nameValidator'\nimport Toast from 'react-native-toast-message';\nconst axios = require('axios');\nexport default function RegisterScreen({ navigation }) {\n  const [name, setName] = useState({ value: '', error: '' })\n  const [email, setEmail] = useState({ value: '', error: '' })\n  const [password, setPassword] = useState({ value: '', error: '' })\n\n  const onSignUpPressed = async () => {\n    const nameError = nameValidator(name.value)\n    const emailError = emailValidator(email.value)\n    const passwordError = passwordValidator(password.value)\n    const showToast = () => {\n      Toast.show({\n        type: 'success',\n        text1: 'This is some something ðŸ‘‹'\n      });\n    }\n    if (emailError || passwordError || nameError) {\n      setName({ ...name, error: nameError })\n      setEmail({ ...email, error: emailError })\n      setPassword({ ...password, error: passwordError })\n      return\n    }\n    if(email.value!='' || password.value!=''){\n      // let body={\n      //   email:email.value,\n      //   password:password.value,\n      //   token_name:\"flicknplaysapi\",\n       \n      // }\n      const formData = new FormData();\n      formData.append('email',email.value)\n      formData.append('password',password.value)\n      formData.append('display_name',name.value)\n      formData.append('password_confirmation',password.value)\n      formData.append('token_name','flicknplaysapi')\n      const url = `https://www.flicknplay.com/api/v1/auth/register`\n     await axios.post(url,formData , { headers: {\"Content-Type\" : `application/x-www-form-urlencoded`} }).then(async(response)=>{\n\n        console.log(response)\n        if(response?.data?.status==\"needs_email_verification\"){\n          \n        }\n        // AsyncStorage.setI',JSON.stringify(response?.data?.user))\n        // AsyncStorage.setItem('user_token',JSON.stringify(response?.data?.user?.access_token))\n        // if(response){\n        //   const user=await AsyncStorage.getItem('userDetails')\n        //   console.log(user)\n        //   navigation.navigate('TabNavigator')\n        // }\n       }).catch(function(error){\n         console.log(error.response)\n       })\n\n    }\n    // navigation.reset({\n    //   index: 0,\n    //   routes: [{ name: 'Dashboard' }],\n    // })\n  }\n\n  return (\n    <Background>\n      <BackButton goBack={() => navigation.replace('LoginScreen')}/>\n      <Logo />\n      <h1 style={{color:'white'}}>Create Account</h1>\n      <TextInput\n        label=\"Name\"\n        returnKeyType=\"next\"\n        value={name.value}\n        onChangeText={(text) => setName({ value: text, error: '' })}\n        error={!!name.error}\n        errorText={name.error}\n      />\n      <TextInput\n        label=\"Email\"\n        returnKeyType=\"next\"\n        value={email.value}\n        onChangeText={(text) => setEmail({ value: text, error: '' })}\n        error={!!email.error}\n        errorText={email.error}\n        autoCapitalize=\"none\"\n        autoCompleteType=\"email\"\n        textContentType=\"emailAddress\"\n        keyboardType=\"email-address\"\n      />\n      <TextInput\n        label=\"Password\"\n        returnKeyType=\"done\"\n        value={password.value}\n        onChangeText={(text) => setPassword({ value: text, error: '' })}\n        error={!!password.error}\n        errorText={password.error}\n        secureTextEntry\n      />\n      <Button\n        mode=\"contained\"\n        onPress={onSignUpPressed}\n        style={{ marginTop: 24 }}\n      >\n        Sign Up\n      </Button>\n      <View style={styles.row}>\n        <Text style={{color:'white'}}>Already have an account? </Text>\n        <TouchableOpacity onPress={() => navigation.replace('LoginScreen')}>\n          <Text style={styles.link}>Login</Text>\n        </TouchableOpacity>\n      </View>\n    </Background>\n  )\n}\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n    marginTop: 4,\n  },\n  link: {\n    fontWeight: 'bold',\n    color: theme.colors.primary,\n  },\n})\n"]},"metadata":{},"sourceType":"module"}