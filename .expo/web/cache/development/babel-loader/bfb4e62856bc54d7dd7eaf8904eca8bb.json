{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Hammer from '@egjs/hammerjs';\nimport { State } from \"../State\";\nimport { CONTENT_TOUCHES_DELAY, CONTENT_TOUCHES_QUICK_TAP_END_DELAY } from \"./constants\";\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport { fireAfterInterval, isValidNumber, isnan } from \"./utils\";\n\nvar PressGestureHandler = function (_DiscreteGestureHandl) {\n  _inherits(PressGestureHandler, _DiscreteGestureHandl);\n\n  function PressGestureHandler() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PressGestureHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PressGestureHandler)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"visualFeedbackTimer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"initialEvent\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"shouldDelayTouches\", true);\n\n    return _this;\n  }\n\n  _createClass(PressGestureHandler, [{\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(inputData);\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(_ref) {\n      var shouldCancelWhenOutside = _ref.shouldCancelWhenOutside,\n          maxDistSq = _ref.maxDistSq;\n      return shouldCancelWhenOutside || !isValidNumber(maxDistSq);\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      var _Hammer$INPUT_START$H;\n\n      return (_Hammer$INPUT_START$H = {}, _defineProperty2(_Hammer$INPUT_START$H, Hammer.INPUT_START, State.BEGAN), _defineProperty2(_Hammer$INPUT_START$H, Hammer.INPUT_MOVE, State.ACTIVE), _defineProperty2(_Hammer$INPUT_START$H, Hammer.INPUT_END, State.END), _defineProperty2(_Hammer$INPUT_START$H, Hammer.INPUT_CANCEL, State.CANCELLED), _Hammer$INPUT_START$H)[type];\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      if (!this.hasCustomActivationCriteria) {\n        return {\n          shouldCancelWhenOutside: true,\n          maxDistSq: 10\n        };\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return _objectSpread({}, _get(_getPrototypeOf(PressGestureHandler.prototype), \"getHammerConfig\", this).call(this), {\n        time: this.minDurationMs\n      });\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.onGestureStart(ev);\n    }\n  }, {\n    key: \"shouldDelayTouchForEvent\",\n    value: function shouldDelayTouchForEvent(_ref2) {\n      var pointerType = _ref2.pointerType;\n      return this.shouldDelayTouches && pointerType === 'touch';\n    }\n  }, {\n    key: \"onGestureStart\",\n    value: function onGestureStart(ev) {\n      var _this2 = this;\n\n      this.isGestureRunning = true;\n      clearTimeout(this.visualFeedbackTimer);\n      this.initialEvent = ev;\n      this.visualFeedbackTimer = fireAfterInterval(function () {\n        _this2.sendGestureStartedEvent(_this2.initialEvent);\n\n        _this2.initialEvent = null;\n      }, this.shouldDelayTouchForEvent(ev) && CONTENT_TOUCHES_DELAY);\n    }\n  }, {\n    key: \"sendGestureStartedEvent\",\n    value: function sendGestureStartedEvent(ev) {\n      clearTimeout(this.visualFeedbackTimer);\n      this.visualFeedbackTimer = null;\n      this.sendEvent(_objectSpread({}, ev, {\n        eventType: Hammer.INPUT_MOVE,\n        isFirst: true\n      }));\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      _get(_getPrototypeOf(PressGestureHandler.prototype), \"forceInvalidate\", this).call(this, event);\n\n      clearTimeout(this.visualFeedbackTimer);\n      this.visualFeedbackTimer = null;\n      this.initialEvent = null;\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this3 = this;\n\n      _get(_getPrototypeOf(PressGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (this.isGestureRunning) {\n        if (ev.isFinal) {\n          var timeout;\n\n          if (this.visualFeedbackTimer) {\n            timeout = CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\n            this.sendGestureStartedEvent(this.initialEvent);\n            this.initialEvent = null;\n          }\n\n          fireAfterInterval(function () {\n            _this3.sendEvent(_objectSpread({}, ev, {\n              eventType: Hammer.INPUT_END,\n              isFinal: true\n            }));\n\n            _this3.onGestureEnded();\n          }, timeout);\n        } else {\n          this.sendEvent(_objectSpread({}, ev, {\n            eventType: Hammer.INPUT_MOVE,\n            isFinal: false\n          }));\n        }\n      }\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref3) {\n      var _ref3$shouldActivateO = _ref3.shouldActivateOnStart,\n          shouldActivateOnStart = _ref3$shouldActivateO === void 0 ? false : _ref3$shouldActivateO,\n          _ref3$disallowInterru = _ref3.disallowInterruption,\n          disallowInterruption = _ref3$disallowInterru === void 0 ? false : _ref3$disallowInterru,\n          _ref3$shouldCancelWhe = _ref3.shouldCancelWhenOutside,\n          shouldCancelWhenOutside = _ref3$shouldCancelWhe === void 0 ? true : _ref3$shouldCancelWhe,\n          _ref3$minDurationMs = _ref3.minDurationMs,\n          minDurationMs = _ref3$minDurationMs === void 0 ? Number.NaN : _ref3$minDurationMs,\n          _ref3$maxDist = _ref3.maxDist,\n          maxDist = _ref3$maxDist === void 0 ? Number.NaN : _ref3$maxDist,\n          _ref3$minPointers = _ref3.minPointers,\n          minPointers = _ref3$minPointers === void 0 ? 1 : _ref3$minPointers,\n          _ref3$maxPointers = _ref3.maxPointers,\n          maxPointers = _ref3$maxPointers === void 0 ? 1 : _ref3$maxPointers,\n          props = _objectWithoutProperties(_ref3, [\"shouldActivateOnStart\", \"disallowInterruption\", \"shouldCancelWhenOutside\", \"minDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"]);\n\n      return _get(_getPrototypeOf(PressGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        shouldActivateOnStart: shouldActivateOnStart,\n        disallowInterruption: disallowInterruption,\n        shouldCancelWhenOutside: shouldCancelWhenOutside,\n        minDurationMs: minDurationMs,\n        maxDist: maxDist,\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'press';\n    }\n  }, {\n    key: \"minDurationMs\",\n    get: function get() {\n      return isnan(this.config.minDurationMs) ? 5 : this.config.minDurationMs;\n    }\n  }, {\n    key: \"maxDist\",\n    get: function get() {\n      return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Press;\n    }\n  }]);\n\n  return PressGestureHandler;\n}(DiscreteGestureHandler);\n\nexport default PressGestureHandler;","map":{"version":3,"mappings":"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","names":["Hammer","State","CONTENT_TOUCHES_DELAY","CONTENT_TOUCHES_QUICK_TAP_END_DELAY","DiscreteGestureHandler","fireAfterInterval","isValidNumber","isnan","PressGestureHandler","args","_defineProperty","inputData","hasGestureFailed","cancelEvent","shouldCancelWhenOutside","maxDistSq","type","INPUT_START","BEGAN","INPUT_MOVE","ACTIVE","INPUT_END","END","INPUT_CANCEL","CANCELLED","hasCustomActivationCriteria","config","time","minDurationMs","ev","onGestureStart","pointerType","shouldDelayTouches","isGestureRunning","clearTimeout","visualFeedbackTimer","initialEvent","sendGestureStartedEvent","shouldDelayTouchForEvent","sendEvent","eventType","isFirst","event","isFinal","timeout","onGestureEnded","shouldActivateOnStart","disallowInterruption","Number","NaN","maxDist","minPointers","maxPointers","props","Press"],"sources":["PressGestureHandler.ts"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport { State } from '../State';\nimport {\n  CONTENT_TOUCHES_DELAY,\n  CONTENT_TOUCHES_QUICK_TAP_END_DELAY,\n  HammerInputNames,\n} from './constants';\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { Config, HammerInputExt } from './GestureHandler';\nimport { fireAfterInterval, isValidNumber, isnan } from './utils';\n\nclass PressGestureHandler extends DiscreteGestureHandler {\n  private visualFeedbackTimer: any;\n  private initialEvent: HammerInputExt | null = null;\n  get name() {\n    return 'press';\n  }\n\n  get minDurationMs() {\n    // @ts-ignore FIXME(TS)\n    return isnan(this.config.minDurationMs) ? 5 : this.config.minDurationMs;\n  }\n\n  get maxDist() {\n    return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Press;\n  }\n\n  shouldDelayTouches = true;\n\n  simulateCancelEvent(inputData: HammerInputExt) {\n    // Long press never starts so we can't rely on the running event boolean.\n    this.hasGestureFailed = true;\n    this.cancelEvent(inputData);\n  }\n\n  updateHasCustomActivationCriteria({\n    shouldCancelWhenOutside,\n    maxDistSq,\n  }: Config & { shouldCancelWhenOutside: boolean }) {\n    return shouldCancelWhenOutside || !isValidNumber(maxDistSq);\n  }\n\n  getState(type: keyof typeof HammerInputNames): State {\n    return {\n      [Hammer.INPUT_START]: State.BEGAN,\n      [Hammer.INPUT_MOVE]: State.ACTIVE,\n      [Hammer.INPUT_END]: State.END,\n      [Hammer.INPUT_CANCEL]: State.CANCELLED,\n    }[type];\n  }\n\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        shouldCancelWhenOutside: true,\n        maxDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      // threshold: this.maxDist,\n      time: this.minDurationMs,\n    };\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.onGestureStart(ev);\n  }\n\n  shouldDelayTouchForEvent({ pointerType }: HammerInputExt) {\n    // Don't disable event for mouse input\n    return this.shouldDelayTouches && pointerType === 'touch';\n  }\n\n  onGestureStart(ev: HammerInputExt) {\n    this.isGestureRunning = true;\n    clearTimeout(this.visualFeedbackTimer);\n    this.initialEvent = ev;\n    this.visualFeedbackTimer = fireAfterInterval(() => {\n      this.sendGestureStartedEvent(this.initialEvent as HammerInputExt);\n      this.initialEvent = null;\n    }, this.shouldDelayTouchForEvent(ev) && CONTENT_TOUCHES_DELAY);\n  }\n\n  sendGestureStartedEvent(ev: HammerInputExt) {\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.sendEvent({\n      ...ev,\n      eventType: Hammer.INPUT_MOVE,\n      isFirst: true,\n    });\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    super.forceInvalidate(event);\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.initialEvent = null;\n  }\n\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (this.isGestureRunning) {\n      if (ev.isFinal) {\n        let timeout;\n        if (this.visualFeedbackTimer) {\n          // Aesthetic timing for a quick tap.\n          // We haven't activated the tap right away to emulate iOS `delaysContentTouches`\n          // Now we must send the initial activation event and wait a set amount of time before firing the end event.\n          timeout = CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\n          this.sendGestureStartedEvent(this.initialEvent as HammerInputExt);\n          this.initialEvent = null;\n        }\n        fireAfterInterval(() => {\n          this.sendEvent({\n            ...ev,\n            eventType: Hammer.INPUT_END,\n            isFinal: true,\n          });\n          // @ts-ignore -- this should explicitly support undefined\n          this.onGestureEnded();\n        }, timeout);\n      } else {\n        this.sendEvent({\n          ...ev,\n          eventType: Hammer.INPUT_MOVE,\n          isFinal: false,\n        });\n      }\n    }\n  }\n\n  updateGestureConfig({\n    shouldActivateOnStart = false,\n    disallowInterruption = false,\n    shouldCancelWhenOutside = true,\n    minDurationMs = Number.NaN,\n    maxDist = Number.NaN,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldActivateOnStart,\n      disallowInterruption,\n      shouldCancelWhenOutside,\n      minDurationMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n}\nexport default PressGestureHandler;\n"]},"metadata":{},"sourceType":"module"}