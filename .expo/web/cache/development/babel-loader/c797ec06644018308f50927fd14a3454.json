{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { colors, images } from \"../constants\";\nimport mockData from \"../mockdata/data\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar MediaItemScroller = function MediaItemScroller(_ref) {\n  var dataset = _ref.dataset,\n      navigation = _ref.navigation;\n  console.log(dataset);\n\n  var test = function test(_ref2) {\n    _objectDestructuringEmpty(_ref2);\n  };\n\n  return _jsx(FlatList, {\n    contentContainerStyle: styles.containerFlatList,\n    data: dataset,\n    horizontal: true,\n    renderItem: function renderItem(_ref3) {\n      var item = _ref3.item;\n      var renderItem = item.poster ? _jsx(Image, {\n        onPress: function onPress() {\n          return test();\n        },\n        source: item.poster,\n        style: styles.image\n      }) : _jsx(View, {\n        style: styles.placeholder\n      });\n      return _jsx(View, {\n        style: styles.item,\n        children: renderItem\n      });\n    },\n    showsHorizontalScrollIndicator: false\n  });\n};\n\nMediaItemScroller.defaultProps = {\n  dataset: 'dumbData'\n};\nMediaItemScroller.propTypes = {\n  dataset: PropTypes.string\n};\nvar styles = StyleSheet.create({\n  containerFlatList: {\n    paddingLeft: 16,\n    paddingRight: 8\n  },\n  item: {\n    borderRadius: 4,\n    height: 130,\n    marginRight: 8,\n    overflow: 'hidden',\n    width: 93\n  },\n  placeholder: {\n    backgroundColor: colors.infoGrey,\n    height: '100%',\n    width: '100%'\n  },\n  image: {\n    height: '100%',\n    resizeMode: 'contain',\n    width: '100%'\n  }\n});\nexport default MediaItemScroller;","map":{"version":3,"sources":["E:/chrisholloway/flicknplayreacttv/src/components/MediaItemScroller.js"],"names":["React","PropTypes","colors","images","mockData","MediaItemScroller","dataset","navigation","console","log","test","styles","containerFlatList","item","renderItem","poster","image","placeholder","defaultProps","propTypes","string","StyleSheet","create","paddingLeft","paddingRight","borderRadius","height","marginRight","overflow","width","backgroundColor","infoGrey","resizeMode"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;;AAEA,SAASC,MAAT,EAAiBC,MAAjB;AAEA,OAAOC,QAAP;;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAA4B;AAAA,MAAzBC,OAAyB,QAAzBA,OAAyB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AAEnDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;;AACH,MAAMI,IAAI,GAAC,SAALA,IAAK,QAAM;AAAA;AAEhB,GAFD;;AAGE,SACE,KAAC,QAAD;AACE,IAAA,qBAAqB,EAAEC,MAAM,CAACC,iBADhC;AAEE,IAAA,IAAI,EAAEN,OAFR;AAGE,IAAA,UAAU,MAHZ;AAKE,IAAA,UAAU,EAAE,2BAAc;AAAA,UAAXO,IAAW,SAAXA,IAAW;AACxB,UAAMC,UAAU,GAAGD,IAAI,CAACE,MAAL,GACjB,KAAC,KAAD;AAAO,QAAA,OAAO,EAAE;AAAA,iBAAKL,IAAI,EAAT;AAAA,SAAhB;AAA6B,QAAA,MAAM,EAAEG,IAAI,CAACE,MAA1C;AAAkD,QAAA,KAAK,EAAEJ,MAAM,CAACK;AAAhE,QADiB,GAGjB,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEL,MAAM,CAACM;AAApB,QAHF;AAMA,aAAO,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEN,MAAM,CAACE,IAApB;AAAA,kBAA2BC;AAA3B,QAAP;AACD,KAbH;AAcE,IAAA,8BAA8B,EAAE;AAdlC,IADF;AAkBD,CAxBD;;AA0BAT,iBAAiB,CAACa,YAAlB,GAAiC;AAC/BZ,EAAAA,OAAO,EAAE;AADsB,CAAjC;AAIAD,iBAAiB,CAACc,SAAlB,GAA8B;AAE5Bb,EAAAA,OAAO,EAAEL,SAAS,CAACmB;AAFS,CAA9B;AAKA,IAAMT,MAAM,GAAGU,UAAU,CAACC,MAAX,CAAkB;AAC/BV,EAAAA,iBAAiB,EAAE;AACjBW,IAAAA,WAAW,EAAE,EADI;AAEjBC,IAAAA,YAAY,EAAE;AAFG,GADY;AAK/BX,EAAAA,IAAI,EAAE;AACJY,IAAAA,YAAY,EAAE,CADV;AAEJC,IAAAA,MAAM,EAAE,GAFJ;AAGJC,IAAAA,WAAW,EAAE,CAHT;AAIJC,IAAAA,QAAQ,EAAE,QAJN;AAKJC,IAAAA,KAAK,EAAE;AALH,GALyB;AAY/BZ,EAAAA,WAAW,EAAE;AACXa,IAAAA,eAAe,EAAE5B,MAAM,CAAC6B,QADb;AAEXL,IAAAA,MAAM,EAAE,MAFG;AAGXG,IAAAA,KAAK,EAAE;AAHI,GAZkB;AAiB/Bb,EAAAA,KAAK,EAAE;AACLU,IAAAA,MAAM,EAAE,MADH;AAELM,IAAAA,UAAU,EAAE,SAFP;AAGLH,IAAAA,KAAK,EAAE;AAHF;AAjBwB,CAAlB,CAAf;AAwBA,eAAexB,iBAAf","sourcesContent":["import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FlatList, Image, StyleSheet, View } from 'react-native';\r\nimport { colors, images } from '../constants';\r\n\r\nimport mockData from '../mockdata/data';\r\n\r\nconst MediaItemScroller = ({ dataset,navigation }) => {\r\n  //  const dataArray = Object.values(mockData[dataset]);\r\n   console.log(dataset)\r\nconst test=({})=>{\r\n  \r\n}\r\n  return (\r\n    <FlatList\r\n      contentContainerStyle={styles.containerFlatList}\r\n      data={dataset}\r\n      horizontal\r\n      // keyExtractor={({ id }) => id.toString()}\r\n      renderItem={({ item }) => {\r\n        const renderItem = item.poster ? (\r\n          <Image onPress={() =>test()} source={item.poster} style={styles.image} />\r\n        ) : (\r\n          <View style={styles.placeholder} />\r\n        );\r\n\r\n        return <View style={styles.item}>{renderItem}</View>;\r\n      }}\r\n      showsHorizontalScrollIndicator={false}\r\n    />\r\n  );\r\n};\r\n\r\nMediaItemScroller.defaultProps = {\r\n  dataset: 'dumbData'\r\n};\r\n\r\nMediaItemScroller.propTypes = {\r\n  // optional\r\n  dataset: PropTypes.string\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  containerFlatList: {\r\n    paddingLeft: 16,\r\n    paddingRight: 8\r\n  },\r\n  item: {\r\n    borderRadius: 4,\r\n    height: 130,\r\n    marginRight: 8,\r\n    overflow: 'hidden',\r\n    width: 93\r\n  },\r\n  placeholder: {\r\n    backgroundColor: colors.infoGrey,\r\n    height: '100%',\r\n    width: '100%'\r\n  },\r\n  image: {\r\n    height: '100%',\r\n    resizeMode: 'contain',\r\n    width: '100%'\r\n  }\r\n});\r\n\r\nexport default MediaItemScroller;\r\n"]},"metadata":{},"sourceType":"module"}