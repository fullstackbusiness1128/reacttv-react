{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport React, { PureComponent } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  tabStyle: {\n    paddingVertical: 5,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#0076FF',\n    borderWidth: 1,\n    backgroundColor: 'white'\n  },\n  activeTabStyle: {\n    backgroundColor: '#0076FF'\n  },\n  tabTextStyle: {\n    color: '#0076FF'\n  },\n  activeTabTextStyle: {\n    color: 'white'\n  },\n  tabBadgeContainerStyle: {\n    borderRadius: 20,\n    backgroundColor: 'red',\n    paddingLeft: 5,\n    paddingRight: 5,\n    marginLeft: 5,\n    marginBottom: 3\n  },\n  activeTabBadgeContainerStyle: {\n    backgroundColor: 'white'\n  },\n  tabBadgeStyle: {\n    color: 'white',\n    fontSize: 11,\n    fontWeight: 'bold'\n  },\n  activeTabBadgeStyle: {\n    color: 'black'\n  }\n});\n\nvar TabOption = function (_PureComponent) {\n  _inherits(TabOption, _PureComponent);\n\n  function TabOption() {\n    _classCallCheck(this, TabOption);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TabOption).apply(this, arguments));\n  }\n\n  _createClass(TabOption, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          isTabActive = _this$props.isTabActive,\n          index = _this$props.index,\n          badge = _this$props.badge,\n          text = _this$props.text,\n          firstTabStyle = _this$props.firstTabStyle,\n          lastTabStyle = _this$props.lastTabStyle,\n          tabStyle = _this$props.tabStyle,\n          activeTabStyle = _this$props.activeTabStyle,\n          tabTextStyle = _this$props.tabTextStyle,\n          activeTabTextStyle = _this$props.activeTabTextStyle,\n          tabBadgeContainerStyle = _this$props.tabBadgeContainerStyle,\n          activeTabBadgeContainerStyle = _this$props.activeTabBadgeContainerStyle,\n          tabBadgeStyle = _this$props.tabBadgeStyle,\n          activeTabBadgeStyle = _this$props.activeTabBadgeStyle,\n          onTabPress = _this$props.onTabPress,\n          textNumberOfLines = _this$props.textNumberOfLines,\n          allowFontScaling = _this$props.allowFontScaling,\n          accessible = _this$props.accessible,\n          activeTabOpacity = _this$props.activeTabOpacity,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          testID = _this$props.testID,\n          enabled = _this$props.enabled;\n      return _jsx(TouchableOpacity, {\n        style: [styles.tabStyle, tabStyle, isTabActive ? [styles.activeTabStyle, activeTabStyle] : {}, firstTabStyle, lastTabStyle],\n        accessible: accessible,\n        testID: testID,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: isTabActive ? 'selected' : 'button',\n        accessibilityComponentType: \"button\",\n        onPress: function onPress() {\n          return onTabPress(index);\n        },\n        disabled: !enabled,\n        activeOpacity: activeTabOpacity,\n        children: _jsxs(View, {\n          style: {\n            flexDirection: 'row'\n          },\n          children: [_jsx(Text, {\n            style: [styles.tabTextStyle, tabTextStyle, isTabActive ? [styles.activeTabTextStyle, activeTabTextStyle] : {}],\n            numberOfLines: textNumberOfLines,\n            allowFontScaling: allowFontScaling,\n            ellipsizeMode: \"tail\",\n            children: text\n          }), Boolean(badge) && _jsx(View, {\n            style: [styles.tabBadgeContainerStyle, tabBadgeContainerStyle, isTabActive ? [styles.activeTabBadgeContainerStyle, activeTabBadgeContainerStyle] : {}],\n            children: _jsx(Text, {\n              style: [styles.tabBadgeStyle, tabBadgeStyle, isTabActive ? [styles.activeTabBadgeStyle, activeTabBadgeStyle] : {}],\n              allowFontScaling: allowFontScaling,\n              children: badge\n            })\n          })]\n        })\n      });\n    }\n  }]);\n\n  return TabOption;\n}(PureComponent);\n\nTabOption.defaultProps = {\n  isTabActive: false,\n  index: 0,\n  badge: '',\n  firstTabStyle: {},\n  lastTabStyle: {},\n  tabStyle: {},\n  activeTabStyle: {},\n  tabTextStyle: {},\n  activeTabTextStyle: {},\n  tabBadgeContainerStyle: {},\n  activeTabBadgeContainerStyle: {},\n  tabBadgeStyle: {},\n  activeTabBadgeStyle: {},\n  textNumberOfLines: 1,\n  allowFontScaling: false,\n  accessible: true,\n  activeTabOpacity: 1,\n  accessibilityLabel: '',\n  testID: '',\n  enabled: false,\n  onTabPress: function onTabPress() {}\n};\nexport { TabOption as default };","map":{"version":3,"names":["React","PureComponent","styles","StyleSheet","create","tabStyle","paddingVertical","flex","justifyContent","alignItems","borderColor","borderWidth","backgroundColor","activeTabStyle","tabTextStyle","color","activeTabTextStyle","tabBadgeContainerStyle","borderRadius","paddingLeft","paddingRight","marginLeft","marginBottom","activeTabBadgeContainerStyle","tabBadgeStyle","fontSize","fontWeight","activeTabBadgeStyle","TabOption","props","isTabActive","index","badge","text","firstTabStyle","lastTabStyle","onTabPress","textNumberOfLines","allowFontScaling","accessible","activeTabOpacity","accessibilityLabel","testID","enabled","flexDirection","Boolean","defaultProps"],"sources":["E:/works/android/20220927/flicknplayreacttv-react/node_modules/react-native-segmented-control-tab/src/TabOption.js"],"sourcesContent":["/* @flow */\n\nimport React, { PureComponent } from 'react'\nimport {\n  View,\n  TouchableOpacity,\n  StyleSheet,\n  Text,\n} from 'react-native'\n\n\nimport type {\n  ViewStyleProp,\n  TextStyleProp,\n} from 'react-native/Libraries/StyleSheet/StyleSheet'\n\ntype Props = {\n  isTabActive?: boolean,\n  index?: number,\n  badge?: any,\n  text: string,\n  firstTabStyle?: ViewStyleProp,\n  lastTabStyle?: ViewStyleProp,\n  tabStyle?: ViewStyleProp,\n  activeTabStyle?: ViewStyleProp,\n  tabTextStyle?: TextStyleProp,\n  activeTabTextStyle?: TextStyleProp,\n  tabBadgeContainerStyle?: TextStyleProp,\n  activeTabBadgeContainerStyle?: TextStyleProp,\n  tabBadgeStyle?: TextStyleProp,\n  activeTabBadgeStyle?: TextStyleProp,\n  onTabPress: Function,\n  textNumberOfLines?: number,\n  allowFontScaling?: boolean,\n  accessible?: boolean,\n  activeTabOpacity?: number,\n  accessibilityLabel?: string,\n  testID?: string;\n  enabled?: boolean,\n}\n\nconst styles = StyleSheet.create({\n  tabStyle: {\n    paddingVertical: 5,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#0076FF',\n    borderWidth: 1,\n    backgroundColor: 'white',\n  },\n  activeTabStyle: {\n    backgroundColor: '#0076FF',\n  },\n  tabTextStyle: {\n    color: '#0076FF',\n  },\n  activeTabTextStyle: {\n    color: 'white',\n  },\n  tabBadgeContainerStyle: {\n    borderRadius: 20,\n    backgroundColor: 'red',\n    paddingLeft: 5,\n    paddingRight: 5,\n    marginLeft: 5,\n    marginBottom: 3,\n  },\n  activeTabBadgeContainerStyle: {\n    backgroundColor: 'white',\n  },\n  tabBadgeStyle: {\n    color: 'white',\n    fontSize: 11,\n    fontWeight: 'bold',\n  },\n  activeTabBadgeStyle: {\n    color: 'black',\n  },\n})\n\nexport default class TabOption extends PureComponent<Props> {\n  static defaultProps = {\n    isTabActive: false,\n    index: 0,\n    badge: '',\n    firstTabStyle: {},\n    lastTabStyle: {},\n    tabStyle: {},\n    activeTabStyle: {},\n    tabTextStyle: {},\n    activeTabTextStyle: {},\n    tabBadgeContainerStyle: {},\n    activeTabBadgeContainerStyle: {},\n    tabBadgeStyle: {},\n    activeTabBadgeStyle: {},\n    textNumberOfLines: 1,\n    allowFontScaling: false,\n    accessible: true,\n    activeTabOpacity: 1,\n    accessibilityLabel: '',\n    testID: '',\n    enabled: false,\n    onTabPress: () => {},\n  };\n\n  render() {\n    const {\n      isTabActive,\n      index,\n      badge,\n      text,\n      firstTabStyle,\n      lastTabStyle,\n      tabStyle,\n      activeTabStyle,\n      tabTextStyle,\n      activeTabTextStyle,\n      tabBadgeContainerStyle,\n      activeTabBadgeContainerStyle,\n      tabBadgeStyle,\n      activeTabBadgeStyle,\n      onTabPress,\n      textNumberOfLines,\n      allowFontScaling,\n      accessible,\n      activeTabOpacity,\n      accessibilityLabel,\n      testID,\n      enabled,\n    } = this.props\n    return (\n      <TouchableOpacity\n        style={[\n          styles.tabStyle,\n          tabStyle,\n          isTabActive ? [styles.activeTabStyle, activeTabStyle] : {},\n          firstTabStyle,\n          lastTabStyle,\n        ]}\n        accessible={accessible}\n        testID={testID}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityTraits={isTabActive ? 'selected' : 'button'}\n        accessibilityComponentType=\"button\"\n        onPress={() => onTabPress(index)}\n        disabled={!enabled}\n        activeOpacity={activeTabOpacity}\n      >\n        <View style={{ flexDirection: 'row' }}>\n          <Text\n            style={[\n              styles.tabTextStyle,\n              tabTextStyle,\n              isTabActive\n                ? [styles.activeTabTextStyle, activeTabTextStyle]\n                : {},\n            ]}\n            numberOfLines={textNumberOfLines}\n            allowFontScaling={allowFontScaling}\n            ellipsizeMode=\"tail\"\n          >\n            {text}\n          </Text>\n          {Boolean(badge) && (\n            <View\n              style={[\n                styles.tabBadgeContainerStyle,\n                tabBadgeContainerStyle,\n                isTabActive\n                  ? [\n                    styles.activeTabBadgeContainerStyle,\n                    activeTabBadgeContainerStyle,\n                  ]\n                  : {},\n              ]}\n            >\n              <Text\n                style={[\n                  styles.tabBadgeStyle,\n                  tabBadgeStyle,\n                  isTabActive\n                    ? [styles.activeTabBadgeStyle, activeTabBadgeStyle]\n                    : {},\n                ]}\n                allowFontScaling={allowFontScaling}\n              >\n                {badge}\n              </Text>\n            </View>\n          )}\n        </View>\n      </TouchableOpacity>\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}