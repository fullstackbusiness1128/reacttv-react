{"ast":null,"code":"import { LABEL_PADDING_HORIZONTAL, ADORNMENT_OFFSET, ADORNMENT_SIZE, FLAT_INPUT_OFFSET } from \"./constants\";\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\nexport var calculateLabelTopPosition = function calculateLabelTopPosition(labelHeight) {\n  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var optionalPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var customHeight = height > 0 ? height : 0;\n  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\n};\nexport var calculateInputHeight = function calculateInputHeight(labelHeight) {\n  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var minHeight = arguments.length > 2 ? arguments[2] : undefined;\n  var finalHeight = height > 0 ? height : labelHeight;\n  if (height > 0) return height;\n  return finalHeight < minHeight ? minHeight : finalHeight;\n};\nexport var calculatePadding = function calculatePadding(props) {\n  var height = props.height,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline;\n  var result = 0;\n\n  if (multiline) {\n    if (height && multiline) {\n      result = calculateTextAreaPadding(props);\n    } else {\n      result = calculateInputPadding(props);\n    }\n  }\n\n  return Math.max(0, result);\n};\n\nvar calculateTextAreaPadding = function calculateTextAreaPadding(props) {\n  var dense = props.dense;\n  return dense ? 10 : 20;\n};\n\nvar calculateInputPadding = function calculateInputPadding(_ref) {\n  var topPosition = _ref.topPosition,\n      fontSize = _ref.fontSize,\n      multiline = _ref.multiline,\n      scale = _ref.scale,\n      dense = _ref.dense,\n      offset = _ref.offset,\n      isAndroid = _ref.isAndroid;\n  var refFontSize = scale * fontSize;\n  var result = Math.floor(topPosition / 2);\n  result = result + Math.floor((refFontSize - fontSize) / 2) - (scale < 1 ? offset / 2 : 0);\n  if (multiline && isAndroid) result = Math.min(dense ? offset / 2 : offset, result);\n  return result;\n};\n\nexport var adjustPaddingOut = function adjustPaddingOut(_ref2) {\n  var pad = _ref2.pad,\n      multiline = _ref2.multiline,\n      label = _ref2.label,\n      scale = _ref2.scale,\n      height = _ref2.height,\n      fontSize = _ref2.fontSize,\n      lineHeight = _ref2.lineHeight,\n      dense = _ref2.dense,\n      offset = _ref2.offset,\n      isAndroid = _ref2.isAndroid;\n  var fontHeight = lineHeight !== null && lineHeight !== void 0 ? lineHeight : fontSize;\n  var refFontHeight = scale * fontSize;\n  var result = pad;\n\n  if (height && !multiline) {\n    return {\n      paddingTop: Math.max(0, (height - fontHeight) / 2),\n      paddingBottom: Math.max(0, (height - fontHeight) / 2)\n    };\n  }\n\n  if (!isAndroid && multiline) {\n    if (dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, refFontHeight / 2 * scale) : 0;\n      } else {\n        result += 0;\n      }\n    }\n\n    if (!dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, refFontHeight * scale) : Math.min(offset / 2, refFontHeight * scale);\n      } else {\n        result += scale < 1 ? Math.min(offset / 2, refFontHeight * scale) : 0;\n      }\n    }\n\n    result = Math.floor(result);\n  }\n\n  return {\n    paddingTop: result,\n    paddingBottom: result\n  };\n};\nexport var adjustPaddingFlat = function adjustPaddingFlat(_ref3) {\n  var pad = _ref3.pad,\n      scale = _ref3.scale,\n      multiline = _ref3.multiline,\n      label = _ref3.label,\n      height = _ref3.height,\n      offset = _ref3.offset,\n      dense = _ref3.dense,\n      fontSize = _ref3.fontSize,\n      isAndroid = _ref3.isAndroid,\n      styles = _ref3.styles;\n  var result = pad;\n  var topResult = result;\n  var bottomResult = result;\n  var paddingTop = styles.paddingTop,\n      paddingBottom = styles.paddingBottom;\n  var refFontSize = scale * fontSize;\n\n  if (!multiline) {\n    if (label) {\n      return {\n        paddingTop: paddingTop,\n        paddingBottom: paddingBottom\n      };\n    }\n\n    return {\n      paddingTop: result,\n      paddingBottom: result\n    };\n  }\n\n  if (label) {\n    topResult = paddingTop;\n    bottomResult = paddingBottom;\n\n    if (!isAndroid) {\n      if (dense) {\n        topResult += scale < 1 ? Math.min(result, refFontSize * scale) - result / 2 : Math.min(result, refFontSize * scale) - result / 2;\n      }\n\n      if (!dense) {\n        topResult += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : Math.min(result, refFontSize * scale) - offset / 2;\n      }\n    }\n\n    topResult = Math.floor(topResult);\n  } else {\n    if (height) {\n      return {\n        paddingTop: Math.max(0, (height - fontSize) / 2),\n        paddingBottom: Math.max(0, (height - fontSize) / 2)\n      };\n    }\n\n    if (!isAndroid) {\n      if (dense) {\n        result += scale < 1 ? Math.min(offset / 2, fontSize / 2 * scale) : Math.min(offset / 2, scale);\n      }\n\n      if (!dense) {\n        result += scale < 1 ? Math.min(offset, fontSize * scale) : Math.min(fontSize, offset / 2 * scale);\n      }\n\n      result = Math.floor(result);\n      topResult = result;\n      bottomResult = result;\n    }\n  }\n\n  return {\n    paddingTop: Math.max(0, topResult),\n    paddingBottom: Math.max(0, bottomResult)\n  };\n};\nexport var interpolatePlaceholder = function interpolatePlaceholder(labeled, hasActiveOutline) {\n  return labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasActiveOutline ? 0 : 1, 1]\n  });\n};\nexport function calculateFlatAffixTopPosition(_ref4) {\n  var height = _ref4.height,\n      paddingTop = _ref4.paddingTop,\n      paddingBottom = _ref4.paddingBottom,\n      affixHeight = _ref4.affixHeight;\n  var inputHeightWithoutPadding = height - paddingTop - paddingBottom;\n  var halfOfTheInputHeightDecreasedByAffixHeight = (inputHeightWithoutPadding - affixHeight) / 2;\n  return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;\n}\nexport function calculateOutlinedIconAndAffixTopPosition(_ref5) {\n  var height = _ref5.height,\n      affixHeight = _ref5.affixHeight,\n      labelYOffset = _ref5.labelYOffset;\n  return (height - affixHeight + labelYOffset) / 2;\n}\nexport var calculateFlatInputHorizontalPadding = function calculateFlatInputHorizontalPadding(_ref6) {\n  var adornmentConfig = _ref6.adornmentConfig;\n  var paddingLeft = LABEL_PADDING_HORIZONTAL;\n  var paddingRight = LABEL_PADDING_HORIZONTAL;\n  adornmentConfig.forEach(function (_ref7) {\n    var type = _ref7.type,\n        side = _ref7.side;\n\n    if (type === AdornmentType.Icon && side === AdornmentSide.Left) {\n      paddingLeft = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n    } else if (side === AdornmentSide.Right) {\n      if (type === AdornmentType.Affix) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      } else if (type === AdornmentType.Icon) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      }\n    }\n  });\n  return {\n    paddingLeft: paddingLeft,\n    paddingRight: paddingRight\n  };\n};\nexport function areLabelsEqual(label1, label2) {\n  if (label1 === label2) {\n    return true;\n  }\n\n  if (!(label1 || label2)) {\n    return true;\n  }\n\n  if (!(label1 && label2)) {\n    return false;\n  }\n\n  if (typeof label1 !== typeof label2) {\n    return false;\n  }\n\n  if (typeof label1 === 'string' || label1 instanceof String || typeof label2 === 'string' || label2 instanceof String) {\n    return false;\n  }\n\n  if (label1.type !== label2.type) {\n    return false;\n  }\n\n  var label1Props = label1.props || {};\n  var label2Props = label2.props || {};\n\n  if (JSON.stringify(label1Props) !== JSON.stringify(label2Props)) {\n    return false;\n  }\n\n  if (!(label1Props.children || label2Props.children)) {\n    return true;\n  }\n\n  if (!(label1Props.children && label2Props.children)) {\n    return false;\n  }\n\n  var label1IsArray = Array.isArray(label1Props.children);\n  var label2IsArray = Array.isArray(label2Props.children);\n\n  if (label1IsArray && label2IsArray) {\n    var children1 = label1Props.children;\n    var children2 = label2Props.children;\n\n    if (children1.length !== children2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < children1.length; i++) {\n      if (!areLabelsEqual(children1[i], children2[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (label1IsArray || label2IsArray) {\n    return false;\n  }\n\n  return areLabelsEqual(label1Props.children, label2Props.children);\n}","map":{"version":3,"mappings":"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","names":["LABEL_PADDING_HORIZONTAL","ADORNMENT_OFFSET","ADORNMENT_SIZE","FLAT_INPUT_OFFSET","AdornmentType","AdornmentSide","calculateLabelTopPosition","labelHeight","height","optionalPadding","customHeight","Math","floor","calculateInputHeight","minHeight","finalHeight","calculatePadding","props","multiline","result","calculateTextAreaPadding","calculateInputPadding","max","dense","topPosition","fontSize","scale","offset","isAndroid","refFontSize","min","adjustPaddingOut","pad","label","lineHeight","fontHeight","refFontHeight","paddingTop","paddingBottom","adjustPaddingFlat","styles","topResult","bottomResult","interpolatePlaceholder","labeled","hasActiveOutline","interpolate","inputRange","outputRange","calculateFlatAffixTopPosition","affixHeight","inputHeightWithoutPadding","halfOfTheInputHeightDecreasedByAffixHeight","calculateOutlinedIconAndAffixTopPosition","labelYOffset","calculateFlatInputHorizontalPadding","adornmentConfig","paddingLeft","paddingRight","forEach","type","side","Icon","Left","Right","Affix","areLabelsEqual","label1","label2","String","label1Props","label2Props","JSON","stringify","children","label1IsArray","Array","isArray","label2IsArray","children1","children2","length","i"],"sources":["helpers.tsx"],"sourcesContent":["import type { Animated } from 'react-native';\nimport type { AdornmentConfig } from './Adornment/types';\nimport {\n  LABEL_PADDING_HORIZONTAL,\n  ADORNMENT_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\nimport type { TextInputLabelProp } from './types';\n\ntype PaddingProps = {\n  height: number | null;\n  labelHalfHeight: number;\n  multiline: boolean | null;\n  dense: boolean | null;\n  topPosition: number;\n  fontSize: number;\n  lineHeight?: number;\n  label?: TextInputLabelProp | null;\n  scale: number;\n  offset: number;\n  isAndroid: boolean;\n  styles: { paddingTop: number; paddingBottom: number };\n};\n\ntype AdjProps = PaddingProps & {\n  pad: number;\n};\n\nexport type Padding = { paddingTop: number; paddingBottom: number };\n\nexport const calculateLabelTopPosition = (\n  labelHeight: number,\n  height: number = 0,\n  optionalPadding: number = 0\n): number => {\n  const customHeight = height > 0 ? height : 0;\n\n  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\n};\n\nexport const calculateInputHeight = (\n  labelHeight: number,\n  height: any = 0,\n  minHeight: number\n): number => {\n  const finalHeight = height > 0 ? height : labelHeight;\n\n  if (height > 0) return height;\n  return finalHeight < minHeight ? minHeight : finalHeight;\n};\n\nexport const calculatePadding = (props: PaddingProps): number => {\n  const { height, multiline = false } = props;\n\n  let result = 0;\n\n  if (multiline) {\n    if (height && multiline) {\n      result = calculateTextAreaPadding(props);\n    } else {\n      result = calculateInputPadding(props);\n    }\n  }\n\n  return Math.max(0, result);\n};\n\nconst calculateTextAreaPadding = (props: PaddingProps) => {\n  const { dense } = props;\n\n  return dense ? 10 : 20;\n};\n\nconst calculateInputPadding = ({\n  topPosition,\n  fontSize,\n  multiline,\n  scale,\n  dense,\n  offset,\n  isAndroid,\n}: PaddingProps): number => {\n  const refFontSize = scale * fontSize;\n  let result = Math.floor(topPosition / 2);\n\n  result =\n    result +\n    Math.floor((refFontSize - fontSize) / 2) -\n    (scale < 1 ? offset / 2 : 0);\n\n  if (multiline && isAndroid)\n    result = Math.min(dense ? offset / 2 : offset, result);\n\n  return result;\n};\n\nexport const adjustPaddingOut = ({\n  pad,\n  multiline,\n  label,\n  scale,\n  height,\n  fontSize,\n  lineHeight,\n  dense,\n  offset,\n  isAndroid,\n}: AdjProps): Padding => {\n  const fontHeight = lineHeight ?? fontSize;\n  const refFontHeight = scale * fontSize;\n  let result = pad;\n\n  if (height && !multiline) {\n    return {\n      paddingTop: Math.max(0, (height - fontHeight) / 2),\n      paddingBottom: Math.max(0, (height - fontHeight) / 2),\n    };\n  }\n  if (!isAndroid && multiline) {\n    if (dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, (refFontHeight / 2) * scale) : 0;\n      } else {\n        result += 0;\n      }\n    }\n    if (!dense) {\n      if (label) {\n        result +=\n          scale < 1\n            ? Math.min(offset, refFontHeight * scale)\n            : Math.min(offset / 2, refFontHeight * scale);\n      } else {\n        result += scale < 1 ? Math.min(offset / 2, refFontHeight * scale) : 0;\n      }\n    }\n    result = Math.floor(result);\n  }\n  return { paddingTop: result, paddingBottom: result };\n};\n\nexport const adjustPaddingFlat = ({\n  pad,\n  scale,\n  multiline,\n  label,\n  height,\n  offset,\n  dense,\n  fontSize,\n  isAndroid,\n  styles,\n}: AdjProps): Padding => {\n  let result = pad;\n  let topResult = result;\n  let bottomResult = result;\n  const { paddingTop, paddingBottom } = styles;\n  const refFontSize = scale * fontSize;\n\n  if (!multiline) {\n    // do not modify padding if input is not multiline\n    if (label) {\n      // return const style for flat input with label\n      return { paddingTop, paddingBottom };\n    }\n    // return pad for flat input without label\n    return { paddingTop: result, paddingBottom: result };\n  }\n\n  if (label) {\n    // add paddings passed from styles\n    topResult = paddingTop;\n    bottomResult = paddingBottom;\n\n    // adjust top padding for iOS\n    if (!isAndroid) {\n      if (dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(result, refFontSize * scale) - result / 2\n            : Math.min(result, refFontSize * scale) - result / 2;\n      }\n      if (!dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(offset / 2, refFontSize * scale)\n            : Math.min(result, refFontSize * scale) - offset / 2;\n      }\n    }\n    topResult = Math.floor(topResult);\n  } else {\n    if (height) {\n      // center text when height is passed\n      return {\n        paddingTop: Math.max(0, (height - fontSize) / 2),\n        paddingBottom: Math.max(0, (height - fontSize) / 2),\n      };\n    }\n    // adjust paddings for iOS if no label\n    if (!isAndroid) {\n      if (dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset / 2, (fontSize / 2) * scale)\n            : Math.min(offset / 2, scale);\n      }\n      if (!dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset, fontSize * scale)\n            : Math.min(fontSize, (offset / 2) * scale);\n      }\n\n      result = Math.floor(result);\n      topResult = result;\n      bottomResult = result;\n    }\n  }\n\n  return {\n    paddingTop: Math.max(0, topResult),\n    paddingBottom: Math.max(0, bottomResult),\n  };\n};\n\nexport const interpolatePlaceholder = (\n  labeled: Animated.Value,\n  hasActiveOutline: boolean | undefined\n) =>\n  labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasActiveOutline ? 0 : 1, 1],\n  });\n\nexport function calculateFlatAffixTopPosition({\n  height,\n  paddingTop,\n  paddingBottom,\n  affixHeight,\n}: {\n  height: number;\n  paddingTop: number;\n  paddingBottom: number;\n  affixHeight: number;\n}): number {\n  const inputHeightWithoutPadding = height - paddingTop - paddingBottom;\n\n  const halfOfTheInputHeightDecreasedByAffixHeight =\n    (inputHeightWithoutPadding - affixHeight) / 2;\n\n  return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;\n}\n\nexport function calculateOutlinedIconAndAffixTopPosition({\n  height,\n  affixHeight,\n  labelYOffset,\n}: {\n  height: number;\n  affixHeight: number;\n  labelYOffset: number;\n}): number {\n  return (height - affixHeight + labelYOffset) / 2;\n}\n\nexport const calculateFlatInputHorizontalPadding = ({\n  adornmentConfig,\n}: {\n  adornmentConfig: AdornmentConfig[];\n}) => {\n  let paddingLeft = LABEL_PADDING_HORIZONTAL;\n  let paddingRight = LABEL_PADDING_HORIZONTAL;\n\n  adornmentConfig.forEach(({ type, side }) => {\n    if (type === AdornmentType.Icon && side === AdornmentSide.Left) {\n      paddingLeft = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n    } else if (side === AdornmentSide.Right) {\n      if (type === AdornmentType.Affix) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      } else if (type === AdornmentType.Icon) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      }\n    }\n  });\n\n  return { paddingLeft, paddingRight };\n};\n\nexport function areLabelsEqual(\n  label1?: TextInputLabelProp,\n  label2?: TextInputLabelProp\n): boolean {\n  if (label1 === label2) {\n    // will also take care of equality for `string` type, or if both are undefined.\n    return true;\n  }\n\n  // Return true if both of them are falsy.\n  if (!(label1 || label2)) {\n    return true;\n  }\n\n  // At this point, both of them cannot be false.\n  // So, return false if any of them is falsy.\n  if (!(label1 && label2)) {\n    return false;\n  }\n\n  // At this point, both of them has to be truthy.\n  // So, return false if they are not of the same type.\n  if (typeof label1 !== typeof label2) {\n    return false;\n  }\n\n  // At this point, both of them has to be of the same datatype.\n  if (\n    typeof label1 === 'string' ||\n    label1 instanceof String ||\n    // These last two OR checks are only here for Typescript's sake.\n    typeof label2 === 'string' ||\n    label2 instanceof String\n  ) {\n    // They're strings, so they won't be equal; otherwise\n    //  we would have returned 'true' earlier.\n    return false;\n  }\n\n  // At this point, both of them has to be of the datatype: `React.ReactElement`.\n  if (label1.type !== label2.type) {\n    return false;\n  }\n\n  // Preliminary equality check: do they stringify to the same string?\n  const label1Props = label1.props || {};\n  const label2Props = label2.props || {};\n  if (JSON.stringify(label1Props) !== JSON.stringify(label2Props)) {\n    return false;\n  }\n\n  // We now know they stringify to the same string.\n  // Return true if both of them DO NOT have children\n  if (!(label1Props.children || label2Props.children)) {\n    return true; // since there's nothing else to check\n  }\n\n  // Return false if only one of them has children\n  if (!(label1Props.children && label2Props.children)) {\n    return false;\n  }\n\n  // Both have children...\n  // Handle for when both the children are arrays\n  const label1IsArray = Array.isArray(label1Props.children);\n  const label2IsArray = Array.isArray(label2Props.children);\n  if (label1IsArray && label2IsArray) {\n    const children1 = label1Props.children as any[];\n    const children2 = label2Props.children as any[];\n    if (children1.length !== children2.length) {\n      return false; // no point proceeding\n    }\n\n    // all the children must also be equal\n    for (let i = 0; i < children1.length; i++) {\n      if (!areLabelsEqual(children1[i], children2[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // Only one of them can be an array at this point. If any is array, return false\n  if (label1IsArray || label2IsArray) {\n    return false;\n  }\n\n  // both children are not arrays, so recur.\n  return areLabelsEqual(label1Props.children, label2Props.children);\n}\n"]},"metadata":{},"sourceType":"module"}