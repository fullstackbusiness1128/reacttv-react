{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Command = void 0;\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar resolveAssetSource_1 = __importDefault(require(\"react-native/Libraries/Image/resolveAssetSource\"));\n\nvar constants_1 = __importDefault(require(\"./constants\"));\n\nvar types_1 = require(\"./types\");\n\nObject.defineProperty(exports, \"Command\", {\n  enumerable: true,\n  get: function get() {\n    return types_1.Command;\n  }\n});\nvar NativeMusicControl = react_native_1.NativeModules.MusicControlManager;\nvar handlers = {};\nvar listenerOfNativeMusicControl = null;\nvar IS_ANDROID = react_native_1.Platform.OS === 'android';\nvar MusicControl = {\n  STATE_PLAYING: constants_1.default.STATE_PLAYING,\n  STATE_PAUSED: constants_1.default.STATE_PAUSED,\n  STATE_ERROR: constants_1.default.STATE_ERROR,\n  STATE_STOPPED: constants_1.default.STATE_STOPPED,\n  STATE_BUFFERING: constants_1.default.STATE_BUFFERING,\n  RATING_HEART: constants_1.default.RATING_HEART,\n  RATING_THUMBS_UP_DOWN: constants_1.default.RATING_THUMBS_UP_DOWN,\n  RATING_3_STARS: constants_1.default.RATING_3_STARS,\n  RATING_4_STARS: constants_1.default.RATING_4_STARS,\n  RATING_5_STARS: constants_1.default.RATING_5_STARS,\n  RATING_PERCENTAGE: constants_1.default.RATING_PERCENTAGE,\n  enableBackgroundMode: function enableBackgroundMode(enable) {\n    NativeMusicControl.enableBackgroundMode(enable);\n  },\n  setNowPlaying: function setNowPlaying(info) {\n    if (info.artwork) {\n      info.artwork = resolveAssetSource_1.default(info.artwork) || info.artwork;\n    }\n\n    NativeMusicControl.setNowPlaying(info);\n  },\n  setPlayback: function setPlayback(info) {\n    NativeMusicControl.updatePlayback(info);\n  },\n  updatePlayback: function updatePlayback(info) {\n    NativeMusicControl.updatePlayback(info);\n  },\n  resetNowPlaying: function resetNowPlaying() {\n    NativeMusicControl.resetNowPlaying();\n  },\n  enableControl: function enableControl(controlName, enable, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    NativeMusicControl.enableControl(controlName, enable, options || {});\n  },\n  handleCommand: function handleCommand(commandName, value) {\n    if (handlers[commandName]) {\n      handlers[commandName](value);\n    }\n  },\n  setNotificationId: function setNotificationId(notificationId, channelId) {\n    if (IS_ANDROID) {\n      NativeMusicControl.setNotificationIds(notificationId, channelId);\n    }\n  },\n  on: function on(actionName, cb) {\n    if (!listenerOfNativeMusicControl) {\n      listenerOfNativeMusicControl = (IS_ANDROID ? react_native_1.DeviceEventEmitter : new react_native_1.NativeEventEmitter(NativeMusicControl)).addListener('RNMusicControlEvent', function (event) {\n        MusicControl.handleCommand(event.name, event.value);\n      });\n    }\n\n    handlers[actionName] = cb;\n  },\n  off: function off(actionName) {\n    delete handlers[actionName];\n\n    if (!Object.keys(handlers).length && listenerOfNativeMusicControl) {\n      listenerOfNativeMusicControl.remove();\n      listenerOfNativeMusicControl = null;\n    }\n  },\n  stopControl: function stopControl() {\n    if (listenerOfNativeMusicControl) {\n      listenerOfNativeMusicControl.remove();\n      listenerOfNativeMusicControl = null;\n    }\n\n    Object.keys(handlers).map(function (key) {\n      delete handlers[key];\n    });\n    NativeMusicControl.stopControl();\n  },\n  handleAudioInterruptions: function handleAudioInterruptions(enable) {\n    NativeMusicControl.observeAudioInterruptions(enable);\n  }\n};\nexports.default = MusicControl;","map":{"version":3,"sources":["/home/codenomad/Documents/flicknplayreacttv/node_modules/react-native-music-control/lib/index.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Command","resolveAssetSource_1","require","constants_1","types_1","enumerable","get","NativeMusicControl","react_native_1","NativeModules","MusicControlManager","handlers","listenerOfNativeMusicControl","IS_ANDROID","Platform","OS","MusicControl","STATE_PLAYING","default","STATE_PAUSED","STATE_ERROR","STATE_STOPPED","STATE_BUFFERING","RATING_HEART","RATING_THUMBS_UP_DOWN","RATING_3_STARS","RATING_4_STARS","RATING_5_STARS","RATING_PERCENTAGE","enableBackgroundMode","enable","setNowPlaying","info","artwork","setPlayback","updatePlayback","resetNowPlaying","enableControl","controlName","options","handleCommand","commandName","setNotificationId","notificationId","channelId","setNotificationIds","on","actionName","cb","DeviceEventEmitter","NativeEventEmitter","addListener","event","name","off","keys","length","remove","stopControl","map","key","handleAudioInterruptions","observeAudioInterruptions"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Command = void 0;\n/**\n * @providesModule MusicControl\n */\n// @ts-ignore\nvar react_native_1 = require(\"react-native\");\n// @ts-ignore\nvar resolveAssetSource_1 = __importDefault(require(\"react-native/Libraries/Image/resolveAssetSource\"));\n// @ts-ignore\nvar constants_1 = __importDefault(require(\"./constants\"));\nvar types_1 = require(\"./types\");\nObject.defineProperty(exports, \"Command\", { enumerable: true, get: function () { return types_1.Command; } });\nvar NativeMusicControl = react_native_1.NativeModules.MusicControlManager;\nvar handlers = {};\nvar listenerOfNativeMusicControl = null;\nvar IS_ANDROID = react_native_1.Platform.OS === 'android';\nvar MusicControl = {\n    STATE_PLAYING: constants_1.default.STATE_PLAYING,\n    STATE_PAUSED: constants_1.default.STATE_PAUSED,\n    STATE_ERROR: constants_1.default.STATE_ERROR,\n    STATE_STOPPED: constants_1.default.STATE_STOPPED,\n    STATE_BUFFERING: constants_1.default.STATE_BUFFERING,\n    RATING_HEART: constants_1.default.RATING_HEART,\n    RATING_THUMBS_UP_DOWN: constants_1.default.RATING_THUMBS_UP_DOWN,\n    RATING_3_STARS: constants_1.default.RATING_3_STARS,\n    RATING_4_STARS: constants_1.default.RATING_4_STARS,\n    RATING_5_STARS: constants_1.default.RATING_5_STARS,\n    RATING_PERCENTAGE: constants_1.default.RATING_PERCENTAGE,\n    enableBackgroundMode: function (enable) {\n        NativeMusicControl.enableBackgroundMode(enable);\n    },\n    setNowPlaying: function (info) {\n        // Check if we have an android asset from react style image require\n        if (info.artwork) {\n            info.artwork = resolveAssetSource_1.default(info.artwork) || info.artwork;\n        }\n        NativeMusicControl.setNowPlaying(info);\n    },\n    setPlayback: function (info) {\n        // Backwards compatibility. Use updatePlayback instead.\n        NativeMusicControl.updatePlayback(info);\n    },\n    updatePlayback: function (info) {\n        NativeMusicControl.updatePlayback(info);\n    },\n    resetNowPlaying: function () {\n        NativeMusicControl.resetNowPlaying();\n    },\n    enableControl: function (controlName, enable, options) {\n        if (options === void 0) { options = {}; }\n        NativeMusicControl.enableControl(controlName, enable, options || {});\n    },\n    handleCommand: function (commandName, value) {\n        if (handlers[commandName]) {\n            //@ts-ignore\n            handlers[commandName](value);\n        }\n    },\n    setNotificationId: function (notificationId, channelId) {\n        if (IS_ANDROID) {\n            NativeMusicControl.setNotificationIds(notificationId, channelId);\n        }\n    },\n    on: function (actionName, cb) {\n        if (!listenerOfNativeMusicControl) {\n            listenerOfNativeMusicControl = (IS_ANDROID\n                ? react_native_1.DeviceEventEmitter\n                : new react_native_1.NativeEventEmitter(NativeMusicControl)).addListener('RNMusicControlEvent', function (event) {\n                MusicControl.handleCommand(event.name, event.value);\n            });\n        }\n        handlers[actionName] = cb;\n    },\n    off: function (actionName) {\n        delete handlers[actionName];\n        if (!Object.keys(handlers).length && listenerOfNativeMusicControl) {\n            listenerOfNativeMusicControl.remove();\n            listenerOfNativeMusicControl = null;\n        }\n    },\n    stopControl: function () {\n        if (listenerOfNativeMusicControl) {\n            listenerOfNativeMusicControl.remove();\n            listenerOfNativeMusicControl = null;\n        }\n        Object.keys(handlers).map(function (key) {\n            //@ts-ignore\n            delete handlers[key];\n        });\n        NativeMusicControl.stopControl();\n    },\n    handleAudioInterruptions: function (enable) {\n        NativeMusicControl.observeAudioInterruptions(enable);\n    }\n};\nexports.default = MusicControl;\n"]},"metadata":{},"sourceType":"script"}