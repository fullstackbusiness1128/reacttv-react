{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { white, black } from \"../../styles/colors\";\nimport CardContent from \"./CardContent\";\nimport CardActions from \"./CardActions\";\nimport CardCover from \"./CardCover\";\nimport CardTitle from \"./CardTitle\";\nimport Surface from \"../Surface\";\nimport { withTheme } from \"../../core/theming\";\n\nvar Card = function Card(_ref) {\n  var _ref$elevation = _ref.elevation,\n      cardElevation = _ref$elevation === void 0 ? 1 : _ref$elevation,\n      onLongPress = _ref.onLongPress,\n      onPress = _ref.onPress,\n      _ref$mode = _ref.mode,\n      cardMode = _ref$mode === void 0 ? 'elevated' : _ref$mode,\n      children = _ref.children,\n      style = _ref.style,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      accessible = _ref.accessible,\n      rest = _objectWithoutProperties(_ref, [\"elevation\", \"onLongPress\", \"onPress\", \"mode\", \"children\", \"style\", \"theme\", \"testID\", \"accessible\"]);\n\n  var _React$useRef = React.useRef(new Animated.Value(cardElevation)),\n      elevation = _React$useRef.current;\n\n  var animation = theme.animation,\n      dark = theme.dark,\n      mode = theme.mode,\n      roundness = theme.roundness;\n\n  var handlePressIn = function handlePressIn() {\n    var dark = theme.dark,\n        mode = theme.mode,\n        scale = theme.animation.scale;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact'\n    }).start();\n  };\n\n  var handlePressOut = function handlePressOut() {\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * animation.scale,\n      useNativeDriver: !dark || mode === 'exact'\n    }).start();\n  };\n\n  var total = React.Children.count(children);\n  var siblings = React.Children.map(children, function (child) {\n    return React.isValidElement(child) && child.type ? child.type.displayName : null;\n  });\n  var borderColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n  return React.createElement(Surface, _extends({\n    style: [{\n      borderRadius: roundness,\n      elevation: elevation,\n      borderColor: borderColor\n    }, cardMode === 'outlined' ? styles.outlined : {}, style],\n    theme: theme\n  }, rest), React.createElement(TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: !(onPress || onLongPress),\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPress || onLongPress ? handlePressIn : undefined,\n    onPressOut: onPress || onLongPress ? handlePressOut : undefined,\n    testID: testID,\n    accessible: accessible\n  }, React.createElement(View, {\n    style: styles.innerContainer\n  }, React.Children.map(children, function (child, index) {\n    return React.isValidElement(child) ? React.cloneElement(child, {\n      index: index,\n      total: total,\n      siblings: siblings\n    }) : child;\n  }))));\n};\n\nCard.Content = CardContent;\nCard.Actions = CardActions;\nCard.Cover = CardCover;\nCard.Title = CardTitle;\nvar styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1\n  }\n});\nexport default withTheme(Card);","map":{"version":3,"mappings":"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","names":["React","color","white","black","CardContent","CardActions","CardCover","CardTitle","Surface","withTheme","Card","elevation","cardElevation","onLongPress","onPress","mode","cardMode","children","style","theme","testID","accessible","rest","useRef","Animated","Value","current","animation","dark","roundness","handlePressIn","scale","timing","toValue","duration","useNativeDriver","start","handlePressOut","total","Children","count","siblings","map","child","isValidElement","type","displayName","borderColor","alpha","rgb","string","borderRadius","styles","outlined","TouchableWithoutFeedback","delayPressIn","disabled","onPressIn","undefined","onPressOut","View","innerContainer","index","cloneElement","Content","Actions","Cover","Title","StyleSheet","create","flexGrow","flexShrink","borderWidth"],"sources":["Card.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { white, black } from '../../styles/colors';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: never | number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `outlined` - Card with an outline.\n   */\n  mode?: 'elevated' | 'outlined';\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps) & Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness } = theme;\n\n  const handlePressIn = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * animation.scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const borderColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <Surface\n      style={[\n        { borderRadius: roundness, elevation, borderColor },\n        cardMode === 'outlined' ? styles.outlined : {},\n        style,\n      ]}\n      theme={theme}\n      {...rest}\n    >\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]},"metadata":{},"sourceType":"module"}