{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport InputLabel from \"./Label/InputLabel\";\nimport LabelBackground from \"./Label/LabelBackground\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, ADORNMENT_OFFSET } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder, calculateOutlinedIconAndAffixTopPosition } from \"./helpers\";\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nvar LABEL_PADDING_TOP = 8;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT = 48;\nvar INPUT_PADDING_HORIZONTAL = 14;\n\nvar TextInputOutlined = function (_React$Component) {\n  _inherits(TextInputOutlined, _React$Component);\n\n  function TextInputOutlined() {\n    _classCallCheck(this, TextInputOutlined);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TextInputOutlined).apply(this, arguments));\n  }\n\n  _createClass(TextInputOutlined, [{\n    key: \"render\",\n    value: function render() {\n      var _affixTopPosition, _onAffixChange, _topPosition;\n\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          editable = _this$props.editable,\n          label = _this$props.label,\n          error = _this$props.error,\n          selectionColor = _this$props.selectionColor,\n          underlineColor = _this$props.underlineColor,\n          customOutlineColor = _this$props.outlineColor,\n          activeOutlineColor = _this$props.activeOutlineColor,\n          dense = _this$props.dense,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          render = _this$props.render,\n          multiline = _this$props.multiline,\n          parentState = _this$props.parentState,\n          innerRef = _this$props.innerRef,\n          onFocus = _this$props.onFocus,\n          forceFocus = _this$props.forceFocus,\n          onBlur = _this$props.onBlur,\n          onChangeText = _this$props.onChangeText,\n          onLayoutAnimatedText = _this$props.onLayoutAnimatedText,\n          onLeftAffixLayoutChange = _this$props.onLeftAffixLayoutChange,\n          onRightAffixLayoutChange = _this$props.onRightAffixLayoutChange,\n          left = _this$props.left,\n          right = _this$props.right,\n          placeholderTextColor = _this$props.placeholderTextColor,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"]);\n\n      var adornmentConfig = getAdornmentConfig({\n        left: left,\n        right: right\n      });\n      var colors = theme.colors,\n          fonts = theme.fonts;\n      var font = fonts.regular;\n      var hasActiveOutline = parentState.focused || error;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          fontSizeStyle = _ref.fontSize,\n          fontWeight = _ref.fontWeight,\n          lineHeight = _ref.lineHeight,\n          height = _ref.height,\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? colors.background : _ref$backgroundColor,\n          textAlign = _ref.textAlign,\n          viewStyle = _objectWithoutProperties(_ref, [\"fontSize\", \"fontWeight\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"]);\n\n      var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n      var inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n      if (disabled) {\n        var isTransparent = color(customOutlineColor).alpha() === 0;\n        inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n        placeholderColor = colors.disabled;\n        outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n      } else {\n        inputTextColor = colors.text;\n        activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n        placeholderColor = colors.placeholder;\n        outlineColor = customOutlineColor || colors.placeholder;\n        errorColor = colors.error;\n      }\n\n      var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n      var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n      var labelWidth = parentState.labelLayout.width;\n      var labelHeight = parentState.labelLayout.height;\n      var labelHalfWidth = labelWidth / 2;\n      var labelHalfHeight = labelHeight / 2;\n      var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n      var labelTranslationXOffset = 0;\n      var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n        var side = _ref2.side,\n            type = _ref2.type;\n        return side === AdornmentSide.Left && type === AdornmentType.Icon;\n      });\n\n      if (isAdornmentLeftIcon) {\n        labelTranslationXOffset = (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n      }\n\n      var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n      var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n      var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n\n      if (height && typeof height !== 'number') {\n        console.warn('Currently we support only numbers in height prop');\n      }\n\n      var paddingSettings = {\n        height: height ? +height : null,\n        labelHalfHeight: labelHalfHeight,\n        offset: LABEL_PADDING_TOP,\n        multiline: multiline ? multiline : null,\n        dense: dense ? dense : null,\n        topPosition: topPosition,\n        fontSize: fontSize,\n        lineHeight: lineHeight,\n        label: label,\n        scale: fontScale,\n        isAndroid: Platform.OS === 'android',\n        styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n      };\n      var pad = calculatePadding(paddingSettings);\n      var paddingOut = adjustPaddingOut(_objectSpread({}, paddingSettings, {\n        pad: pad\n      }));\n      var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n      var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n      var labelProps = {\n        label: label,\n        onLayoutAnimatedText: onLayoutAnimatedText,\n        placeholderOpacity: placeholderOpacity,\n        error: error,\n        placeholderStyle: styles.placeholder,\n        baseLabelTranslateY: baseLabelTranslateY,\n        baseLabelTranslateX: baseLabelTranslateX,\n        font: font,\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        labelScale: labelScale,\n        wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n        topPosition: topPosition,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        placeholderColor: placeholderColor,\n        backgroundColor: backgroundColor,\n        errorColor: errorColor,\n        labelTranslationXOffset: labelTranslationXOffset,\n        roundness: theme.roundness\n      };\n      var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n      var leftLayout = parentState.leftLayout,\n          rightLayout = parentState.rightLayout;\n      var leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n        height: minHeight,\n        affixHeight: leftLayout.height || 0,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n        height: minHeight,\n        affixHeight: rightLayout.height || 0,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n        height: minHeight,\n        affixHeight: ADORNMENT_SIZE,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n      var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n      var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n        adornmentConfig: adornmentConfig,\n        rightAffixWidth: rightAffixWidth,\n        leftAffixWidth: leftAffixWidth,\n        mode: 'outlined'\n      });\n      var affixTopPosition = (_affixTopPosition = {}, _defineProperty2(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty2(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n      var onAffixChange = (_onAffixChange = {}, _defineProperty2(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty2(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n      var adornmentProps = {\n        adornmentConfig: adornmentConfig,\n        forceFocus: forceFocus,\n        topPosition: (_topPosition = {}, _defineProperty2(_topPosition, AdornmentType.Icon, iconTopPosition), _defineProperty2(_topPosition, AdornmentType.Affix, affixTopPosition), _topPosition),\n        onAffixChange: onAffixChange,\n        isTextInputFocused: parentState.focused\n      };\n\n      if (adornmentConfig.length) {\n        adornmentProps = _objectSpread({}, adornmentProps, {\n          left: left,\n          right: right,\n          textStyle: _objectSpread({}, font, {\n            fontSize: fontSize,\n            fontWeight: fontWeight\n          }),\n          visible: this.props.parentState.labeled\n        });\n      }\n\n      return React.createElement(View, {\n        style: viewStyle\n      }, React.createElement(Outline, {\n        theme: theme,\n        hasActiveOutline: hasActiveOutline,\n        focused: parentState.focused,\n        activeColor: activeColor,\n        outlineColor: outlineColor,\n        backgroundColor: backgroundColor\n      }), React.createElement(View, null, React.createElement(View, {\n        style: [styles.labelContainer, {\n          paddingTop: LABEL_PADDING_TOP,\n          minHeight: minHeight\n        }]\n      }, React.createElement(InputLabel, {\n        parentState: parentState,\n        labelProps: labelProps,\n        labelBackground: LabelBackground\n      }), render === null || render === void 0 ? void 0 : render(_objectSpread({\n        testID: 'text-input-outlined'\n      }, rest, {\n        ref: innerRef,\n        onChangeText: onChangeText,\n        placeholder: label ? parentState.placeholder : this.props.placeholder,\n        placeholderTextColor: placeholderTextColor || placeholderColor,\n        editable: !disabled && editable,\n        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        underlineColorAndroid: 'transparent',\n        multiline: multiline,\n        style: [styles.input, !multiline || multiline && height ? {\n          height: inputHeight\n        } : {}, paddingOut, _objectSpread({}, font, {\n          fontSize: fontSize,\n          fontWeight: fontWeight,\n          color: inputTextColor,\n          textAlignVertical: multiline ? 'top' : 'center',\n          textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n        }), Platform.OS === 'web' && {\n          outline: 'none'\n        }, adornmentStyleAdjustmentForNativeInput]\n      }))), React.createElement(TextInputAdornment, adornmentProps)));\n    }\n  }]);\n\n  return TextInputOutlined;\n}(React.Component);\n\n_defineProperty(TextInputOutlined, \"defaultProps\", {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(NativeTextInput, props);\n  }\n});\n\nexport default TextInputOutlined;\n\nvar Outline = function Outline(_ref3) {\n  var theme = _ref3.theme,\n      hasActiveOutline = _ref3.hasActiveOutline,\n      activeColor = _ref3.activeColor,\n      outlineColor = _ref3.outlineColor,\n      focused = _ref3.focused,\n      backgroundColor = _ref3.backgroundColor;\n  return React.createElement(View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: focused ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\n\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"mappings":"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","names":["React","color","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","InputLabel","LabelBackground","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","ADORNMENT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","interpolatePlaceholder","calculateOutlinedIconAndAffixTopPosition","AdornmentType","AdornmentSide","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","props","disabled","editable","label","error","selectionColor","underlineColor","customOutlineColor","outlineColor","activeOutlineColor","dense","style","theme","render","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","adornmentConfig","colors","fonts","font","regular","hasActiveOutline","focused","StyleSheet","flatten","fontSizeStyle","fontSize","fontWeight","lineHeight","height","backgroundColor","background","textAlign","viewStyle","inputTextColor","activeColor","placeholderColor","errorColor","isTransparent","alpha","text","rgb","string","primary","placeholder","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","Left","Icon","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","roundness","minHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","View","Outline","labelContainer","paddingTop","labelBackground","testID","ref","underlineColorAndroid","input","textAlignVertical","outline","Component","NativeTextInput","pointerEvents","borderRadius","borderWidth","borderColor","create","position","paddingHorizontal","top","bottom","paddingBottom","flexGrow","margin","zIndex"],"sources":["TextInputOutlined.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nclass TextInputOutlined extends React.Component<ChildTextInputProps> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      underlineColor,\n      outlineColor: customOutlineColor,\n      activeOutlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n\n    const adornmentConfig = getAdornmentConfig({ left, right });\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      lineHeight,\n      height,\n      backgroundColor = colors.background,\n      textAlign,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n    if (disabled) {\n      const isTransparent = color(customOutlineColor).alpha() === 0;\n\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = colors.disabled;\n      outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n      placeholderColor = colors.placeholder;\n      outlineColor = customOutlineColor || colors.placeholder;\n      errorColor = colors.error;\n    }\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth -\n        (labelScale * labelWidth) / 2 -\n        (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n    let labelTranslationXOffset = 0;\n    const isAdornmentLeftIcon = adornmentConfig.some(\n      ({ side, type }) =>\n        side === AdornmentSide.Left && type === AdornmentType.Icon\n    );\n    if (isAdornmentLeftIcon) {\n      labelTranslationXOffset =\n        (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n    }\n\n    const minInputHeight =\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      LABEL_PADDING_TOP\n    );\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: LABEL_PADDING_TOP,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      lineHeight,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputOutlinedDense : styles.inputOutlined\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = hasActiveOutline\n      ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n      : parentState.labelLayout.measured\n      ? 1\n      : 0;\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      backgroundColor: backgroundColor as ColorValue,\n      errorColor,\n      labelTranslationXOffset,\n      roundness: theme.roundness,\n    };\n\n    const minHeight = (height ||\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n    const { leftLayout, rightLayout } = parentState;\n\n    const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: leftLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: rightLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n    const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: ADORNMENT_SIZE,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixWidth = right\n      ? rightLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const leftAffixWidth = left\n      ? leftLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\n      {\n        adornmentConfig,\n        rightAffixWidth,\n        leftAffixWidth,\n        mode: 'outlined',\n      }\n    );\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition,\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange,\n    };\n\n    let adornmentProps: TextInputAdornmentProps = {\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Icon]: iconTopPosition,\n        [AdornmentType.Affix]: affixTopPosition,\n      },\n      onAffixChange,\n      isTextInputFocused: parentState.focused,\n    };\n    if (adornmentConfig.length) {\n      adornmentProps = {\n        ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font, fontSize, fontWeight },\n        visible: this.props.parentState.labeled,\n      };\n    }\n\n    return (\n      <View style={viewStyle}>\n        {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n        <Outline\n          theme={theme}\n          hasActiveOutline={hasActiveOutline}\n          focused={parentState.focused}\n          activeColor={activeColor}\n          outlineColor={outlineColor}\n          backgroundColor={backgroundColor}\n        />\n        <View>\n          <View\n            style={[\n              styles.labelContainer,\n              {\n                paddingTop: LABEL_PADDING_TOP,\n                minHeight,\n              },\n            ]}\n          >\n            <InputLabel\n              parentState={parentState}\n              labelProps={labelProps}\n              labelBackground={LabelBackground}\n            />\n            {render?.({\n              testID: 'text-input-outlined',\n              ...rest,\n              ref: innerRef,\n              onChangeText,\n              placeholder: label\n                ? parentState.placeholder\n                : this.props.placeholder,\n              placeholderTextColor: placeholderTextColor || placeholderColor,\n              editable: !disabled && editable,\n              selectionColor:\n                typeof selectionColor === 'undefined'\n                  ? activeColor\n                  : selectionColor,\n              onFocus,\n              onBlur,\n              underlineColorAndroid: 'transparent',\n              multiline,\n              style: [\n                styles.input,\n                !multiline || (multiline && height)\n                  ? { height: inputHeight }\n                  : {},\n                paddingOut,\n                {\n                  ...font,\n                  fontSize,\n                  fontWeight,\n                  color: inputTextColor,\n                  textAlignVertical: multiline ? 'top' : 'center',\n                  textAlign: textAlign\n                    ? textAlign\n                    : I18nManager.isRTL\n                    ? 'right'\n                    : 'left',\n                },\n                Platform.OS === 'web' && { outline: 'none' },\n                adornmentStyleAdjustmentForNativeInput,\n              ],\n            } as RenderProps)}\n          </View>\n          <TextInputAdornment {...adornmentProps} />\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  activeColor: string;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  backgroundColor: ColorValue;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  focused,\n  backgroundColor,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: focused ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}