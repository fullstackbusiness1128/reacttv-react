{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaConsumer } from 'react-native-safe-area-context';\nimport { StackActions, NavigationActions, SceneView } from 'react-navigation';\nimport { GestureHandlerRootView } from \"../GestureHandler\";\nimport CardStack from \"./CardStack\";\nimport KeyboardManager from \"../KeyboardManager\";\nimport HeaderContainer from \"../Header/HeaderContainer\";\nimport SafeAreaProviderCompat from \"../SafeAreaProviderCompat\";\nimport HeaderShownContext from \"../../utils/HeaderShownContext\";\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\n\nvar isArrayEqual = function isArrayEqual(a, b) {\n  return a.length === b.length && a.every(function (it, index) {\n    return it === b[index];\n  });\n};\n\nvar StackView = function (_React$Component) {\n  _inherits(StackView, _React$Component);\n\n  function StackView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StackView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StackView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getGesturesEnabled\", function (_ref) {\n      var route = _ref.route;\n      var descriptor = _this.state.descriptors[route.key];\n\n      if (descriptor) {\n        var _descriptor$options3 = descriptor.options,\n            gestureEnabled = _descriptor$options3.gestureEnabled,\n            animationEnabled = _descriptor$options3.animationEnabled;\n\n        if (animationEnabled === false) {\n          return false;\n        }\n\n        return gestureEnabled !== undefined ? gestureEnabled : Platform.OS !== 'android';\n      }\n\n      return false;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousRoute\", function (_ref2) {\n      var route = _ref2.route;\n      var _this$state = _this.state,\n          closingRouteKeys = _this$state.closingRouteKeys,\n          replacingRouteKeys = _this$state.replacingRouteKeys;\n\n      var routes = _this.state.routes.filter(function (r) {\n        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);\n      });\n\n      var index = routes.findIndex(function (r) {\n        return r.key === route.key;\n      });\n      return routes[index - 1];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderScene\", function (_ref3) {\n      var route = _ref3.route;\n      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];\n\n      if (!descriptor) {\n        return null;\n      }\n\n      var navigation = descriptor.navigation,\n          getComponent = descriptor.getComponent;\n      var SceneComponent = getComponent();\n      return React.createElement(SceneView, {\n        screenProps: _this.props.screenProps,\n        navigation: navigation,\n        component: SceneComponent\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderHeader\", function (props) {\n      return React.createElement(HeaderContainer, props);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionComplete\", function () {\n      var _this$props = _this.props,\n          state = _this$props.state,\n          navigation = _this$props.navigation;\n\n      if (state.isTransitioning) {\n        navigation.dispatch(StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: state.routes[state.index].key\n        }));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOpenRoute\", function (_ref4) {\n      var route = _ref4.route;\n      var _this$props2 = _this.props,\n          state = _this$props2.state,\n          navigation = _this$props2.navigation;\n      var _this$state2 = _this.state,\n          closingRouteKeys = _this$state2.closingRouteKeys,\n          replacingRouteKeys = _this$state2.replacingRouteKeys;\n\n      _this.handleTransitionComplete();\n\n      if (closingRouteKeys.some(function (key) {\n        return key === route.key;\n      }) && replacingRouteKeys.every(function (key) {\n        return key !== route.key;\n      }) && !state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(NavigationActions.navigate(route));\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {\n              return !state.replacingRouteKeys.includes(r.key);\n            }) : state.routes,\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            replacingRouteKeys: []\n          };\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCloseRoute\", function (_ref5) {\n      var route = _ref5.route;\n      var _this$props3 = _this.props,\n          state = _this$props3.state,\n          navigation = _this$props3.navigation;\n\n      if (state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(StackActions.pop({\n          key: route.key,\n          prune: false\n        }));\n      } else {\n        _this.handleTransitionComplete();\n\n        _this.setState(function (state) {\n          return {\n            routes: state.routes.filter(function (r) {\n              return r.key !== route.key;\n            }),\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            })\n          };\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionStart\", function (_ref6, closing) {\n      var route = _ref6.route;\n\n      var _descriptor$options$o, _descriptor$options;\n\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key] || _this.state.descriptors[route.key];\n      descriptor === null || descriptor === void 0 ? void 0 : (_descriptor$options$o = (_descriptor$options = descriptor.options).onTransitionStart) === null || _descriptor$options$o === void 0 ? void 0 : _descriptor$options$o.call(_descriptor$options, {\n        closing: closing\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionEnd\", function (_ref7, closing) {\n      var route = _ref7.route;\n\n      var _descriptor$options$o2, _descriptor$options2;\n\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key] || _this.state.descriptors[route.key];\n      descriptor === null || descriptor === void 0 ? void 0 : (_descriptor$options$o2 = (_descriptor$options2 = descriptor.options).onTransitionEnd) === null || _descriptor$options$o2 === void 0 ? void 0 : _descriptor$options$o2.call(_descriptor$options2, {\n        closing: closing\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStart\", function () {});\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureEnd\", function () {});\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureCancel\", function () {});\n\n    return _this;\n  }\n\n  _createClass(StackView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          state = _this$props4.state,\n          navigation = _this$props4.navigation,\n          keyboardHandlingEnabled = _this$props4.keyboardHandlingEnabled,\n          _this$props4$mode = _this$props4.mode,\n          mode = _this$props4$mode === void 0 ? 'card' : _this$props4$mode,\n          _this$props4$headerMo = _this$props4.headerMode,\n          headerMode = _this$props4$headerMo === void 0 ? mode === 'card' && Platform.OS === 'ios' ? 'float' : 'screen' : _this$props4$headerMo,\n          _ = _this$props4.descriptors,\n          rest = _objectWithoutProperties(_this$props4, [\"state\", \"navigation\", \"keyboardHandlingEnabled\", \"mode\", \"headerMode\", \"descriptors\"]);\n\n      var _this$state3 = this.state,\n          routes = _this$state3.routes,\n          descriptors = _this$state3.descriptors,\n          openingRouteKeys = _this$state3.openingRouteKeys,\n          closingRouteKeys = _this$state3.closingRouteKeys;\n      return React.createElement(React.Fragment, null, React.createElement(GestureHandlerWrapper, {\n        style: styles.container\n      }, React.createElement(SafeAreaProviderCompat, null, React.createElement(SafeAreaConsumer, null, function (insets) {\n        return React.createElement(KeyboardManager, {\n          enabled: keyboardHandlingEnabled !== false\n        }, function (props) {\n          return React.createElement(HeaderShownContext.Consumer, null, function (isParentHeaderShown) {\n            return React.createElement(CardStack, _extends({\n              mode: mode,\n              insets: insets,\n              isParentHeaderShown: isParentHeaderShown,\n              getPreviousRoute: _this2.getPreviousRoute,\n              getGesturesEnabled: _this2.getGesturesEnabled,\n              routes: routes,\n              openingRouteKeys: openingRouteKeys,\n              closingRouteKeys: closingRouteKeys,\n              onOpenRoute: _this2.handleOpenRoute,\n              onCloseRoute: _this2.handleCloseRoute,\n              onTransitionStart: _this2.handleTransitionStart,\n              onTransitionEnd: _this2.handleTransitionEnd,\n              renderHeader: _this2.renderHeader,\n              renderScene: _this2.renderScene,\n              headerMode: headerMode,\n              state: state,\n              descriptors: descriptors,\n              onGestureStart: _this2.handleGestureStart,\n              onGestureEnd: _this2.handleGestureEnd,\n              onGestureCancel: _this2.handleGestureCancel\n            }, rest, props));\n          });\n        });\n      }))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(function (r) {\n        return r.key;\n      }), state.previousRoutes.map(function (r) {\n        return r.key;\n      }))) && state.routes.length) {\n        var _routes = state.routes;\n        var _previousRoutes = state.previousRoutes;\n        var _descriptors = props.descriptors;\n        var previousDescriptors = state.previousDescriptors;\n\n        if (props.descriptors !== state.previousDescriptors) {\n          _descriptors = state.routes.reduce(function (acc, route) {\n            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n            return acc;\n          }, {});\n          previousDescriptors = props.descriptors;\n        }\n\n        if (props.state.routes !== state.previousRoutes) {\n          var map = props.state.routes.reduce(function (acc, route) {\n            acc[route.key] = route;\n            return acc;\n          }, {});\n          _routes = state.routes.map(function (route) {\n            return map[route.key] || route;\n          });\n          _previousRoutes = props.state.routes;\n        }\n\n        return {\n          routes: _routes,\n          previousRoutes: _previousRoutes,\n          descriptors: _descriptors,\n          previousDescriptors: previousDescriptors\n        };\n      }\n\n      var routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n      var openingRouteKeys = state.openingRouteKeys,\n          closingRouteKeys = state.closingRouteKeys,\n          replacingRouteKeys = state.replacingRouteKeys,\n          previousRoutes = state.previousRoutes;\n      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n      var nextFocusedRoute = routes[routes.length - 1];\n\n      var isAnimationEnabled = function isAnimationEnabled(key) {\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return descriptor ? descriptor.options.animationEnabled !== false : true;\n      };\n\n      var getAnimationTypeForReplace = function getAnimationTypeForReplace(key) {\n        var _descriptor$options$a;\n\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return (_descriptor$options$a = descriptor.options.animationTypeForReplace) !== null && _descriptor$options$a !== void 0 ? _descriptor$options$a : 'push';\n      };\n\n      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n        if (!previousRoutes.some(function (r) {\n          return r.key === nextFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n            openingRouteKeys = [].concat(_toConsumableArray(openingRouteKeys), [nextFocusedRoute.key]);\n            closingRouteKeys = closingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n\n            if (!routes.some(function (r) {\n              return r.key === previousFocusedRoute.key;\n            })) {\n              openingRouteKeys = openingRouteKeys.filter(function (key) {\n                return key !== previousFocusedRoute.key;\n              });\n\n              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n                closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n                openingRouteKeys = openingRouteKeys.filter(function (key) {\n                  return key !== nextFocusedRoute.key;\n                });\n                routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n              } else {\n                replacingRouteKeys = [].concat(_toConsumableArray(replacingRouteKeys), [previousFocusedRoute.key]);\n                closingRouteKeys = closingRouteKeys.filter(function (key) {\n                  return key !== previousFocusedRoute.key;\n                });\n                routes = routes.slice();\n                routes.splice(routes.length - 1, 0, previousFocusedRoute);\n              }\n            }\n          }\n        } else if (!routes.some(function (r) {\n          return r.key === previousFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n            closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n            openingRouteKeys = openingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n          }\n        } else {}\n      } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n        var _routes2;\n\n        routes = routes.slice();\n\n        (_routes2 = routes).splice.apply(_routes2, [routes.length - 1, 0].concat(_toConsumableArray(state.routes.filter(function (_ref8) {\n          var key = _ref8.key;\n          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n        }))));\n      }\n\n      if (!routes.length) {\n        throw new Error('There should always be at least one route in the navigation state.');\n      }\n\n      var descriptors = routes.reduce(function (acc, route) {\n        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n        return acc;\n      }, {});\n      return {\n        routes: routes,\n        previousRoutes: props.state.routes,\n        previousDescriptors: props.descriptors,\n        openingRouteKeys: openingRouteKeys,\n        closingRouteKeys: closingRouteKeys,\n        replacingRouteKeys: replacingRouteKeys,\n        descriptors: descriptors\n      };\n    }\n  }]);\n\n  return StackView;\n}(React.Component);\n\nexport { StackView as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","SafeAreaConsumer","StackActions","NavigationActions","SceneView","GestureHandlerRootView","CardStack","KeyboardManager","HeaderContainer","SafeAreaProviderCompat","HeaderShownContext","GestureHandlerWrapper","View","isArrayEqual","a","b","length","every","it","index","StackView","args","_defineProperty","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","route","descriptor","state","key","options","gestureEnabled","animationEnabled","undefined","Platform","OS","filter","r","includes","findIndex","props","navigation","getComponent","SceneComponent","screenProps","component","isTransitioning","dispatch","completeTransition","toChildKey","handleTransitionComplete","some","navigate","setState","pop","prune","closing","onTransitionStart","onTransitionEnd","keyboardHandlingEnabled","mode","headerMode","_","rest","style","styles","container","insets","enabled","Consumer","isParentHeaderShown","getPreviousRoute","getGesturesEnabled","onOpenRoute","handleOpenRoute","onCloseRoute","handleCloseRoute","handleTransitionStart","handleTransitionEnd","renderHeader","renderScene","onGestureStart","handleGestureStart","onGestureEnd","handleGestureEnd","onGestureCancel","handleGestureCancel","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","getAnimationTypeForReplace","animationTypeForReplace","splice","Error","Component","StyleSheet","create","flex"],"sources":["StackView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport {\n  StackActions,\n  NavigationState as StackNavigationState,\n  NavigationActions,\n  SceneView,\n} from 'react-navigation';\n\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport type {\n  Route,\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n  screenProps: unknown;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== undefined\n        ? gestureEnabled\n        : Platform.OS !== 'android';\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    const { navigation, getComponent } = descriptor;\n    const SceneComponent = getComponent();\n\n    return (\n      <SceneView\n        screenProps={this.props.screenProps}\n        navigation={navigation}\n        component={SceneComponent}\n      />\n    );\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleTransitionComplete = () => {\n    const { state, navigation } = this.props;\n\n    if (state.isTransitioning) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: state.routes[state.index].key,\n        })\n      );\n    }\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    this.handleTransitionComplete();\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.dispatch(NavigationActions.navigate(route));\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      // @ts-ignore\n      navigation.dispatch(StackActions.pop({ key: route.key, prune: false }));\n    } else {\n      this.handleTransitionComplete();\n\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionStart?.({ closing });\n  };\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionEnd?.({ closing });\n  };\n\n  private handleGestureStart = () => {\n    // Do nothing\n  };\n\n  private handleGestureEnd = () => {\n    // Do nothing\n  };\n\n  private handleGestureCancel = () => {\n    // Do nothing\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      headerMode = mode === 'card' && Platform.OS === 'ios'\n        ? 'float'\n        : 'screen',\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    return (\n      <>\n        <GestureHandlerWrapper style={styles.container}>\n          <SafeAreaProviderCompat>\n            <SafeAreaConsumer>\n              {(insets) => (\n                <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                  {(props) => (\n                    <HeaderShownContext.Consumer>\n                      {(isParentHeaderShown) => (\n                        <CardStack\n                          mode={mode}\n                          insets={insets as EdgeInsets}\n                          isParentHeaderShown={isParentHeaderShown}\n                          getPreviousRoute={this.getPreviousRoute}\n                          getGesturesEnabled={this.getGesturesEnabled}\n                          routes={routes}\n                          openingRouteKeys={openingRouteKeys}\n                          closingRouteKeys={closingRouteKeys}\n                          onOpenRoute={this.handleOpenRoute}\n                          onCloseRoute={this.handleCloseRoute}\n                          onTransitionStart={this.handleTransitionStart}\n                          onTransitionEnd={this.handleTransitionEnd}\n                          renderHeader={this.renderHeader}\n                          renderScene={this.renderScene}\n                          headerMode={headerMode}\n                          state={state}\n                          descriptors={descriptors}\n                          onGestureStart={this.handleGestureStart}\n                          onGestureEnd={this.handleGestureEnd}\n                          onGestureCancel={this.handleGestureCancel}\n                          {...rest}\n                          {...props}\n                        />\n                      )}\n                    </HeaderShownContext.Consumer>\n                  )}\n                </KeyboardManager>\n              )}\n            </SafeAreaConsumer>\n          </SafeAreaProviderCompat>\n        </GestureHandlerWrapper>\n      </>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}