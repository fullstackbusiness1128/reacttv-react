{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { __awaiter, __rest } from \"tslib\";\nimport { Audio, Video } from 'expo-av';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ControlStates, ErrorSeverity, PlaybackStates } from \"./constants\";\nimport { ErrorMessage, TouchableButton, deepMerge, getMinutesSecondsFromMilliseconds, styles } from \"./utils\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { defaultProps } from \"./props\";\nimport { useEffect, useRef, useState } from 'react';\nimport React from 'react';\nimport Slider from '@react-native-community/slider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar VideoPlayer = function VideoPlayer(tempProps) {\n  var props = deepMerge(defaultProps, tempProps);\n  var playbackInstance = null;\n  var controlsTimer = null;\n  var initialShow = props.defaultControlsVisible;\n  var header = props.header;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      errorMessage = _useState2[0],\n      setErrorMessage = _useState2[1];\n\n  var controlsOpacity = useRef(new Animated.Value(props.defaultControlsVisible ? 1 : 0)).current;\n\n  var _useState3 = useState(props.defaultControlsVisible ? ControlStates.Visible : ControlStates.Hidden),\n      _useState4 = _slicedToArray(_useState3, 2),\n      controlsState = _useState4[0],\n      setControlsState = _useState4[1];\n\n  var _useState5 = useState({\n    position: 0,\n    duration: 0,\n    state: props.videoProps.source ? PlaybackStates.Loading : PlaybackStates.Error\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      playbackInstanceInfo = _useState6[0],\n      setPlaybackInstanceInfo = _useState6[1];\n\n  var _a = props.slider,\n      sliderRef = _a.ref,\n      sliderProps = __rest(_a, [\"ref\"]);\n\n  var screenRatio = props.style.width / props.style.height;\n  var videoHeight = props.style.height;\n  var videoWidth = videoHeight * screenRatio;\n\n  if (videoWidth > props.style.width) {\n    videoWidth = props.style.width;\n    videoHeight = videoWidth / screenRatio;\n  }\n\n  useEffect(function () {\n    setAudio();\n    return function () {\n      if (playbackInstance) {\n        playbackInstance.setStatusAsync({\n          shouldPlay: false\n        });\n      }\n    };\n  }, []);\n  useEffect(function () {\n    if (!props.videoProps.source) {\n      console.error('[VideoPlayer] `Source` is a required in `videoProps`. ' + 'Check https://docs.expo.io/versions/latest/sdk/video/#usage');\n      setErrorMessage('`Source` is a required in `videoProps`');\n      setPlaybackInstanceInfo(_extends(_extends({}, playbackInstanceInfo), {\n        state: PlaybackStates.Error\n      }));\n    } else {\n      setPlaybackInstanceInfo(_extends(_extends({}, playbackInstanceInfo), {\n        state: PlaybackStates.Playing\n      }));\n    }\n  }, [props.videoProps.source]);\n\n  var hideAnimation = function hideAnimation() {\n    Animated.timing(controlsOpacity, {\n      toValue: 0,\n      duration: props.animation.fadeOutDuration,\n      useNativeDriver: true\n    }).start(function (_ref) {\n      var finished = _ref.finished;\n\n      if (finished) {\n        setControlsState(ControlStates.Hidden);\n      }\n    });\n  };\n\n  var animationToggle = function animationToggle() {\n    if (controlsState === ControlStates.Hidden) {\n      Animated.timing(controlsOpacity, {\n        toValue: 1,\n        duration: props.animation.fadeInDuration,\n        useNativeDriver: true\n      }).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        if (finished) {\n          setControlsState(ControlStates.Visible);\n        }\n      });\n    } else if (controlsState === ControlStates.Visible) {\n      hideAnimation();\n    }\n\n    if (controlsTimer === null && props.autoHidePlayer) {\n      controlsTimer = setTimeout(function () {\n        if (playbackInstanceInfo.state === PlaybackStates.Playing && controlsState === ControlStates.Hidden) {\n          hideAnimation();\n        }\n\n        if (controlsTimer) {\n          clearTimeout(controlsTimer);\n        }\n\n        controlsTimer = null;\n      }, 2000);\n    }\n  };\n\n  var setAudio = function setAudio() {\n    return __awaiter(void 0, void 0, void 0, _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return Audio.setAudioModeAsync({\n                playsInSilentModeIOS: true\n              });\n\n            case 3:\n              _context.next = 8;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n              props.errorCallback({\n                type: ErrorSeverity.NonFatal,\n                message: 'Audio.setAudioModeAsync',\n                obj: _context.t0\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 5]]);\n    }));\n  };\n\n  var updatePlaybackCallback = function updatePlaybackCallback(status) {\n    props.playbackCallback(status);\n\n    if (status.isLoaded) {\n      setPlaybackInstanceInfo(_extends(_extends({}, playbackInstanceInfo), {\n        position: status.positionMillis,\n        duration: status.durationMillis || 0,\n        state: status.positionMillis === status.durationMillis ? PlaybackStates.Ended : status.isBuffering ? PlaybackStates.Buffering : status.shouldPlay ? PlaybackStates.Playing : PlaybackStates.Paused\n      }));\n\n      if (status.didJustFinish && controlsState === ControlStates.Hidden || status.isBuffering && controlsState === ControlStates.Hidden && initialShow) {\n        animationToggle();\n        initialShow = false;\n      }\n    } else {\n      if (status.isLoaded === false && status.error) {\n        var errorMsg = \"Encountered a fatal error during playback: \" + status.error;\n        setErrorMessage(errorMsg);\n        props.errorCallback({\n          type: ErrorSeverity.Fatal,\n          message: errorMsg,\n          obj: {}\n        });\n      }\n    }\n  };\n\n  var togglePlay = function togglePlay() {\n    return __awaiter(void 0, void 0, void 0, _regeneratorRuntime.mark(function _callee2() {\n      var shouldPlay;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(controlsState === ControlStates.Hidden)) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              shouldPlay = playbackInstanceInfo.state !== PlaybackStates.Playing;\n\n              if (!(playbackInstance !== null)) {\n                _context2.next = 8;\n                break;\n              }\n\n              _context2.next = 6;\n              return playbackInstance.setStatusAsync(_extends({\n                shouldPlay: shouldPlay\n              }, playbackInstanceInfo.state === PlaybackStates.Ended && {\n                positionMillis: 0\n              }));\n\n            case 6:\n              setPlaybackInstanceInfo(_extends(_extends({}, playbackInstanceInfo), {\n                state: playbackInstanceInfo.state === PlaybackStates.Playing ? PlaybackStates.Paused : PlaybackStates.Playing\n              }));\n\n              if (shouldPlay) {\n                animationToggle();\n              }\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n  };\n\n  if (playbackInstanceInfo.state === PlaybackStates.Error) {\n    return _jsx(View, {\n      style: {\n        backgroundColor: props.style.videoBackgroundColor,\n        width: videoWidth,\n        height: videoHeight\n      },\n      children: _jsx(ErrorMessage, {\n        style: props.textStyle,\n        message: errorMessage\n      })\n    });\n  }\n\n  if (playbackInstanceInfo.state === PlaybackStates.Loading) {\n    return _jsx(View, {\n      style: {\n        backgroundColor: props.style.controlsBackgroundColor,\n        width: videoWidth,\n        height: videoHeight,\n        justifyContent: 'center'\n      },\n      children: props.icon.loading || _jsx(ActivityIndicator, _objectSpread({}, props.activityIndicator))\n    });\n  }\n\n  return _jsxs(View, {\n    style: {\n      backgroundColor: props.style.videoBackgroundColor,\n      width: videoWidth,\n      height: videoHeight,\n      maxWidth: '100%'\n    },\n    children: [_jsx(Video, _objectSpread({\n      style: styles.videoWrapper\n    }, props.videoProps, {\n      ref: function ref(component) {\n        playbackInstance = component;\n\n        if (props.videoProps.ref) {\n          props.videoProps.ref.current = component;\n        }\n      },\n      onPlaybackStatusUpdate: updatePlaybackCallback\n    })), _jsx(Animated.View, {\n      style: [styles.topInfoWrapper, {\n        opacity: controlsOpacity\n      }],\n      children: header\n    }), _jsx(TouchableWithoutFeedback, {\n      onPress: animationToggle,\n      children: _jsxs(Animated.View, {\n        style: _extends(_extends({}, StyleSheet.absoluteFillObject), {\n          opacity: controlsOpacity,\n          justifyContent: 'center',\n          alignItems: 'center'\n        }),\n        children: [_jsx(View, {\n          style: _extends(_extends({}, StyleSheet.absoluteFillObject), {\n            backgroundColor: props.style.controlsBackgroundColor,\n            opacity: 0.5\n          })\n        }), _jsx(View, {\n          pointerEvents: controlsState === ControlStates.Visible ? 'auto' : 'none',\n          children: _jsx(View, {\n            style: styles.iconWrapper,\n            children: _jsx(TouchableButton, {\n              onPress: togglePlay,\n              children: _jsxs(View, {\n                children: [playbackInstanceInfo.state === PlaybackStates.Buffering && (props.icon.loading || _jsx(ActivityIndicator, _objectSpread({}, props.activityIndicator))), playbackInstanceInfo.state === PlaybackStates.Playing && props.icon.pause, playbackInstanceInfo.state === PlaybackStates.Paused && props.icon.play, playbackInstanceInfo.state === PlaybackStates.Ended && props.icon.replay, (playbackInstanceInfo.state === PlaybackStates.Ended && !props.icon.replay || playbackInstanceInfo.state === PlaybackStates.Playing && !props.icon.pause || playbackInstanceInfo.state === PlaybackStates.Paused && !props.icon.pause) && _jsx(MaterialIcons, {\n                  name: playbackInstanceInfo.state === PlaybackStates.Playing ? 'pause' : playbackInstanceInfo.state === PlaybackStates.Paused ? 'play-arrow' : 'replay',\n                  style: props.icon.style,\n                  size: props.icon.size,\n                  color: props.icon.color\n                })]\n              })\n            })\n          })\n        })]\n      })\n    }), _jsxs(Animated.View, {\n      style: [styles.bottomInfoWrapper, {\n        opacity: controlsOpacity\n      }],\n      children: [props.timeVisible && _jsx(Text, {\n        style: [props.textStyle, styles.timeLeft],\n        children: getMinutesSecondsFromMilliseconds(playbackInstanceInfo.position)\n      }), props.slider.visible && _jsx(Slider, _objectSpread({}, sliderProps, {\n        style: [styles.slider, props.slider.style],\n        value: playbackInstanceInfo.duration ? playbackInstanceInfo.position / playbackInstanceInfo.duration : 0,\n        onSlidingStart: function onSlidingStart() {\n          if (playbackInstanceInfo.state === PlaybackStates.Playing) {\n            togglePlay();\n            setPlaybackInstanceInfo(_extends(_extends({}, playbackInstanceInfo), {\n              state: PlaybackStates.Paused\n            }));\n          }\n        },\n        onSlidingComplete: function onSlidingComplete(e) {\n          return __awaiter(void 0, void 0, void 0, _regeneratorRuntime.mark(function _callee3() {\n            var position;\n            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    position = e * playbackInstanceInfo.duration;\n\n                    if (!playbackInstance) {\n                      _context3.next = 4;\n                      break;\n                    }\n\n                    _context3.next = 4;\n                    return playbackInstance.setStatusAsync({\n                      positionMillis: position,\n                      shouldPlay: true\n                    });\n\n                  case 4:\n                    setPlaybackInstanceInfo(_extends(_extends({}, playbackInstanceInfo), {\n                      position: position\n                    }));\n\n                  case 5:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3);\n          }));\n        }\n      })), props.timeVisible && _jsx(Text, {\n        style: [props.textStyle, styles.timeRight],\n        children: getMinutesSecondsFromMilliseconds(playbackInstanceInfo.duration)\n      }), props.fullscreen.visible && _jsx(TouchableButton, {\n        onPress: function onPress() {\n          return props.fullscreen.inFullscreen ? props.fullscreen.exitFullscreen() : props.fullscreen.enterFullscreen();\n        },\n        children: _jsxs(View, {\n          children: [props.icon.fullscreen, props.icon.exitFullscreen, (!props.icon.fullscreen && props.fullscreen.inFullscreen || !props.icon.exitFullscreen && !props.fullscreen.inFullscreen) && _jsx(MaterialIcons, {\n            name: props.fullscreen.inFullscreen ? 'fullscreen-exit' : 'fullscreen',\n            style: props.icon.style,\n            size: props.icon.size / 2,\n            color: props.icon.color\n          })]\n        })\n      })]\n    })]\n  });\n};\n\nVideoPlayer.defaultProps = defaultProps;\nexport default VideoPlayer;","map":{"version":3,"names":["__awaiter","__rest","Audio","Video","ControlStates","ErrorSeverity","PlaybackStates","ErrorMessage","TouchableButton","deepMerge","getMinutesSecondsFromMilliseconds","styles","MaterialIcons","defaultProps","useEffect","useRef","useState","React","Slider","VideoPlayer","tempProps","props","playbackInstance","controlsTimer","initialShow","defaultControlsVisible","header","errorMessage","setErrorMessage","controlsOpacity","Animated","Value","current","Visible","Hidden","controlsState","setControlsState","position","duration","state","videoProps","source","Loading","Error","playbackInstanceInfo","setPlaybackInstanceInfo","_a","slider","sliderRef","ref","sliderProps","screenRatio","style","width","height","videoHeight","videoWidth","setAudio","setStatusAsync","shouldPlay","console","error","Playing","hideAnimation","timing","toValue","animation","fadeOutDuration","useNativeDriver","start","finished","animationToggle","fadeInDuration","autoHidePlayer","setTimeout","clearTimeout","setAudioModeAsync","playsInSilentModeIOS","errorCallback","type","NonFatal","message","obj","updatePlaybackCallback","status","playbackCallback","isLoaded","positionMillis","durationMillis","Ended","isBuffering","Buffering","Paused","didJustFinish","errorMsg","Fatal","togglePlay","backgroundColor","videoBackgroundColor","textStyle","controlsBackgroundColor","justifyContent","icon","loading","activityIndicator","maxWidth","videoWrapper","component","topInfoWrapper","opacity","StyleSheet","absoluteFillObject","alignItems","iconWrapper","pause","play","replay","size","color","bottomInfoWrapper","timeVisible","timeLeft","visible","e","timeRight","fullscreen","inFullscreen","exitFullscreen","enterFullscreen"],"sources":["E:/works/android/20220927/flicknplayreacttv-main/flicknplayreacttv-main/node_modules/expo-video-player/dist/index.js"],"sourcesContent":["import { __awaiter, __rest } from \"tslib\";\nimport { Audio, Video } from 'expo-av';\nimport { ActivityIndicator, Animated, StyleSheet, Text, TouchableWithoutFeedback, View, } from 'react-native';\nimport { ControlStates, ErrorSeverity, PlaybackStates } from './constants';\nimport { ErrorMessage, TouchableButton, deepMerge, getMinutesSecondsFromMilliseconds, styles, } from './utils';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { defaultProps } from './props';\nimport { useEffect, useRef, useState } from 'react';\nimport React from 'react';\nimport Slider from '@react-native-community/slider';\nconst VideoPlayer = (tempProps) => {\n    const props = deepMerge(defaultProps, tempProps);\n    let playbackInstance = null;\n    let controlsTimer = null;\n    let initialShow = props.defaultControlsVisible;\n    const header = props.header;\n    const [errorMessage, setErrorMessage] = useState('');\n    const controlsOpacity = useRef(new Animated.Value(props.defaultControlsVisible ? 1 : 0)).current;\n    const [controlsState, setControlsState] = useState(props.defaultControlsVisible ? ControlStates.Visible : ControlStates.Hidden);\n    const [playbackInstanceInfo, setPlaybackInstanceInfo] = useState({\n        position: 0,\n        duration: 0,\n        state: props.videoProps.source ? PlaybackStates.Loading : PlaybackStates.Error,\n    });\n    // We need to extract ref, because of misstypes in <Slider />\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _a = props.slider, { ref: sliderRef } = _a, sliderProps = __rest(_a, [\"ref\"]);\n    const screenRatio = props.style.width / props.style.height;\n    let videoHeight = props.style.height;\n    let videoWidth = videoHeight * screenRatio;\n    if (videoWidth > props.style.width) {\n        videoWidth = props.style.width;\n        videoHeight = videoWidth / screenRatio;\n    }\n    useEffect(() => {\n        setAudio();\n        return () => {\n            if (playbackInstance) {\n                playbackInstance.setStatusAsync({\n                    shouldPlay: false,\n                });\n            }\n        };\n    }, []);\n    useEffect(() => {\n        if (!props.videoProps.source) {\n            console.error('[VideoPlayer] `Source` is a required in `videoProps`. ' +\n                'Check https://docs.expo.io/versions/latest/sdk/video/#usage');\n            setErrorMessage('`Source` is a required in `videoProps`');\n            setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { state: PlaybackStates.Error }));\n        }\n        else {\n            setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { state: PlaybackStates.Playing }));\n        }\n    }, [props.videoProps.source]);\n    const hideAnimation = () => {\n        Animated.timing(controlsOpacity, {\n            toValue: 0,\n            duration: props.animation.fadeOutDuration,\n            useNativeDriver: true,\n        }).start(({ finished }) => {\n            if (finished) {\n                setControlsState(ControlStates.Hidden);\n            }\n        });\n    };\n    const animationToggle = () => {\n        if (controlsState === ControlStates.Hidden) {\n            Animated.timing(controlsOpacity, {\n                toValue: 1,\n                duration: props.animation.fadeInDuration,\n                useNativeDriver: true,\n            }).start(({ finished }) => {\n                if (finished) {\n                    setControlsState(ControlStates.Visible);\n                }\n            });\n        }\n        else if (controlsState === ControlStates.Visible) {\n            hideAnimation();\n        }\n        if (controlsTimer === null && props.autoHidePlayer) {\n            controlsTimer = setTimeout(() => {\n                if (playbackInstanceInfo.state === PlaybackStates.Playing &&\n                    controlsState === ControlStates.Hidden) {\n                    hideAnimation();\n                }\n                if (controlsTimer) {\n                    clearTimeout(controlsTimer);\n                }\n                controlsTimer = null;\n            }, 2000);\n        }\n    };\n    // Set audio mode to play even in silent mode (like the YouTube app)\n    const setAudio = () => __awaiter(void 0, void 0, void 0, function* () {\n        try {\n            yield Audio.setAudioModeAsync({\n                playsInSilentModeIOS: true,\n            });\n        }\n        catch (e) {\n            props.errorCallback({\n                type: ErrorSeverity.NonFatal,\n                message: 'Audio.setAudioModeAsync',\n                obj: e,\n            });\n        }\n    });\n    const updatePlaybackCallback = (status) => {\n        props.playbackCallback(status);\n        if (status.isLoaded) {\n            setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { position: status.positionMillis, duration: status.durationMillis || 0, state: status.positionMillis === status.durationMillis\n                    ? PlaybackStates.Ended\n                    : status.isBuffering\n                        ? PlaybackStates.Buffering\n                        : status.shouldPlay\n                            ? PlaybackStates.Playing\n                            : PlaybackStates.Paused }));\n            if ((status.didJustFinish && controlsState === ControlStates.Hidden) ||\n                (status.isBuffering && controlsState === ControlStates.Hidden && initialShow)) {\n                animationToggle();\n                initialShow = false;\n            }\n        }\n        else {\n            if (status.isLoaded === false && status.error) {\n                const errorMsg = `Encountered a fatal error during playback: ${status.error}`;\n                setErrorMessage(errorMsg);\n                props.errorCallback({ type: ErrorSeverity.Fatal, message: errorMsg, obj: {} });\n            }\n        }\n    };\n    const togglePlay = () => __awaiter(void 0, void 0, void 0, function* () {\n        if (controlsState === ControlStates.Hidden) {\n            return;\n        }\n        const shouldPlay = playbackInstanceInfo.state !== PlaybackStates.Playing;\n        if (playbackInstance !== null) {\n            yield playbackInstance.setStatusAsync(Object.assign({ shouldPlay }, (playbackInstanceInfo.state === PlaybackStates.Ended && { positionMillis: 0 })));\n            setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { state: playbackInstanceInfo.state === PlaybackStates.Playing\n                    ? PlaybackStates.Paused\n                    : PlaybackStates.Playing }));\n            if (shouldPlay) {\n                animationToggle();\n            }\n        }\n    });\n    if (playbackInstanceInfo.state === PlaybackStates.Error) {\n        return (<View style={{\n                backgroundColor: props.style.videoBackgroundColor,\n                width: videoWidth,\n                height: videoHeight,\n            }}>\n        <ErrorMessage style={props.textStyle} message={errorMessage}/>\n      </View>);\n    }\n    if (playbackInstanceInfo.state === PlaybackStates.Loading) {\n        return (<View style={{\n                backgroundColor: props.style.controlsBackgroundColor,\n                width: videoWidth,\n                height: videoHeight,\n                justifyContent: 'center',\n            }}>\n        {props.icon.loading || <ActivityIndicator {...props.activityIndicator}/>}\n      </View>);\n    }\n    return (<View style={{\n            backgroundColor: props.style.videoBackgroundColor,\n            width: videoWidth,\n            height: videoHeight,\n            maxWidth: '100%',\n        }}>\n      <Video style={styles.videoWrapper} {...props.videoProps} ref={component => {\n            playbackInstance = component;\n            if (props.videoProps.ref) {\n                props.videoProps.ref.current = component;\n            }\n        }} onPlaybackStatusUpdate={updatePlaybackCallback}/>\n\n      <Animated.View style={[\n            styles.topInfoWrapper,\n            {\n                opacity: controlsOpacity,\n            },\n        ]}>\n        {header}\n      </Animated.View>\n\n      <TouchableWithoutFeedback onPress={animationToggle}>\n        <Animated.View style={Object.assign(Object.assign({}, StyleSheet.absoluteFillObject), { opacity: controlsOpacity, justifyContent: 'center', alignItems: 'center' })}>\n          <View style={Object.assign(Object.assign({}, StyleSheet.absoluteFillObject), { backgroundColor: props.style.controlsBackgroundColor, opacity: 0.5 })}/>\n          <View pointerEvents={controlsState === ControlStates.Visible ? 'auto' : 'none'}>\n            <View style={styles.iconWrapper}>\n              <TouchableButton onPress={togglePlay}>\n                <View>\n                  {playbackInstanceInfo.state === PlaybackStates.Buffering &&\n            (props.icon.loading || <ActivityIndicator {...props.activityIndicator}/>)}\n                  {playbackInstanceInfo.state === PlaybackStates.Playing && props.icon.pause}\n                  {playbackInstanceInfo.state === PlaybackStates.Paused && props.icon.play}\n                  {playbackInstanceInfo.state === PlaybackStates.Ended && props.icon.replay}\n                  {((playbackInstanceInfo.state === PlaybackStates.Ended && !props.icon.replay) ||\n            (playbackInstanceInfo.state === PlaybackStates.Playing && !props.icon.pause) ||\n            (playbackInstanceInfo.state === PlaybackStates.Paused &&\n                !props.icon.pause)) && (<MaterialIcons name={playbackInstanceInfo.state === PlaybackStates.Playing\n                ? 'pause'\n                : playbackInstanceInfo.state === PlaybackStates.Paused\n                    ? 'play-arrow'\n                    : 'replay'} style={props.icon.style} size={props.icon.size} color={props.icon.color}/>)}\n                </View>\n              </TouchableButton>\n            </View>\n          </View>\n        </Animated.View>\n      </TouchableWithoutFeedback>\n\n      <Animated.View style={[\n            styles.bottomInfoWrapper,\n            {\n                opacity: controlsOpacity,\n            },\n        ]}>\n        {props.timeVisible && (<Text style={[props.textStyle, styles.timeLeft]}>\n            {getMinutesSecondsFromMilliseconds(playbackInstanceInfo.position)}\n          </Text>)}\n        {props.slider.visible && (<Slider {...sliderProps} style={[styles.slider, props.slider.style]} value={playbackInstanceInfo.duration\n                ? playbackInstanceInfo.position / playbackInstanceInfo.duration\n                : 0} onSlidingStart={() => {\n                if (playbackInstanceInfo.state === PlaybackStates.Playing) {\n                    togglePlay();\n                    setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { state: PlaybackStates.Paused }));\n                }\n            }} onSlidingComplete={(e) => __awaiter(void 0, void 0, void 0, function* () {\n                const position = e * playbackInstanceInfo.duration;\n                if (playbackInstance) {\n                    yield playbackInstance.setStatusAsync({\n                        positionMillis: position,\n                        shouldPlay: true,\n                    });\n                }\n                setPlaybackInstanceInfo(Object.assign(Object.assign({}, playbackInstanceInfo), { position }));\n            })}/>)}\n        {props.timeVisible && (<Text style={[props.textStyle, styles.timeRight]}>\n            {getMinutesSecondsFromMilliseconds(playbackInstanceInfo.duration)}\n          </Text>)}\n        {props.fullscreen.visible && (<TouchableButton onPress={() => props.fullscreen.inFullscreen\n                ? props.fullscreen.exitFullscreen()\n                : props.fullscreen.enterFullscreen()}>\n            <View>\n              {props.icon.fullscreen}\n              {props.icon.exitFullscreen}\n              {((!props.icon.fullscreen && props.fullscreen.inFullscreen) ||\n                (!props.icon.exitFullscreen && !props.fullscreen.inFullscreen)) && (<MaterialIcons name={props.fullscreen.inFullscreen ? 'fullscreen-exit' : 'fullscreen'} style={props.icon.style} size={props.icon.size / 2} color={props.icon.color}/>)}\n            </View>\n          </TouchableButton>)}\n      </Animated.View>\n    </View>);\n};\nVideoPlayer.defaultProps = defaultProps;\nexport default VideoPlayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}